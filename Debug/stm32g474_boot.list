
stm32g474_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004640  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004818  08004818  00014818  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800486c  0800486c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004874  08004874  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800487c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cc0b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a70  00000000  00000000  0003cc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000a342  00000000  00000000  000416fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001108  00000000  00000000  0004ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001227  00000000  00000000  0004cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000295f2  00000000  00000000  0004dd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022518  00000000  00000000  00077361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f53a8  00000000  00000000  00099879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002cc0  00000000  00000000  0018ec24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  001918e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004800 	.word	0x08004800

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004800 	.word	0x08004800

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/
void apInit(void)
{
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <apInit+0x24>)
  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <apInit+0x28>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800051a:	f042 0202 	orr.w	r2, r2, #2
 800051e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000522:	b082      	sub	sp, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	f003 0302 	and.w	r3, r3, #2
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8000532:	b002      	add	sp, #8
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000534:	f000 bcd0 	b.w	8000ed8 <HAL_GPIO_WritePin>
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400

08000540 <apMain>:

void apMain(void)
{
 8000540:	b510      	push	{r4, lr}


  uint32_t pre_time1 = millis();
 8000542:	f000 f80f 	bl	8000564 <millis>
 8000546:	4604      	mov	r4, r0
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */

    if(millis()-pre_time1 >= 100)
 8000548:	f000 f80c 	bl	8000564 <millis>
 800054c:	1b00      	subs	r0, r0, r4
 800054e:	2863      	cmp	r0, #99	; 0x63
 8000550:	d9fa      	bls.n	8000548 <apMain+0x8>
    {
      pre_time1 = millis();
 8000552:	f000 f807 	bl	8000564 <millis>
 8000556:	4604      	mov	r4, r0
      ledToggle(_DEF_LED1);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f931 	bl	80007c0 <ledToggle>
 800055e:	e7f3      	b.n	8000548 <apMain+0x8>

08000560 <delay>:
  return true;
}

void delay(uint32_t time_ms)
{
  HAL_Delay(time_ms);
 8000560:	f000 bb04 	b.w	8000b6c <HAL_Delay>

08000564 <millis>:
}

uint32_t millis(void)
{
  return HAL_GetTick();
 8000564:	f000 bafc 	b.w	8000b60 <HAL_GetTick>

08000568 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2238      	movs	r2, #56	; 0x38
 800056e:	2100      	movs	r1, #0
 8000570:	a806      	add	r0, sp, #24
 8000572:	f004 f918 	bl	80047a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	2214      	movs	r2, #20
 8000578:	2100      	movs	r1, #0
 800057a:	a801      	add	r0, sp, #4
 800057c:	f004 f913 	bl	80047a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000584:	f001 fa80 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000588:	230a      	movs	r3, #10
 800058a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000596:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800059a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800059c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 800059e:	2312      	movs	r3, #18
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80005a6:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f001 fb28 	bl	8001c04 <HAL_RCC_OscConfig>

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	200f      	movs	r0, #15
 80005b6:	2303      	movs	r3, #3
 80005b8:	e9cd 0301 	strd	r0, r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80005c0:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c2:	4621      	mov	r1, r4
 80005c4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	e9cd c303 	strd	ip, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	f001 fd5c 	bl	8002088 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80005d0:	b014      	add	sp, #80	; 0x50
 80005d2:	bd10      	pop	{r4, pc}

080005d4 <bspInit>:
{
 80005d4:	b530      	push	{r4, r5, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4c1c      	ldr	r4, [pc, #112]	; (8000648 <bspInit+0x74>)
 80005d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6623      	str	r3, [r4, #96]	; 0x60
 80005e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
{
 80005e2:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	9b00      	ldr	r3, [sp, #0]
  HAL_Init();
 80005ec:	f000 fa9c 	bl	8000b28 <HAL_Init>
  SystemClock_Config();
 80005f0:	f7ff ffba 	bl	8000568 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80005fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800060e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	9302      	str	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000616:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800061a:	9407      	str	r4, [sp, #28]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800061c:	2311      	movs	r3, #17
 800061e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000622:	a903      	add	r1, sp, #12
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8000628:	e9cd 5303 	strd	r5, r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800062c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000630:	f000 fb86 	bl	8000d40 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000634:	4622      	mov	r2, r4
 8000636:	4629      	mov	r1, r5
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fc4c 	bl	8000ed8 <HAL_GPIO_WritePin>
}
 8000640:	2001      	movs	r0, #1
 8000642:	b009      	add	sp, #36	; 0x24
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <Error_Handler>:
*/

void Error_Handler(void)
{

}
 800064c:	4770      	bx	lr
	...

08000650 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_MspInit+0x30>)
 8000652:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000654:	f042 0201 	orr.w	r2, r2, #1
 8000658:	661a      	str	r2, [r3, #96]	; 0x60
 800065a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800065c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	f002 0201 	and.w	r2, r2, #1
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000668:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800066c:	659a      	str	r2, [r3, #88]	; 0x58
 800066e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000678:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 800067a:	f001 ba5f 	b.w	8001b3c <HAL_PWREx_DisableUCPDDeadBattery>
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler>

08000686 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler>

08000688 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler>

0800068a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler>

0800068c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler>

0800068e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068e:	4770      	bx	lr

08000690 <DebugMon_Handler>:
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 ba58 	b.w	8000b48 <HAL_IncTick>

08000698 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000698:	4801      	ldr	r0, [pc, #4]	; (80006a0 <USB_LP_IRQHandler+0x8>)
 800069a:	f000 bc3f 	b.w	8000f1c <HAL_PCD_IRQHandler>
 800069e:	bf00      	nop
 80006a0:	20000208 	.word	0x20000208

080006a4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006a4:	4801      	ldr	r0, [pc, #4]	; (80006ac <USART1_IRQHandler+0x8>)
 80006a6:	f002 b86d 	b.w	8002784 <HAL_UART_IRQHandler>
 80006aa:	bf00      	nop
 80006ac:	20000054 	.word	0x20000054

080006b0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <SystemInit+0x10>)
 80006b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80006b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f7ff fff2 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f004 f861 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f004 f84d 	bl	8004794 <main>

080006fa <LoopForever>:

LoopForever:
  b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000708:	0800487c 	.word	0x0800487c
  ldr r2, =_sbss
 800070c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000710:	200004e4 	.word	0x200004e4

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>

08000716 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in    = 0;
 8000716:	2300      	movs	r3, #0
  p_node->out   = 0;
 8000718:	e9c0 3300 	strd	r3, r3, [r0]
  p_node->len   = length;
  p_node->size  = 1;
 800071c:	2301      	movs	r3, #1
  p_node->p_buf = p_buf;
 800071e:	e9c0 3103 	strd	r3, r1, [r0, #12]
  p_node->len   = length;
 8000722:	6082      	str	r2, [r0, #8]

  return ret;
}
 8000724:	4618      	mov	r0, r3
 8000726:	4770      	bx	lr

08000728 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool ret = true;
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800072a:	2600      	movs	r6, #0
 800072c:	4296      	cmp	r6, r2
 800072e:	d101      	bne.n	8000734 <qbufferWrite+0xc>
  bool ret = true;
 8000730:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    next_in = (p_node->in + 1) % p_node->len;
 8000734:	6805      	ldr	r5, [r0, #0]
 8000736:	6884      	ldr	r4, [r0, #8]
 8000738:	1c6b      	adds	r3, r5, #1
 800073a:	fbb3 f7f4 	udiv	r7, r3, r4
 800073e:	fb04 3317 	mls	r3, r4, r7, r3
    if (next_in != p_node->out)
 8000742:	6844      	ldr	r4, [r0, #4]
 8000744:	429c      	cmp	r4, r3
 8000746:	d012      	beq.n	800076e <qbufferWrite+0x46>
      if (p_node->p_buf != NULL && p_data != NULL)
 8000748:	6904      	ldr	r4, [r0, #16]
 800074a:	b144      	cbz	r4, 800075e <qbufferWrite+0x36>
 800074c:	b139      	cbz	r1, 800075e <qbufferWrite+0x36>
        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800074e:	68c7      	ldr	r7, [r0, #12]
 8000750:	fb07 4405 	mla	r4, r7, r5, r4
        for (int i=0; i<p_node->size; i++)
 8000754:	2500      	movs	r5, #0
 8000756:	68c7      	ldr	r7, [r0, #12]
 8000758:	42af      	cmp	r7, r5
 800075a:	d803      	bhi.n	8000764 <qbufferWrite+0x3c>
        p_data += p_node->size;
 800075c:	4439      	add	r1, r7
      p_node->in = next_in;
 800075e:	6003      	str	r3, [r0, #0]
  for (int i=0; i<length; i++)
 8000760:	3601      	adds	r6, #1
 8000762:	e7e3      	b.n	800072c <qbufferWrite+0x4>
          p_buf[i] = p_data[i];
 8000764:	5d4f      	ldrb	r7, [r1, r5]
 8000766:	f804 7b01 	strb.w	r7, [r4], #1
        for (int i=0; i<p_node->size; i++)
 800076a:	3501      	adds	r5, #1
 800076c:	e7f3      	b.n	8000756 <qbufferWrite+0x2e>
      ret = false;
 800076e:	2000      	movs	r0, #0
 8000770:	e7df      	b.n	8000732 <qbufferWrite+0xa>

08000772 <flashInit>:
bool flashInit(void)
{
  bool ret = true;

  return true;
}
 8000772:	2001      	movs	r0, #1
 8000774:	4770      	bx	lr
	...

08000778 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 8000778:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800077a:	2400      	movs	r4, #0
{
 800077c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800077e:	e9cd 4403 	strd	r4, r4, [sp, #12]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <ledInit+0x44>)
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000784:	9405      	str	r4, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	64da      	str	r2, [r3, #76]	; 0x4c
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;

  for (int i=0; i<LED_MAX_CH; i++)
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000796:	2620      	movs	r6, #32
 8000798:	2501      	movs	r5, #1
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 800079a:	a901      	add	r1, sp, #4
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 80007a2:	e9cd 6501 	strd	r6, r5, [sp, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 80007a6:	f000 facb 	bl	8000d40 <HAL_GPIO_Init>

void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80007aa:	4622      	mov	r2, r4
 80007ac:	4631      	mov	r1, r6
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f000 fb91 	bl	8000ed8 <HAL_GPIO_WritePin>
}
 80007b6:	4628      	mov	r0, r5
 80007b8:	b006      	add	sp, #24
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	40021000 	.word	0x40021000

080007c0 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 80007c0:	b920      	cbnz	r0, 80007cc <ledToggle+0xc>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80007c2:	2120      	movs	r1, #32
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 bb8b 	b.w	8000ee2 <HAL_GPIO_TogglePin>
}
 80007cc:	4770      	bx	lr
	...

080007d0 <resetInit>:
  }
}


bool resetInit(void)
{
 80007d0:	b508      	push	{r3, lr}
  bool is_debug = false;


  // 만약 디버거가 연결된 경우
  // 디버거일떄도 RCC->CSR 리셋 카운트가 증가하기떄문에 확인 FLAG
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <resetInit+0x4c>)
 80007d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <resetInit+0x50>)
 80007da:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80007de:	0149      	lsls	r1, r1, #5
 80007e0:	d515      	bpl.n	800080e <resetInit+0x3e>
 80007e2:	07d2      	lsls	r2, r2, #31
 80007e4:	d413      	bmi.n	800080e <resetInit+0x3e>
  if(RCC->CSR & (1<<26))
 80007e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007ea:	015b      	lsls	r3, r3, #5
 80007ec:	d50f      	bpl.n	800080e <resetInit+0x3e>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 f866 	bl	80008c0 <rtcBackupRegRead>
 80007f4:	1c41      	adds	r1, r0, #1
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 f868 	bl	80008cc <rtcBackupRegWrite>
    delay(500); // 500 m delay
 80007fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000800:	f7ff feae 	bl	8000560 <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 f85b 	bl	80008c0 <rtcBackupRegRead>
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <resetInit+0x54>)
 800080c:	6018      	str	r0, [r3, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 800080e:	2100      	movs	r1, #0
 8000810:	2001      	movs	r0, #1
 8000812:	f000 f85b 	bl	80008cc <rtcBackupRegWrite>
      (*jump_func)();
    }
  }
  */
  return ret;
}
 8000816:	2001      	movs	r0, #1
 8000818:	bd08      	pop	{r3, pc}
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	40021000 	.word	0x40021000
 8000824:	20000028 	.word	0x20000028

08000828 <resetGetCount>:

uint32_t resetGetCount(void)
{
  return reset_count;
}
 8000828:	4b01      	ldr	r3, [pc, #4]	; (8000830 <resetGetCount+0x8>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028

08000834 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8000834:	b507      	push	{r0, r1, r2, lr}

  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <resetToSystemBoot+0x50>)
 8000838:	9301      	str	r3, [sp, #4]


  HAL_RCC_DeInit();
 800083a:	f001 f987 	bl	8001b4c <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 800083e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000842:	2300      	movs	r3, #0
 8000844:	6113      	str	r3, [r2, #16]
  SysTick->VAL  = 0;

  // 인터럽트
  for (int i=0;i<8;i++)
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8000846:	f04f 31ff 	mov.w	r1, #4294967295
  SysTick->LOAD = 0;
 800084a:	6153      	str	r3, [r2, #20]
  SysTick->VAL  = 0;
 800084c:	6193      	str	r3, [r2, #24]
    NVIC->ICER[i]=0xFFFFFFFF;
 800084e:	009a      	lsls	r2, r3, #2
 8000850:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8000854:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8000858:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->ICPR[i]=0xFFFFFFFF;
 800085c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000864:	f3bf 8f6f 	isb	sy
  for (int i=0;i<8;i++)
 8000868:	3301      	adds	r3, #1
 800086a:	2b08      	cmp	r3, #8
 800086c:	d1ef      	bne.n	800084e <resetToSystemBoot+0x1a>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 800086e:	9b01      	ldr	r3, [sp, #4]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8000870:	9a01      	ldr	r2, [sp, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	f382 8808 	msr	MSP, r2
  // Jump
  SysMemBootJump();
 8000878:	685b      	ldr	r3, [r3, #4]
}
 800087a:	b003      	add	sp, #12
 800087c:	f85d eb04 	ldr.w	lr, [sp], #4
  SysMemBootJump();
 8000880:	4718      	bx	r3
 8000882:	bf00      	nop
 8000884:	1fff0000 	.word	0x1fff0000

08000888 <rtcInit>:
bool rtcInit(void)
{
  bool ret = true;


  hrtc.Instance = RTC;
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <rtcInit+0x30>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <rtcInit+0x34>)
{
 800088c:	b508      	push	{r3, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800088e:	2300      	movs	r3, #0
 8000890:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8000894:	217f      	movs	r1, #127	; 0x7f
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008a4:	e9c0 2307 	strd	r2, r3, [r0, #28]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008a8:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008aa:	f001 fed9 	bl	8002660 <HAL_RTC_Init>
  {
    return false;
  }

  return ret;
}
 80008ae:	fab0 f080 	clz	r0, r0
 80008b2:	0940      	lsrs	r0, r0, #5
 80008b4:	bd08      	pop	{r3, pc}
 80008b6:	bf00      	nop
 80008b8:	2000002c 	.word	0x2000002c
 80008bc:	40002800 	.word	0x40002800

080008c0 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80008c0:	4601      	mov	r1, r0
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80008c2:	4801      	ldr	r0, [pc, #4]	; (80008c8 <rtcBackupRegRead+0x8>)
 80008c4:	f001 bf1f 	b.w	8002706 <HAL_RTCEx_BKUPRead>
 80008c8:	2000002c 	.word	0x2000002c

080008cc <rtcBackupRegWrite>:
}

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80008cc:	460a      	mov	r2, r1
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80008ce:	4601      	mov	r1, r0
 80008d0:	4801      	ldr	r0, [pc, #4]	; (80008d8 <rtcBackupRegWrite+0xc>)
 80008d2:	f001 bf11 	b.w	80026f8 <HAL_RTCEx_BKUPWrite>
 80008d6:	bf00      	nop
 80008d8:	2000002c 	.word	0x2000002c

080008dc <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008dc:	b510      	push	{r4, lr}
 80008de:	4604      	mov	r4, r0
 80008e0:	b096      	sub	sp, #88	; 0x58

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e2:	2254      	movs	r2, #84	; 0x54
 80008e4:	2100      	movs	r1, #0
 80008e6:	a801      	add	r0, sp, #4
 80008e8:	f003 ff5d 	bl	80047a6 <memset>
  if(rtcHandle->Instance==RTC)
 80008ec:	6822      	ldr	r2, [r4, #0]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_RTC_MspInit+0x54>)
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d11b      	bne.n	800092c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008f8:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fa:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f001 fcd9 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	b108      	cbz	r0, 800090c <HAL_RTC_MspInit+0x30>
    {
      Error_Handler();
 8000908:	f7ff fea0 	bl	800064c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_RTC_MspInit+0x58>)
 800090e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800091a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800091c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000920:	659a      	str	r2, [r3, #88]	; 0x58
 8000922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800092c:	b016      	add	sp, #88	; 0x58
 800092e:	bd10      	pop	{r4, pc}
 8000930:	40002800 	.word	0x40002800
 8000934:	40021000 	.word	0x40021000

08000938 <uartInit>:
  {
    is_open[i] = false;
  }

  return true;
}
 8000938:	2001      	movs	r0, #1
 800093a:	4770      	bx	lr

0800093c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800093c:	b538      	push	{r3, r4, r5, lr}
  bool ret =false;

  switch(ch)
 800093e:	4604      	mov	r4, r0
 8000940:	2800      	cmp	r0, #0
 8000942:	d131      	bne.n	80009a8 <uartOpen+0x6c>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8000944:	4d1a      	ldr	r5, [pc, #104]	; (80009b0 <uartOpen+0x74>)
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <uartOpen+0x78>)
      huart1.Init.BaudRate = baud;
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000948:	6268      	str	r0, [r5, #36]	; 0x24
      huart1.Init.BaudRate = baud;
 800094a:	e9c5 3100 	strd	r3, r1, [r5]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart1.Init.Mode = UART_MODE_TX_RX;
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	e9c5 0007 	strd	r0, r0, [r5, #28]
      huart1.Init.Parity = UART_PARITY_NONE;
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000952:	e9c5 0003 	strd	r0, r0, [r5, #12]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	61a8      	str	r0, [r5, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	230c      	movs	r3, #12
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	60a8      	str	r0, [r5, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	62a8      	str	r0, [r5, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 800095e:	4916      	ldr	r1, [pc, #88]	; (80009b8 <uartOpen+0x7c>)
 8000960:	4816      	ldr	r0, [pc, #88]	; (80009bc <uartOpen+0x80>)
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000962:	616b      	str	r3, [r5, #20]
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8000964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000968:	f7ff fed5 	bl	8000716 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 800096c:	4628      	mov	r0, r5
 800096e:	f002 fd45 	bl	80033fc <HAL_UART_Init>
 8000972:	b938      	cbnz	r0, 8000984 <uartOpen+0x48>
      else
      {
        ret = true;
        is_open[ch] = true;
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8000974:	4912      	ldr	r1, [pc, #72]	; (80009c0 <uartOpen+0x84>)
 8000976:	2201      	movs	r2, #1
 8000978:	4628      	mov	r0, r5
 800097a:	f002 fdf7 	bl	800356c <HAL_UART_Receive_IT>
 800097e:	fab0 f480 	clz	r4, r0
 8000982:	0964      	lsrs	r4, r4, #5
        {
         ret = false;
         is_open[ch] = false;
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <uartOpen+0x74>)
 8000988:	f002 fe52 	bl	8003630 <HAL_UARTEx_SetTxFifoThreshold>
      {
        ret = false;
        is_open[ch] = false;
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	2100      	movs	r1, #0
        ret = false;
 800098e:	2800      	cmp	r0, #0
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <uartOpen+0x74>)
        ret = false;
 8000992:	bf18      	it	ne
 8000994:	2400      	movne	r4, #0
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	f002 fe6b 	bl	8003670 <HAL_UARTEx_SetRxFifoThreshold>
      {
        ret = false;
 800099a:	2800      	cmp	r0, #0
        is_open[ch] = false;
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <uartOpen+0x74>)
        ret = false;
 800099e:	bf18      	it	ne
 80009a0:	2400      	movne	r4, #0
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a2:	f002 fe2a 	bl	80035fa <HAL_UARTEx_DisableFifoMode>
 80009a6:	b100      	cbz	r0, 80009aa <uartOpen+0x6e>
      {
        ret = false;
 80009a8:	2400      	movs	r4, #0
      break;
  }


  return ret;
}
 80009aa:	4620      	mov	r0, r4
 80009ac:	bd38      	pop	{r3, r4, r5, pc}
 80009ae:	bf00      	nop
 80009b0:	20000054 	.word	0x20000054
 80009b4:	40013800 	.word	0x40013800
 80009b8:	200000fc 	.word	0x200000fc
 80009bc:	200000e8 	.word	0x200000e8
 80009c0:	200001fc 	.word	0x200001fc

080009c4 <HAL_UART_ErrorCallback>:
{
  if(huart->Instance == USART1)
  {

  }
}
 80009c4:	4770      	bx	lr
	...

080009c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c8:	b508      	push	{r3, lr}
  if(huart->Instance == USART1)
 80009ca:	6802      	ldr	r2, [r0, #0]
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <HAL_UART_RxCpltCallback+0x24>)
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d10b      	bne.n	80009ea <HAL_UART_RxCpltCallback+0x22>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 80009d2:	4907      	ldr	r1, [pc, #28]	; (80009f0 <HAL_UART_RxCpltCallback+0x28>)
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <HAL_UART_RxCpltCallback+0x2c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	f7ff fea6 	bl	8000728 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
  }
}
 80009dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 80009e0:	4903      	ldr	r1, [pc, #12]	; (80009f0 <HAL_UART_RxCpltCallback+0x28>)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_RxCpltCallback+0x30>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	f002 bdc1 	b.w	800356c <HAL_UART_Receive_IT>
}
 80009ea:	bd08      	pop	{r3, pc}
 80009ec:	40013800 	.word	0x40013800
 80009f0:	200001fc 	.word	0x200001fc
 80009f4:	200000e8 	.word	0x200000e8
 80009f8:	20000054 	.word	0x20000054

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	2214      	movs	r2, #20
 8000a04:	2100      	movs	r1, #0
 8000a06:	a802      	add	r0, sp, #8
 8000a08:	f003 fecd 	bl	80047a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	2254      	movs	r2, #84	; 0x54
 8000a0e:	2100      	movs	r1, #0
 8000a10:	a807      	add	r0, sp, #28
 8000a12:	f003 fec8 	bl	80047a6 <memset>
  if(uartHandle->Instance==USART1)
 8000a16:	6822      	ldr	r2, [r4, #0]
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d12f      	bne.n	8000a7e <HAL_UART_MspInit+0x82>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a1e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a22:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f001 fc48 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	b108      	cbz	r0, 8000a2e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000a2a:	f7ff fe0f 	bl	800064c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	4816      	ldr	r0, [pc, #88]	; (8000a8c <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a38:	661a      	str	r2, [r3, #96]	; 0x60
 8000a3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a3c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a40:	9200      	str	r2, [sp, #0]
 8000a42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a46:	f042 0204 	orr.w	r2, r2, #4
 8000a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a60:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a64:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f000 f969 	bl	8000d40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a6e:	2025      	movs	r0, #37	; 0x25
 8000a70:	4622      	mov	r2, r4
 8000a72:	4621      	mov	r1, r4
 8000a74:	f000 f8a0 	bl	8000bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a78:	2025      	movs	r0, #37	; 0x25
 8000a7a:	f000 f8cf 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a7e:	b01c      	add	sp, #112	; 0x70
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000800 	.word	0x48000800

08000a90 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 8000a90:	b538      	push	{r3, r4, r5, lr}
  bool ret = true;

  ret &= bspInit();
 8000a92:	f7ff fd9f 	bl	80005d4 <bspInit>
 8000a96:	4604      	mov	r4, r0
  ret &= rtcInit();
 8000a98:	f7ff fef6 	bl	8000888 <rtcInit>
 8000a9c:	4004      	ands	r4, r0

  ret &= uartInit();
 8000a9e:	f7ff ff4b 	bl	8000938 <uartInit>
 8000aa2:	b2e4      	uxtb	r4, r4
  ret &= uartOpen(_DEF_UART1, 115200);
 8000aa4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000aa8:	4004      	ands	r4, r0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff ff46 	bl	800093c <uartOpen>
 8000ab0:	4605      	mov	r5, r0
#ifdef _USE_HW_RESET
  ret &= resetInit();  // 500 ms delay
 8000ab2:	f7ff fe8d 	bl	80007d0 <resetInit>
  ret &= uartOpen(_DEF_UART1, 115200);
 8000ab6:	402c      	ands	r4, r5
  ret &= resetInit();  // 500 ms delay
 8000ab8:	4004      	ands	r4, r0
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8000aba:	f7ff feb5 	bl	8000828 <resetGetCount>
 8000abe:	2802      	cmp	r0, #2
  ret &= resetInit();  // 500 ms delay
 8000ac0:	f004 0401 	and.w	r4, r4, #1
  if (resetGetCount() == 2)
 8000ac4:	d101      	bne.n	8000aca <hwInit+0x3a>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 8000ac6:	f7ff feb5 	bl	8000834 <resetToSystemBoot>
  }
#endif
  ret &= ledInit();
 8000aca:	f7ff fe55 	bl	8000778 <ledInit>
 8000ace:	4605      	mov	r5, r0
  /* USB DFU MODE */
  //ret &= usbInit();
  //ret &= usbBegin(USB_DFU_MODE);
  ret &= flashInit();
 8000ad0:	f7ff fe4f 	bl	8000772 <flashInit>

  return ret;
 8000ad4:	4028      	ands	r0, r5
}
 8000ad6:	4020      	ands	r0, r4
 8000ad8:	bd38      	pop	{r3, r4, r5, pc}
	...

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_InitTick+0x40>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
{
 8000ae2:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000ae4:	b90a      	cbnz	r2, 8000aea <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000ae8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <HAL_InitTick+0x44>)
 8000af4:	6810      	ldr	r0, [r2, #0]
 8000af6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000afa:	f000 f89d 	bl	8000c38 <HAL_SYSTICK_Config>
 8000afe:	4604      	mov	r4, r0
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1f0      	bne.n	8000ae6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b04:	2d0f      	cmp	r5, #15
 8000b06:	d8ee      	bhi.n	8000ae6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	4602      	mov	r2, r0
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f852 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_InitTick+0x48>)
 8000b16:	4620      	mov	r0, r4
 8000b18:	601d      	str	r5, [r3, #0]
  return status;
 8000b1a:	e7e5      	b.n	8000ae8 <HAL_InitTick+0xc>
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_Init>:
{
 8000b28:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f000 f832 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b30:	200f      	movs	r0, #15
 8000b32:	f7ff ffd3 	bl	8000adc <HAL_InitTick>
 8000b36:	4604      	mov	r4, r0
 8000b38:	b918      	cbnz	r0, 8000b42 <HAL_Init+0x1a>
    HAL_MspInit();
 8000b3a:	f7ff fd89 	bl	8000650 <HAL_MspInit>
}
 8000b3e:	4620      	mov	r0, r4
 8000b40:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b42:	2401      	movs	r4, #1
 8000b44:	e7fb      	b.n	8000b3e <HAL_Init+0x16>
	...

08000b48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <HAL_IncTick+0x10>)
 8000b4a:	4904      	ldr	r1, [pc, #16]	; (8000b5c <HAL_IncTick+0x14>)
 8000b4c:	6813      	ldr	r3, [r2, #0]
 8000b4e:	6809      	ldr	r1, [r1, #0]
 8000b50:	440b      	add	r3, r1
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000200 	.word	0x20000200
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <HAL_GetTick+0x8>)
 8000b62:	6818      	ldr	r0, [r3, #0]
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000200 	.word	0x20000200

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff6 	bl	8000b60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b74:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	bf1c      	itt	ne
 8000b78:	4b05      	ldrne	r3, [pc, #20]	; (8000b90 <HAL_Delay+0x24>)
 8000b7a:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	bf18      	it	ne
 8000b80:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b82:	f7ff ffed 	bl	8000b60 <HAL_GetTick>
 8000b86:	1b43      	subs	r3, r0, r5
 8000b88:	42a3      	cmp	r3, r4
 8000b8a:	d3fa      	bcc.n	8000b82 <HAL_Delay+0x16>
  {
  }
}
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b96:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bb0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bba:	b530      	push	{r4, r5, lr}
 8000bbc:	68dc      	ldr	r4, [r3, #12]
 8000bbe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	bf28      	it	cs
 8000bcc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	bf8c      	ite	hi
 8000bd6:	3c03      	subhi	r4, #3
 8000bd8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bda:	fa05 f303 	lsl.w	r3, r5, r3
 8000bde:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be2:	40a5      	lsls	r5, r4
 8000be4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000bea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	bfac      	ite	ge
 8000bf2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	4a08      	ldrlt	r2, [pc, #32]	; (8000c18 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	bfb8      	it	lt
 8000bfe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	bfaa      	itet	ge
 8000c06:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c10:	bd30      	pop	{r4, r5, pc}
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	e000ed14 	.word	0xe000ed14

08000c1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	db07      	blt.n	8000c30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_NVIC_EnableIRQ+0x18>)
 8000c22:	0941      	lsrs	r1, r0, #5
 8000c24:	2301      	movs	r3, #1
 8000c26:	f000 001f 	and.w	r0, r0, #31
 8000c2a:	4083      	lsls	r3, r0
 8000c2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	3801      	subs	r0, #1
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3e:	d20b      	bcs.n	8000c58 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	21f0      	movs	r1, #240	; 0xf0
 8000c4a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c50:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c52:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c54:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c56:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c58:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c60:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000c64:	2a02      	cmp	r2, #2
{
 8000c66:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c68:	d009      	beq.n	8000c7e <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8000c7c:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c7e:	6802      	ldr	r2, [r0, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c80:	6c80      	ldr	r0, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c82:	6811      	ldr	r1, [r2, #0]
 8000c84:	f021 010e 	bic.w	r1, r1, #14
 8000c88:	6011      	str	r1, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c8a:	6801      	ldr	r1, [r0, #0]
 8000c8c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000c90:	6001      	str	r1, [r0, #0]
     __HAL_DMA_DISABLE(hdma);
 8000c92:	6811      	ldr	r1, [r2, #0]
 8000c94:	f021 0101 	bic.w	r1, r1, #1
 8000c98:	6011      	str	r1, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c9a:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 8000c9e:	f002 011f 	and.w	r1, r2, #31
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	408a      	lsls	r2, r1
 8000ca6:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ca8:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	; 0x4c
     if (hdma->DMAmuxRequestGen != 0U)
 8000cac:	6d58      	ldr	r0, [r3, #84]	; 0x54
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cae:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d0dd      	beq.n	8000c70 <HAL_DMA_Abort+0x10>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cb4:	6802      	ldr	r2, [r0, #0]
 8000cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cba:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cbc:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8000cc0:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cc2:	6051      	str	r1, [r2, #4]
 8000cc4:	e7d4      	b.n	8000c70 <HAL_DMA_Abort+0x10>

08000cc6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cc6:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cc8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d009      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd4:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000cdc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e02b      	b.n	8000d3c <HAL_DMA_Abort_IT+0x76>
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f022 020e 	bic.w	r2, r2, #14
 8000cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	f022 0201 	bic.w	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cf6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d00:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	2301      	movs	r3, #1
 8000d0a:	4093      	lsls	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d0e:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8000d12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d14:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000d16:	b133      	cbz	r3, 8000d26 <HAL_DMA_Abort_IT+0x60>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d20:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8000d24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000d2e:	2400      	movs	r4, #0
 8000d30:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0d3      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x1a>
    {
      hdma->XferAbortCallback(hdma);
 8000d38:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d3a:	4620      	mov	r0, r4
    }
  }
  return status;
}
 8000d3c:	bd10      	pop	{r4, pc}
	...

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d44:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8000ed4 <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d48:	4c60      	ldr	r4, [pc, #384]	; (8000ecc <HAL_GPIO_Init+0x18c>)
  uint32_t position = 0x00U;
 8000d4a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d4c:	680a      	ldr	r2, [r1, #0]
 8000d4e:	fa32 f503 	lsrs.w	r5, r2, r3
 8000d52:	d102      	bne.n	8000d5a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8000d54:	b003      	add	sp, #12
 8000d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d5a:	2501      	movs	r5, #1
 8000d5c:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8000d60:	ea1e 0202 	ands.w	r2, lr, r2
 8000d64:	f000 80a5 	beq.w	8000eb2 <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	684e      	ldr	r6, [r1, #4]
 8000d6a:	f006 0503 	and.w	r5, r6, #3
 8000d6e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d72:	f04f 0c03 	mov.w	ip, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d76:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d78:	fa0c fc08 	lsl.w	ip, ip, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d7c:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7e:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d82:	d834      	bhi.n	8000dee <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000d84:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d86:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	68cf      	ldr	r7, [r1, #12]
 8000d8c:	fa07 f708 	lsl.w	r7, r7, r8
 8000d90:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000d94:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d96:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d98:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8000da0:	409f      	lsls	r7, r3
 8000da2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000da6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000da8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000daa:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dae:	688f      	ldr	r7, [r1, #8]
 8000db0:	fa07 f708 	lsl.w	r7, r7, r8
 8000db4:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8000dba:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbc:	d119      	bne.n	8000df2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000dc2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dc6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000dca:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000dd2:	f04f 0e0f 	mov.w	lr, #15
 8000dd6:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000dda:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dde:	690f      	ldr	r7, [r1, #16]
 8000de0:	fa07 f70b 	lsl.w	r7, r7, fp
 8000de4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000de8:	f8ca 7020 	str.w	r7, [sl, #32]
 8000dec:	e001      	b.n	8000df2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dee:	2d03      	cmp	r5, #3
 8000df0:	d1da      	bne.n	8000da8 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8000df2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfe:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000e02:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e04:	d055      	beq.n	8000eb2 <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000e0a:	f045 0501 	orr.w	r5, r5, #1
 8000e0e:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8000e12:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000e16:	f023 0703 	bic.w	r7, r3, #3
 8000e1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e1e:	f005 0501 	and.w	r5, r5, #1
 8000e22:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e26:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e28:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e2e:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e30:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e34:	f04f 0c0f 	mov.w	ip, #15
 8000e38:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e3c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e40:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e44:	d037      	beq.n	8000eb6 <HAL_GPIO_Init+0x176>
 8000e46:	4d22      	ldr	r5, [pc, #136]	; (8000ed0 <HAL_GPIO_Init+0x190>)
 8000e48:	42a8      	cmp	r0, r5
 8000e4a:	d036      	beq.n	8000eba <HAL_GPIO_Init+0x17a>
 8000e4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e50:	42a8      	cmp	r0, r5
 8000e52:	d034      	beq.n	8000ebe <HAL_GPIO_Init+0x17e>
 8000e54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e58:	42a8      	cmp	r0, r5
 8000e5a:	d032      	beq.n	8000ec2 <HAL_GPIO_Init+0x182>
 8000e5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e60:	42a8      	cmp	r0, r5
 8000e62:	d030      	beq.n	8000ec6 <HAL_GPIO_Init+0x186>
 8000e64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e68:	42a8      	cmp	r0, r5
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2505      	moveq	r5, #5
 8000e6e:	2506      	movne	r5, #6
 8000e70:	fa05 f50e 	lsl.w	r5, r5, lr
 8000e74:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e78:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8000e7a:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8000e7c:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000e82:	bf0c      	ite	eq
 8000e84:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000e86:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8000e88:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000e8a:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8000e90:	bf0c      	ite	eq
 8000e92:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000e94:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8000e96:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8000e98:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000ea2:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8000ea4:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8000ea6:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8000eaa:	bf54      	ite	pl
 8000eac:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000eae:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8000eb0:	6025      	str	r5, [r4, #0]
    position++;
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	e74a      	b.n	8000d4c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eb6:	2500      	movs	r5, #0
 8000eb8:	e7da      	b.n	8000e70 <HAL_GPIO_Init+0x130>
 8000eba:	2501      	movs	r5, #1
 8000ebc:	e7d8      	b.n	8000e70 <HAL_GPIO_Init+0x130>
 8000ebe:	2502      	movs	r5, #2
 8000ec0:	e7d6      	b.n	8000e70 <HAL_GPIO_Init+0x130>
 8000ec2:	2503      	movs	r5, #3
 8000ec4:	e7d4      	b.n	8000e70 <HAL_GPIO_Init+0x130>
 8000ec6:	2504      	movs	r5, #4
 8000ec8:	e7d2      	b.n	8000e70 <HAL_GPIO_Init+0x130>
 8000eca:	bf00      	nop
 8000ecc:	40010400 	.word	0x40010400
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	b10a      	cbz	r2, 8000ede <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eda:	6181      	str	r1, [r0, #24]
 8000edc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee4:	ea01 0203 	and.w	r2, r1, r3
 8000ee8:	ea21 0103 	bic.w	r1, r1, r3
 8000eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ef0:	6181      	str	r1, [r0, #24]
}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ef4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000ef6:	f890 2290 	ldrb.w	r2, [r0, #656]	; 0x290
 8000efa:	2a01      	cmp	r2, #1
{
 8000efc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000efe:	d00a      	beq.n	8000f16 <HAL_PCD_SetAddress+0x22>
 8000f00:	2201      	movs	r2, #1
 8000f02:	f880 2290 	strb.w	r2, [r0, #656]	; 0x290
  hpcd->USB_Address = address;
 8000f06:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f08:	6800      	ldr	r0, [r0, #0]
 8000f0a:	f002 fd9e 	bl	8003a4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290

  return HAL_OK;
}
 8000f14:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000f16:	2002      	movs	r0, #2
 8000f18:	e7fc      	b.n	8000f14 <HAL_PCD_SetAddress+0x20>
	...

08000f1c <HAL_PCD_IRQHandler>:
{
 8000f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f20:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f22:	6800      	ldr	r0, [r0, #0]
 8000f24:	f002 fd97 	bl	8003a56 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f28:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8000f2c:	f000 8424 	beq.w	8001778 <HAL_PCD_IRQHandler+0x85c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f30:	f8df 99b0 	ldr.w	r9, [pc, #2480]	; 80018e4 <HAL_PCD_IRQHandler+0x9c8>
 8000f34:	f8df 89b0 	ldr.w	r8, [pc, #2480]	; 80018e8 <HAL_PCD_IRQHandler+0x9cc>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f3e:	041a      	lsls	r2, r3, #16
 8000f40:	d402      	bmi.n	8000f48 <HAL_PCD_IRQHandler+0x2c>
}
 8000f42:	b003      	add	sp, #12
 8000f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000f48:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8000f4c:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8000f4e:	f015 050f 	ands.w	r5, r5, #15
 8000f52:	f040 80bf 	bne.w	80010d4 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f56:	f011 0110 	ands.w	r1, r1, #16
 8000f5a:	d126      	bne.n	8000faa <HAL_PCD_IRQHandler+0x8e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f5c:	8803      	ldrh	r3, [r0, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	ea03 0309 	and.w	r3, r3, r9
 8000f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f68:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f6a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f6e:	7c22      	ldrb	r2, [r4, #16]
 8000f70:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000f74:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f78:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f7a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000f7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000f84:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f86:	62e3      	str	r3, [r4, #44]	; 0x2c
        ep->xfer_buff += ep->xfer_count;
 8000f88:	6262      	str	r2, [r4, #36]	; 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f8a:	f003 fb50 	bl	800462e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f8e:	7b23      	ldrb	r3, [r4, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0d1      	beq.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
 8000f94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f96:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	d1cd      	bne.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f9c:	7b23      	ldrb	r3, [r4, #12]
 8000f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000fa6:	7322      	strb	r2, [r4, #12]
 8000fa8:	e7c6      	b.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000faa:	8805      	ldrh	r5, [r0, #0]
 8000fac:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fae:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8000fb2:	d020      	beq.n	8000ff6 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fb4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fb8:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
 8000fbc:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000fc0:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fc4:	f504 7126 	add.w	r1, r4, #664	; 0x298
 8000fc8:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000fcc:	f8b4 2156 	ldrh.w	r2, [r4, #342]	; 0x156
 8000fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fd4:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fd8:	f002 ff90 	bl	8003efc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	8813      	ldrh	r3, [r2, #0]
 8000fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe4:	051b      	lsls	r3, r3, #20
 8000fe6:	0d1b      	lsrs	r3, r3, #20
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f003 fb0e 	bl	8004610 <HAL_PCD_SetupStageCallback>
 8000ff4:	e7a0      	b.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ff6:	0419      	lsls	r1, r3, #16
 8000ff8:	d59e      	bpl.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ffa:	8803      	ldrh	r3, [r0, #0]
 8000ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001000:	051b      	lsls	r3, r3, #20
 8001002:	0d1b      	lsrs	r3, r3, #20
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800100a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800100e:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
 8001012:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001016:	fa11 f383 	uxtah	r3, r1, r3
 800101a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800101e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001022:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001026:	b18b      	cbz	r3, 800104c <HAL_PCD_IRQHandler+0x130>
 8001028:	f8d4 1164 	ldr.w	r1, [r4, #356]	; 0x164
 800102c:	b171      	cbz	r1, 800104c <HAL_PCD_IRQHandler+0x130>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800102e:	f8b4 2156 	ldrh.w	r2, [r4, #342]	; 0x156
 8001032:	f002 ff63 	bl	8003efc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001036:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800103a:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800103e:	4413      	add	r3, r2
 8001040:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001044:	4629      	mov	r1, r5
 8001046:	4620      	mov	r0, r4
 8001048:	f003 fae8 	bl	800461c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800104c:	6821      	ldr	r1, [r4, #0]
 800104e:	880a      	ldrh	r2, [r1, #0]
 8001050:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001052:	0512      	lsls	r2, r2, #20
 8001054:	f53f af70 	bmi.w	8000f38 <HAL_PCD_IRQHandler+0x1c>
 8001058:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800105c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001060:	f43f af6a 	beq.w	8000f38 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001064:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001068:	f201 4006 	addw	r0, r1, #1030	; 0x406
 800106c:	b29b      	uxth	r3, r3
 800106e:	5ac2      	ldrh	r2, [r0, r3]
 8001070:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001074:	52c2      	strh	r2, [r0, r3]
 8001076:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 800107a:	2a3e      	cmp	r2, #62	; 0x3e
 800107c:	d90c      	bls.n	8001098 <HAL_PCD_IRQHandler+0x17c>
 800107e:	0955      	lsrs	r5, r2, #5
 8001080:	06d7      	lsls	r7, r2, #27
 8001082:	5ac2      	ldrh	r2, [r0, r3]
 8001084:	bf08      	it	eq
 8001086:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800108a:	b292      	uxth	r2, r2
 800108c:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001090:	ea42 0208 	orr.w	r2, r2, r8
 8001094:	b292      	uxth	r2, r2
 8001096:	e004      	b.n	80010a2 <HAL_PCD_IRQHandler+0x186>
 8001098:	b99a      	cbnz	r2, 80010c2 <HAL_PCD_IRQHandler+0x1a6>
 800109a:	5ac2      	ldrh	r2, [r0, r3]
 800109c:	b292      	uxth	r2, r2
 800109e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010a2:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80010a4:	880b      	ldrh	r3, [r1, #0]
 80010a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80010b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010be:	800b      	strh	r3, [r1, #0]
 80010c0:	e73a      	b.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010c2:	0855      	lsrs	r5, r2, #1
 80010c4:	07d6      	lsls	r6, r2, #31
 80010c6:	5ac2      	ldrh	r2, [r0, r3]
 80010c8:	bf48      	it	mi
 80010ca:	3501      	addmi	r5, #1
 80010cc:	b292      	uxth	r2, r2
 80010ce:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80010d2:	e7df      	b.n	8001094 <HAL_PCD_IRQHandler+0x178>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80010d4:	b22e      	sxth	r6, r5
 80010d6:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010da:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80010dc:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010de:	f140 80f0 	bpl.w	80012c2 <HAL_PCD_IRQHandler+0x3a6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010e2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80010e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ea:	051b      	lsls	r3, r3, #20
 80010ec:	0d1b      	lsrs	r3, r3, #20
 80010ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 80010f2:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010f4:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010f8:	fb01 4105 	mla	r1, r1, r5, r4
 80010fc:	f891 315c 	ldrb.w	r3, [r1, #348]	; 0x15c
 8001100:	b9bb      	cbnz	r3, 8001132 <HAL_PCD_IRQHandler+0x216>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001102:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001106:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 800110a:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800110e:	fa1c f383 	uxtah	r3, ip, r3
 8001112:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001116:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 800111a:	f1ba 0f00 	cmp.w	sl, #0
 800111e:	f000 80b4 	beq.w	800128a <HAL_PCD_IRQHandler+0x36e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001122:	f8b1 2156 	ldrh.w	r2, [r1, #342]	; 0x156
 8001126:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001128:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 800112c:	f002 fee6 	bl	8003efc <USB_ReadPMA>
 8001130:	e0ab      	b.n	800128a <HAL_PCD_IRQHandler+0x36e>
          if (ep->type == EP_TYPE_BULK)
 8001132:	f891 3153 	ldrb.w	r3, [r1, #339]	; 0x153
 8001136:	2b02      	cmp	r3, #2
 8001138:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
 800113c:	f040 8083 	bne.w	8001246 <HAL_PCD_IRQHandler+0x32a>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001140:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50

    if (ep->xfer_len >= count)
 8001144:	f8d1 2168 	ldr.w	r2, [r1, #360]	; 0x168
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001148:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800114c:	fa1a fc8c 	uxtah	ip, sl, ip
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001150:	f417 4b80 	ands.w	fp, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001154:	4484      	add	ip, r0
 8001156:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800115a:	d03a      	beq.n	80011d2 <HAL_PCD_IRQHandler+0x2b6>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800115c:	f8bc a402 	ldrh.w	sl, [ip, #1026]	; 0x402
 8001160:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001164:	4592      	cmp	sl, r2
 8001166:	d913      	bls.n	8001190 <HAL_PCD_IRQHandler+0x274>
 8001168:	2200      	movs	r2, #0
 800116a:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800116e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001176:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800117a:	0412      	lsls	r2, r2, #16
 800117c:	0c12      	lsrs	r2, r2, #16
 800117e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800118a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800118e:	e005      	b.n	800119c <HAL_PCD_IRQHandler+0x280>
      ep->xfer_len -= count;
 8001190:	eba2 020a 	sub.w	r2, r2, sl
 8001194:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    if (ep->xfer_len == 0U)
 8001198:	2a00      	cmp	r2, #0
 800119a:	d0e8      	beq.n	800116e <HAL_PCD_IRQHandler+0x252>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800119c:	f1be 0f00 	cmp.w	lr, #0
 80011a0:	d00d      	beq.n	80011be <HAL_PCD_IRQHandler+0x2a2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80011a2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80011aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011ae:	0412      	lsls	r2, r2, #16
 80011b0:	0c12      	lsrs	r2, r2, #16
 80011b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80011ba:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80011be:	f1ba 0f00 	cmp.w	sl, #0
 80011c2:	d062      	beq.n	800128a <HAL_PCD_IRQHandler+0x36e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011c4:	2128      	movs	r1, #40	; 0x28
 80011c6:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011ca:	f8b1 2158 	ldrh.w	r2, [r1, #344]	; 0x158
 80011ce:	4653      	mov	r3, sl
 80011d0:	e7aa      	b.n	8001128 <HAL_PCD_IRQHandler+0x20c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011d2:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 80011d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 80011da:	4592      	cmp	sl, r2
 80011dc:	d912      	bls.n	8001204 <HAL_PCD_IRQHandler+0x2e8>
 80011de:	f8c1 b168 	str.w	fp, [r1, #360]	; 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80011e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011ee:	0412      	lsls	r2, r2, #16
 80011f0:	0c12      	lsrs	r2, r2, #16
 80011f2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80011f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001202:	e005      	b.n	8001210 <HAL_PCD_IRQHandler+0x2f4>
      ep->xfer_len -= count;
 8001204:	eba2 020a 	sub.w	r2, r2, sl
 8001208:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    if (ep->xfer_len == 0U)
 800120c:	2a00      	cmp	r2, #0
 800120e:	d0e8      	beq.n	80011e2 <HAL_PCD_IRQHandler+0x2c6>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001210:	f1be 0f00 	cmp.w	lr, #0
 8001214:	d10d      	bne.n	8001232 <HAL_PCD_IRQHandler+0x316>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001216:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800121a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800121e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001222:	0412      	lsls	r2, r2, #16
 8001224:	0c12      	lsrs	r2, r2, #16
 8001226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800122e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001232:	f1ba 0f00 	cmp.w	sl, #0
 8001236:	d028      	beq.n	800128a <HAL_PCD_IRQHandler+0x36e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001238:	2128      	movs	r1, #40	; 0x28
 800123a:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800123e:	f8b1 215a 	ldrh.w	r2, [r1, #346]	; 0x15a
 8001242:	4653      	mov	r3, sl
 8001244:	e770      	b.n	8001128 <HAL_PCD_IRQHandler+0x20c>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001246:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800124a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800124e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001252:	0412      	lsls	r2, r2, #16
 8001254:	0c12      	lsrs	r2, r2, #16
 8001256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800125e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001262:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 8001266:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800126a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800126e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001272:	d05b      	beq.n	800132c <HAL_PCD_IRQHandler+0x410>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001274:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001278:	fa1c f383 	uxtah	r3, ip, r3
 800127c:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001280:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001284:	f1ba 0f00 	cmp.w	sl, #0
 8001288:	d19f      	bne.n	80011ca <HAL_PCD_IRQHandler+0x2ae>
        ep->xfer_count += count;
 800128a:	2128      	movs	r1, #40	; 0x28
 800128c:	fb01 4305 	mla	r3, r1, r5, r4
 8001290:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8001294:	4452      	add	r2, sl
 8001296:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        ep->xfer_buff += count;
 800129a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800129e:	4452      	add	r2, sl
 80012a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80012a4:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80012a8:	b11a      	cbz	r2, 80012b2 <HAL_PCD_IRQHandler+0x396>
 80012aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80012ae:	459a      	cmp	sl, r3
 80012b0:	d248      	bcs.n	8001344 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80012b2:	2328      	movs	r3, #40	; 0x28
 80012b4:	fb03 4305 	mla	r3, r3, r5, r4
 80012b8:	4620      	mov	r0, r4
 80012ba:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
 80012be:	f003 f9ad 	bl	800461c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80012c2:	063b      	lsls	r3, r7, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012c4:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80012c6:	f57f ae37 	bpl.w	8000f38 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012ca:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	ea03 0309 	and.w	r3, r3, r9
 80012d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80012dc:	2328      	movs	r3, #40	; 0x28
 80012de:	fb03 4c05 	mla	ip, r3, r5, r4
 80012e2:	f89c 2013 	ldrb.w	r2, [ip, #19]
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d15f      	bne.n	80013aa <HAL_PCD_IRQHandler+0x48e>
          ep->xfer_len = 0U;
 80012ea:	fb05 3303 	mla	r3, r5, r3, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	50e2      	str	r2, [r4, r3]
          if (ep->doublebuffer != 0U)
 80012f2:	f89c 301c 	ldrb.w	r3, [ip, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d039      	beq.n	800136e <HAL_PCD_IRQHandler+0x452>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80012fa:	f017 0740 	ands.w	r7, r7, #64	; 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012fe:	f89c 3011 	ldrb.w	r3, [ip, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001302:	d03c      	beq.n	800137e <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001304:	bb33      	cbnz	r3, 8001354 <HAL_PCD_IRQHandler+0x438>
 8001306:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800130a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800130e:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001312:	fa10 f383 	uxtah	r3, r0, r3
 8001316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	b292      	uxth	r2, r2
 8001326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800132a:	e01f      	b.n	800136c <HAL_PCD_IRQHandler+0x450>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800132c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001330:	fa1c f383 	uxtah	r3, ip, r3
 8001334:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001338:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 800133c:	f1ba 0f00 	cmp.w	sl, #0
 8001340:	d0a3      	beq.n	800128a <HAL_PCD_IRQHandler+0x36e>
 8001342:	e77c      	b.n	800123e <HAL_PCD_IRQHandler+0x322>
        ep = &hpcd->OUT_ep[epindex];
 8001344:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800134e:	f002 fb95 	bl	8003a7c <USB_EPStartXfer>
 8001352:	e7b6      	b.n	80012c2 <HAL_PCD_IRQHandler+0x3a6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10a      	bne.n	800136e <HAL_PCD_IRQHandler+0x452>
 8001358:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800135c:	f89c 1010 	ldrb.w	r1, [ip, #16]
 8001360:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8001364:	fa10 f383 	uxtah	r3, r0, r3
 8001368:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800136c:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800136e:	2328      	movs	r3, #40	; 0x28
 8001370:	fb03 4305 	mla	r3, r3, r5, r4
 8001374:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001376:	4620      	mov	r0, r4
 8001378:	f003 f959 	bl	800462e <HAL_PCD_DataInStageCallback>
 800137c:	e5dc      	b.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800137e:	b933      	cbnz	r3, 800138e <HAL_PCD_IRQHandler+0x472>
 8001380:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001384:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8001388:	f200 4006 	addw	r0, r0, #1030	; 0x406
 800138c:	e7c1      	b.n	8001312 <HAL_PCD_IRQHandler+0x3f6>
 800138e:	2b01      	cmp	r3, #1
 8001390:	d1ed      	bne.n	800136e <HAL_PCD_IRQHandler+0x452>
 8001392:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001396:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800139a:	f200 4006 	addw	r0, r0, #1030	; 0x406
 800139e:	fa10 f383 	uxtah	r3, r0, r3
 80013a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013a6:	801f      	strh	r7, [r3, #0]
 80013a8:	e7e1      	b.n	800136e <HAL_PCD_IRQHandler+0x452>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80013aa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013ae:	f89c 1010 	ldrb.w	r1, [ip, #16]
 80013b2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80013b6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80013ba:	f417 7b80 	ands.w	fp, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 80013be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013c0:	460a      	mov	r2, r1
 80013c2:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80013c6:	d11d      	bne.n	8001404 <HAL_PCD_IRQHandler+0x4e8>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80013cc:	fa10 f282 	uxtah	r2, r0, r2
 80013d0:	4452      	add	r2, sl
 80013d2:	f8b2 2402 	ldrh.w	r2, [r2, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 80013d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013da:	429a      	cmp	r2, r3
 80013dc:	d302      	bcc.n	80013e4 <HAL_PCD_IRQHandler+0x4c8>
 80013de:	f8c6 b028 	str.w	fp, [r6, #40]	; 0x28
 80013e2:	e7c8      	b.n	8001376 <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	62b3      	str	r3, [r6, #40]	; 0x28
              ep->xfer_buff += TxPctSize;
 80013e8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80013ec:	4413      	add	r3, r2
 80013ee:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
              ep->xfer_count += TxPctSize;
 80013f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        ep = &hpcd->IN_ep[epindex];
 80013f4:	f10e 0110 	add.w	r1, lr, #16
              ep->xfer_count += TxPctSize;
 80013f8:	4413      	add	r3, r2
 80013fa:	62f3      	str	r3, [r6, #44]	; 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013fc:	4421      	add	r1, r4
 80013fe:	f002 fb3d 	bl	8003a7c <USB_EPStartXfer>
 8001402:	e599      	b.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001404:	f017 0a40 	ands.w	sl, r7, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001408:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 800140c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001410:	f000 80da 	beq.w	80015c8 <HAL_PCD_IRQHandler+0x6ac>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001414:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8001418:	fa1e fc8c 	uxtah	ip, lr, ip
 800141c:	b2bf      	uxth	r7, r7
 800141e:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 8001422:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001426:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8001428:	bf34      	ite	cc
 800142a:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 800142e:	2300      	movcs	r3, #0
 8001430:	62b3      	str	r3, [r6, #40]	; 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001432:	2b00      	cmp	r3, #0
 8001434:	d154      	bne.n	80014e0 <HAL_PCD_IRQHandler+0x5c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001436:	2628      	movs	r6, #40	; 0x28
 8001438:	fb06 4605 	mla	r6, r6, r5, r4
 800143c:	7c76      	ldrb	r6, [r6, #17]
 800143e:	2e00      	cmp	r6, #0
 8001440:	d13d      	bne.n	80014be <HAL_PCD_IRQHandler+0x5a2>
 8001442:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001446:	fa1e f383 	uxtah	r3, lr, r3
 800144a:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 800144e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001452:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
 8001456:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 800145a:	b2b6      	uxth	r6, r6
 800145c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001460:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001464:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001468:	f200 4006 	addw	r0, r0, #1030	; 0x406
 800146c:	fa10 f083 	uxtah	r0, r0, r3
 8001470:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001478:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 800147c:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001480:	b29b      	uxth	r3, r3
 8001482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001486:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800148a:	4620      	mov	r0, r4
 800148c:	f003 f8cf 	bl	800462e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001490:	2f00      	cmp	r7, #0
 8001492:	f000 80da 	beq.w	800164a <HAL_PCD_IRQHandler+0x72e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001496:	2328      	movs	r3, #40	; 0x28
 8001498:	fb03 4305 	mla	r3, r3, r5, r4
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	7c19      	ldrb	r1, [r3, #16]
 80014a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	0c1b      	lsrs	r3, r3, #16
 80014b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80014bc:	e0c5      	b.n	800164a <HAL_PCD_IRQHandler+0x72e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014be:	2e01      	cmp	r6, #1
 80014c0:	d1e3      	bne.n	800148a <HAL_PCD_IRQHandler+0x56e>
 80014c2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80014c6:	fa1e f686 	uxtah	r6, lr, r6
 80014ca:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014ce:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80014d2:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80014d6:	fa10 f686 	uxtah	r6, r0, r6
 80014da:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
 80014de:	e7d4      	b.n	800148a <HAL_PCD_IRQHandler+0x56e>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80014e0:	b16f      	cbz	r7, 80014fe <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80014e2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80014e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fa:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80014fe:	2728      	movs	r7, #40	; 0x28
 8001500:	fb07 4705 	mla	r7, r7, r5, r4
 8001504:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001508:	2b01      	cmp	r3, #1
 800150a:	f040 809e 	bne.w	800164a <HAL_PCD_IRQHandler+0x72e>
        ep->xfer_buff += TxPctSize;
 800150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001510:	4461      	add	r1, ip
 8001512:	6279      	str	r1, [r7, #36]	; 0x24
        ep->xfer_count += TxPctSize;
 8001514:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001516:	4463      	add	r3, ip
 8001518:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151c:	6a3e      	ldr	r6, [r7, #32]
 800151e:	42b3      	cmp	r3, r6
 8001520:	d323      	bcc.n	800156a <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 8001522:	1b9b      	subs	r3, r3, r6
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001526:	2328      	movs	r3, #40	; 0x28
 8001528:	fb03 4305 	mla	r3, r3, r5, r4
 800152c:	7c5f      	ldrb	r7, [r3, #17]
 800152e:	b2b3      	uxth	r3, r6
 8001530:	2f00      	cmp	r7, #0
 8001532:	d140      	bne.n	80015b6 <HAL_PCD_IRQHandler+0x69a>
 8001534:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001538:	fa1e f787 	uxtah	r7, lr, r7
 800153c:	2e3e      	cmp	r6, #62	; 0x3e
 800153e:	f837 c032 	ldrh.w	ip, [r7, r2, lsl #3]
 8001542:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001546:	f827 c032 	strh.w	ip, [r7, r2, lsl #3]
 800154a:	d919      	bls.n	8001580 <HAL_PCD_IRQHandler+0x664>
 800154c:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8001550:	06f6      	lsls	r6, r6, #27
 8001552:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001556:	bf08      	it	eq
 8001558:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800155c:	b2b6      	uxth	r6, r6
 800155e:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001562:	ea46 0608 	orr.w	r6, r6, r8
 8001566:	b2b6      	uxth	r6, r6
 8001568:	e010      	b.n	800158c <HAL_PCD_IRQHandler+0x670>
        else if (ep->xfer_len_db == 0U)
 800156a:	b91b      	cbnz	r3, 8001574 <HAL_PCD_IRQHandler+0x658>
          ep->xfer_fill_db = 0U;
 800156c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if (ep->xfer_len > TxPctSize)
 8001570:	4666      	mov	r6, ip
 8001572:	e7d8      	b.n	8001526 <HAL_PCD_IRQHandler+0x60a>
          ep->xfer_fill_db = 0U;
 8001574:	2600      	movs	r6, #0
 8001576:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
          ep->xfer_len_db = 0U;
 800157a:	633e      	str	r6, [r7, #48]	; 0x30
 800157c:	461e      	mov	r6, r3
 800157e:	e7d2      	b.n	8001526 <HAL_PCD_IRQHandler+0x60a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001580:	b96e      	cbnz	r6, 800159e <HAL_PCD_IRQHandler+0x682>
 8001582:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001586:	b2b6      	uxth	r6, r6
 8001588:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 800158c:	f827 6032 	strh.w	r6, [r7, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001590:	2228      	movs	r2, #40	; 0x28
 8001592:	fb02 4205 	mla	r2, r2, r5, r4
 8001596:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001598:	f002 fa61 	bl	8003a5e <USB_WritePMA>
 800159c:	e055      	b.n	800164a <HAL_PCD_IRQHandler+0x72e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800159e:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 80015a2:	07f6      	lsls	r6, r6, #31
 80015a4:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 80015a8:	bf48      	it	mi
 80015aa:	f10c 0c01 	addmi.w	ip, ip, #1
 80015ae:	b2b6      	uxth	r6, r6
 80015b0:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 80015b4:	e7d7      	b.n	8001566 <HAL_PCD_IRQHandler+0x64a>
 80015b6:	2f01      	cmp	r7, #1
 80015b8:	bf02      	ittt	eq
 80015ba:	f8b0 6050 	ldrheq.w	r6, [r0, #80]	; 0x50
 80015be:	fa1e f686 	uxtaheq	r6, lr, r6
 80015c2:	f826 3032 	strheq.w	r3, [r6, r2, lsl #3]
 80015c6:	e7e3      	b.n	8001590 <HAL_PCD_IRQHandler+0x674>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015c8:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 80015cc:	fa1e fc8c 	uxtah	ip, lr, ip
 80015d0:	b2bf      	uxth	r7, r7
 80015d2:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 80015d6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80015da:	459c      	cmp	ip, r3
      ep->xfer_len -= TxPctSize;
 80015dc:	bf94      	ite	ls
 80015de:	eba3 030c 	subls.w	r3, r3, ip
      ep->xfer_len = 0U;
 80015e2:	4653      	movhi	r3, sl
 80015e4:	62b3      	str	r3, [r6, #40]	; 0x28
    if (ep->xfer_len == 0U)
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d155      	bne.n	8001696 <HAL_PCD_IRQHandler+0x77a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015ea:	2628      	movs	r6, #40	; 0x28
 80015ec:	fb06 4605 	mla	r6, r6, r5, r4
 80015f0:	7c76      	ldrb	r6, [r6, #17]
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	d13e      	bne.n	8001674 <HAL_PCD_IRQHandler+0x758>
 80015f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015fa:	f200 4602 	addw	r6, r0, #1026	; 0x402
 80015fe:	fa16 f383 	uxtah	r3, r6, r3
 8001602:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 8001606:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800160a:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
 800160e:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 8001612:	b2b6      	uxth	r6, r6
 8001614:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001618:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800161c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001620:	fa1e f383 	uxtah	r3, lr, r3
 8001624:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
 8001628:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800162c:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
 8001630:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
 8001634:	b280      	uxth	r0, r0
 8001636:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800163a:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800163e:	4620      	mov	r0, r4
 8001640:	f002 fff5 	bl	800462e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001644:	2f00      	cmp	r7, #0
 8001646:	f43f af26 	beq.w	8001496 <HAL_PCD_IRQHandler+0x57a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800164a:	2328      	movs	r3, #40	; 0x28
 800164c:	fb03 4505 	mla	r5, r3, r5, r4
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	7c29      	ldrb	r1, [r5, #16]
 8001654:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001658:	b29b      	uxth	r3, r3
 800165a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800165e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001662:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001672:	e461      	b.n	8000f38 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001674:	2e01      	cmp	r6, #1
 8001676:	d1e2      	bne.n	800163e <HAL_PCD_IRQHandler+0x722>
 8001678:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800167c:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001680:	fa1c f686 	uxtah	r6, ip, r6
 8001684:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001688:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 800168c:	fa1e f080 	uxtah	r0, lr, r0
 8001690:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8001694:	e7d3      	b.n	800163e <HAL_PCD_IRQHandler+0x722>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001696:	b96f      	cbnz	r7, 80016b4 <HAL_PCD_IRQHandler+0x798>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001698:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800169c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	0c1b      	lsrs	r3, r3, #16
 80016a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80016b4:	2728      	movs	r7, #40	; 0x28
 80016b6:	fb07 4705 	mla	r7, r7, r5, r4
 80016ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d1c3      	bne.n	800164a <HAL_PCD_IRQHandler+0x72e>
        ep->xfer_buff += TxPctSize;
 80016c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c4:	4461      	add	r1, ip
 80016c6:	6279      	str	r1, [r7, #36]	; 0x24
        ep->xfer_count += TxPctSize;
 80016c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80016ca:	4463      	add	r3, ip
 80016cc:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80016ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d0:	6a3e      	ldr	r6, [r7, #32]
 80016d2:	42b3      	cmp	r3, r6
 80016d4:	d323      	bcc.n	800171e <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 80016d6:	1b9b      	subs	r3, r3, r6
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016da:	2328      	movs	r3, #40	; 0x28
 80016dc:	fb03 4305 	mla	r3, r3, r5, r4
 80016e0:	7c5f      	ldrb	r7, [r3, #17]
 80016e2:	b2b3      	uxth	r3, r6
 80016e4:	2f00      	cmp	r7, #0
 80016e6:	d13e      	bne.n	8001766 <HAL_PCD_IRQHandler+0x84a>
 80016e8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80016ec:	fa1e f787 	uxtah	r7, lr, r7
 80016f0:	2e3e      	cmp	r6, #62	; 0x3e
 80016f2:	f837 c032 	ldrh.w	ip, [r7, r2, lsl #3]
 80016f6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80016fa:	f827 c032 	strh.w	ip, [r7, r2, lsl #3]
 80016fe:	d919      	bls.n	8001734 <HAL_PCD_IRQHandler+0x818>
 8001700:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8001704:	06f6      	lsls	r6, r6, #27
 8001706:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 800170a:	bf08      	it	eq
 800170c:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8001710:	b2b6      	uxth	r6, r6
 8001712:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001716:	ea46 0608 	orr.w	r6, r6, r8
 800171a:	b2b6      	uxth	r6, r6
 800171c:	e010      	b.n	8001740 <HAL_PCD_IRQHandler+0x824>
        else if (ep->xfer_len_db == 0U)
 800171e:	b91b      	cbnz	r3, 8001728 <HAL_PCD_IRQHandler+0x80c>
          ep->xfer_fill_db = 0U;
 8001720:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if (ep->xfer_len >= TxPctSize)
 8001724:	4666      	mov	r6, ip
 8001726:	e7d8      	b.n	80016da <HAL_PCD_IRQHandler+0x7be>
          ep->xfer_len_db = 0U;
 8001728:	2600      	movs	r6, #0
 800172a:	633e      	str	r6, [r7, #48]	; 0x30
          ep->xfer_fill_db = 0;
 800172c:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
 8001730:	461e      	mov	r6, r3
 8001732:	e7d2      	b.n	80016da <HAL_PCD_IRQHandler+0x7be>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001734:	b95e      	cbnz	r6, 800174e <HAL_PCD_IRQHandler+0x832>
 8001736:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 800173a:	b2b6      	uxth	r6, r6
 800173c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001740:	f827 6032 	strh.w	r6, [r7, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001744:	2228      	movs	r2, #40	; 0x28
 8001746:	fb02 4205 	mla	r2, r2, r5, r4
 800174a:	8b52      	ldrh	r2, [r2, #26]
 800174c:	e724      	b.n	8001598 <HAL_PCD_IRQHandler+0x67c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800174e:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8001752:	07f6      	lsls	r6, r6, #31
 8001754:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001758:	bf48      	it	mi
 800175a:	f10c 0c01 	addmi.w	ip, ip, #1
 800175e:	b2b6      	uxth	r6, r6
 8001760:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001764:	e7d9      	b.n	800171a <HAL_PCD_IRQHandler+0x7fe>
 8001766:	2f01      	cmp	r7, #1
 8001768:	bf02      	ittt	eq
 800176a:	f8b0 6050 	ldrheq.w	r6, [r0, #80]	; 0x50
 800176e:	fa1e f686 	uxtaheq	r6, lr, r6
 8001772:	f826 3032 	strheq.w	r3, [r6, r2, lsl #3]
 8001776:	e7e5      	b.n	8001744 <HAL_PCD_IRQHandler+0x828>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001778:	0543      	lsls	r3, r0, #21
 800177a:	d513      	bpl.n	80017a4 <HAL_PCD_IRQHandler+0x888>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	9101      	str	r1, [sp, #4]
 8001780:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800178c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800178e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001792:	f002 ff58 	bl	8004646 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001796:	9901      	ldr	r1, [sp, #4]
 8001798:	4620      	mov	r0, r4
}
 800179a:	b003      	add	sp, #12
 800179c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017a0:	f7ff bba8 	b.w	8000ef4 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017a4:	0447      	lsls	r7, r0, #17
 80017a6:	d50a      	bpl.n	80017be <HAL_PCD_IRQHandler+0x8a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017a8:	6822      	ldr	r2, [r4, #0]
 80017aa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80017ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80017ba:	f7ff bbc2 	b.w	8000f42 <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017be:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 80017c2:	d005      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x8b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80017ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017ce:	e7f0      	b.n	80017b2 <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80017d0:	04c6      	lsls	r6, r0, #19
 80017d2:	d522      	bpl.n	800181a <HAL_PCD_IRQHandler+0x8fe>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80017ea:	f023 0308 	bic.w	r3, r3, #8
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80017f6:	f894 32c8 	ldrb.w	r3, [r4, #712]	; 0x2c8
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d104      	bne.n	8001808 <HAL_PCD_IRQHandler+0x8ec>
      hpcd->LPM_State = LPM_L0;
 80017fe:	f884 12c8 	strb.w	r1, [r4, #712]	; 0x2c8
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001802:	4620      	mov	r0, r4
 8001804:	f002 ffa2 	bl	800474c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001808:	4620      	mov	r0, r4
 800180a:	f002 ff3f 	bl	800468c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800180e:	6822      	ldr	r2, [r4, #0]
 8001810:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001818:	e7cb      	b.n	80017b2 <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800181a:	0505      	lsls	r5, r0, #20
 800181c:	d51b      	bpl.n	8001856 <HAL_PCD_IRQHandler+0x93a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800181e:	6822      	ldr	r2, [r4, #0]
 8001820:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001824:	b29b      	uxth	r3, r3
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800182e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800183e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001842:	b29b      	uxth	r3, r3
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 800184c:	4620      	mov	r0, r4
 800184e:	f002 ff0d 	bl	800466c <HAL_PCD_SuspendCallback>
 8001852:	f7ff bb76 	b.w	8000f42 <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001856:	0601      	lsls	r1, r0, #24
 8001858:	d52b      	bpl.n	80018b2 <HAL_PCD_IRQHandler+0x996>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001864:	0412      	lsls	r2, r2, #16
 8001866:	0c12      	lsrs	r2, r2, #16
 8001868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800186c:	f894 22c8 	ldrb.w	r2, [r4, #712]	; 0x2c8
 8001870:	2a00      	cmp	r2, #0
 8001872:	d1eb      	bne.n	800184c <HAL_PCD_IRQHandler+0x930>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001874:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001878:	b292      	uxth	r2, r2
 800187a:	f042 0204 	orr.w	r2, r2, #4
 800187e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001882:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001886:	b292      	uxth	r2, r2
 8001888:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 800188c:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800188e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001892:	f884 12c8 	strb.w	r1, [r4, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001896:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800189a:	f3c3 038d 	ubfx	r3, r3, #2, #14
 800189e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018a2:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80018a4:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
}
 80018a8:	b003      	add	sp, #12
 80018aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018ae:	f002 bf4d 	b.w	800474c <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018b2:	0582      	lsls	r2, r0, #22
 80018b4:	d50d      	bpl.n	80018d2 <HAL_PCD_IRQHandler+0x9b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80018c8:	4620      	mov	r0, r4
 80018ca:	f002 feb8 	bl	800463e <HAL_PCD_SOFCallback>
    return;
 80018ce:	f7ff bb38 	b.w	8000f42 <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80018d2:	05c3      	lsls	r3, r0, #23
 80018d4:	f57f ab35 	bpl.w	8000f42 <HAL_PCD_IRQHandler+0x26>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e2:	e766      	b.n	80017b2 <HAL_PCD_IRQHandler+0x896>
 80018e4:	ffff8f0f 	.word	0xffff8f0f
 80018e8:	ffff8000 	.word	0xffff8000

080018ec <HAL_PCD_EP_Open>:
{
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	f001 0607 	and.w	r6, r1, #7
 80018f2:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80018f6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80018fa:	4605      	mov	r5, r0
 80018fc:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8001900:	f04f 0028 	mov.w	r0, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001904:	d01b      	beq.n	800193e <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8001906:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190a:	f104 0110 	add.w	r1, r4, #16
    ep->is_in = 1U;
 800190e:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001910:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001912:	7444      	strb	r4, [r0, #17]
  if (ep_type == EP_TYPE_BULK)
 8001914:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8001916:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8001918:	bf04      	itt	eq
 800191a:	2300      	moveq	r3, #0
 800191c:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 800191e:	700e      	strb	r6, [r1, #0]
  ep->maxpacket = ep_mps;
 8001920:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001922:	f895 3290 	ldrb.w	r3, [r5, #656]	; 0x290
 8001926:	2b01      	cmp	r3, #1
 8001928:	d012      	beq.n	8001950 <HAL_PCD_EP_Open+0x64>
 800192a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800192c:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800192e:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001932:	f001 febd 	bl	80036b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001936:	2000      	movs	r0, #0
 8001938:	f885 0290 	strb.w	r0, [r5, #656]	; 0x290
}
 800193c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800193e:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001942:	f504 71a8 	add.w	r1, r4, #336	; 0x150
    ep->is_in = 0U;
 8001946:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001948:	4429      	add	r1, r5
    ep->is_in = 0U;
 800194a:	f880 4151 	strb.w	r4, [r0, #337]	; 0x151
 800194e:	e7e1      	b.n	8001914 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 8001950:	2002      	movs	r0, #2
 8001952:	e7f3      	b.n	800193c <HAL_PCD_EP_Open+0x50>

08001954 <HAL_PCD_EP_Receive>:
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800195a:	2628      	movs	r6, #40	; 0x28
 800195c:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8001960:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001962:	f884 1150 	strb.w	r1, [r4, #336]	; 0x150
  ep->xfer_len = len;
 8001966:	e9c4 2359 	strd	r2, r3, [r4, #356]	; 0x164
  ep->xfer_count = 0U;
 800196a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  ep->is_in = 0U;
 800196e:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001972:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 8001976:	6800      	ldr	r0, [r0, #0]
 8001978:	f002 f880 	bl	8003a7c <USB_EPStartXfer>
}
 800197c:	4628      	mov	r0, r5
 800197e:	bd70      	pop	{r4, r5, r6, pc}

08001980 <HAL_PCD_EP_Transmit>:
{
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	f001 0607 	and.w	r6, r1, #7
  ep->xfer_buff = pBuf;
 8001986:	2428      	movs	r4, #40	; 0x28
 8001988:	fb04 0406 	mla	r4, r4, r6, r0
 800198c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001990:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
 8001994:	6262      	str	r2, [r4, #36]	; 0x24
  ep->xfer_count = 0U;
 8001996:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 8001998:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199a:	4639      	mov	r1, r7
  ep->xfer_len = len;
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800199e:	3110      	adds	r1, #16
  ep->xfer_fill_db = 1U;
 80019a0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  ep->xfer_len_db = len;
 80019a4:	6323      	str	r3, [r4, #48]	; 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019a6:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 80019a8:	62fd      	str	r5, [r7, #44]	; 0x2c
  ep->is_in = 1U;
 80019aa:	7462      	strb	r2, [r4, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ac:	7426      	strb	r6, [r4, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019ae:	f002 f865 	bl	8003a7c <USB_EPStartXfer>
}
 80019b2:	4628      	mov	r0, r5
 80019b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019b6 <HAL_PCD_EP_SetStall>:
{
 80019b6:	b510      	push	{r4, lr}
 80019b8:	4604      	mov	r4, r0
 80019ba:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019be:	7923      	ldrb	r3, [r4, #4]
 80019c0:	4283      	cmp	r3, r0
 80019c2:	d326      	bcc.n	8001a12 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80019c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019c8:	f04f 0228 	mov.w	r2, #40	; 0x28
 80019cc:	d017      	beq.n	80019fe <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	fb02 4300 	mla	r3, r2, r0, r4
    ep->is_in = 1U;
 80019d2:	fb02 4200 	mla	r2, r2, r0, r4
 80019d6:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019d8:	3310      	adds	r3, #16
    ep->is_in = 1U;
 80019da:	7451      	strb	r1, [r2, #17]
  ep->is_stall = 1U;
 80019dc:	2201      	movs	r2, #1
 80019de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e0:	7018      	strb	r0, [r3, #0]
  __HAL_LOCK(hpcd);
 80019e2:	f894 1290 	ldrb.w	r1, [r4, #656]	; 0x290
 80019e6:	4291      	cmp	r1, r2
 80019e8:	d015      	beq.n	8001a16 <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80019ec:	f884 2290 	strb.w	r2, [r4, #656]	; 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019f0:	4619      	mov	r1, r3
 80019f2:	f001 ffc1 	bl	8003978 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 80019fc:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80019fe:	fb02 4301 	mla	r3, r2, r1, r4
    ep->is_in = 0U;
 8001a02:	fb02 4101 	mla	r1, r2, r1, r4
 8001a06:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001a08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    ep->is_in = 0U;
 8001a0c:	f881 2151 	strb.w	r2, [r1, #337]	; 0x151
 8001a10:	e7e4      	b.n	80019dc <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	e7f2      	b.n	80019fc <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 8001a16:	2002      	movs	r0, #2
 8001a18:	e7f0      	b.n	80019fc <HAL_PCD_EP_SetStall+0x46>

08001a1a <HAL_PCD_EP_ClrStall>:
{
 8001a1a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a1c:	7902      	ldrb	r2, [r0, #4]
 8001a1e:	f001 030f 	and.w	r3, r1, #15
 8001a22:	429a      	cmp	r2, r3
{
 8001a24:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a26:	d32b      	bcc.n	8001a80 <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8001a28:	f001 0007 	and.w	r0, r1, #7
 8001a2c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001a30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a34:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001a38:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001a3c:	d017      	beq.n	8001a6e <HAL_PCD_EP_ClrStall+0x54>
    ep->is_in = 1U;
 8001a3e:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8001a46:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a48:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001a4a:	7453      	strb	r3, [r2, #17]
  ep->is_stall = 0U;
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a50:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8001a52:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d014      	beq.n	8001a84 <HAL_PCD_EP_ClrStall+0x6a>
 8001a5a:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a5c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001a5e:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a62:	f001 ffa9 	bl	80039b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a66:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
  return HAL_OK;
 8001a6a:	4628      	mov	r0, r5
}
 8001a6c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001a6e:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	f503 71a8 	add.w	r1, r3, #336	; 0x150
    ep->is_in = 0U;
 8001a76:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a78:	4421      	add	r1, r4
    ep->is_in = 0U;
 8001a7a:	f882 3151 	strb.w	r3, [r2, #337]	; 0x151
 8001a7e:	e7e5      	b.n	8001a4c <HAL_PCD_EP_ClrStall+0x32>
    return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
 8001a82:	e7f3      	b.n	8001a6c <HAL_PCD_EP_ClrStall+0x52>
  __HAL_LOCK(hpcd);
 8001a84:	2002      	movs	r0, #2
 8001a86:	e7f1      	b.n	8001a6c <HAL_PCD_EP_ClrStall+0x52>

08001a88 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a8c:	bb30      	cbnz	r0, 8001adc <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001a92:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa2:	d11a      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aae:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	2132      	movs	r1, #50	; 0x32
 8001ab6:	434a      	muls	r2, r1
 8001ab8:	491f      	ldr	r1, [pc, #124]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001aba:	fbb2 f2f1 	udiv	r2, r2, r1
 8001abe:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac0:	6959      	ldr	r1, [r3, #20]
 8001ac2:	0549      	lsls	r1, r1, #21
 8001ac4:	d500      	bpl.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001ac6:	b922      	cbnz	r2, 8001ad2 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	0558      	lsls	r0, r3, #21
 8001acc:	d403      	bmi.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x4e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ace:	2000      	movs	r0, #0
}
 8001ad0:	4770      	bx	lr
        wait_loop_index--;
 8001ad2:	3a01      	subs	r2, #1
 8001ad4:	e7f4      	b.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ada:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001adc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ae0:	d11f      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ae2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001ae6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001af6:	d1ea      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b02:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	2132      	movs	r1, #50	; 0x32
 8001b0a:	434a      	muls	r2, r1
 8001b0c:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b0e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b12:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b14:	6959      	ldr	r1, [r3, #20]
 8001b16:	0549      	lsls	r1, r1, #21
 8001b18:	d5d6      	bpl.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d0d4      	beq.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8001b1e:	3a01      	subs	r2, #1
 8001b20:	e7f8      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b22:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e7cf      	b.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x46>
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000
 8001b34:	20000000 	.word	0x20000000
 8001b38:	000f4240 	.word	0x000f4240

08001b3c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b3c:	4a02      	ldr	r2, [pc, #8]	; (8001b48 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8001b3e:	6893      	ldr	r3, [r2, #8]
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6093      	str	r3, [r2, #8]
}
 8001b46:	4770      	bx	lr
 8001b48:	40007000 	.word	0x40007000

08001b4c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b4e:	4c29      	ldr	r4, [pc, #164]	; (8001bf4 <HAL_RCC_DeInit+0xa8>)
  tickstart = HAL_GetTick();
 8001b50:	f7ff f806 	bl	8000b60 <HAL_GetTick>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tickstart = HAL_GetTick();
 8001b5a:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b5c:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	055b      	lsls	r3, r3, #21
 8001b62:	d531      	bpl.n	8001bc8 <HAL_RCC_DeInit+0x7c>
      return HAL_TIMEOUT;
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b6a:	6063      	str	r3, [r4, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b6c:	f7fe fff8 	bl	8000b60 <HAL_GetTick>

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8001b70:	2301      	movs	r3, #1
  tickstart = HAL_GetTick();
 8001b72:	4605      	mov	r5, r0
  RCC->CFGR = 0x00000001u;
 8001b74:	60a3      	str	r3, [r4, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b76:	f241 3688 	movw	r6, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001b7a:	68a3      	ldr	r3, [r4, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d129      	bne.n	8001bd8 <HAL_RCC_DeInit+0x8c>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCC_DeInit+0xac>)
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_RCC_DeInit+0xb0>)
 8001b88:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_DeInit+0xb4>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	f7fe ffa5 	bl	8000adc <HAL_InitTick>
 8001b92:	4605      	mov	r5, r0
 8001b94:	bb60      	cbnz	r0, 8001bf0 <HAL_RCC_DeInit+0xa4>
  {
    return HAL_ERROR;
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	6023      	str	r3, [r4, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001b9c:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b9e:	f7fe ffdf 	bl	8000b60 <HAL_GetTick>
 8001ba2:	4606      	mov	r6, r0

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001baa:	d11b      	bne.n	8001be4 <HAL_RCC_DeInit+0x98>
      return HAL_TIMEOUT;
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8001bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb0:	60e2      	str	r2, [r4, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001bb2:	61a3      	str	r3, [r4, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	6223      	str	r3, [r4, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001bba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bc2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

  return HAL_OK;
 8001bc6:	e005      	b.n	8001bd4 <HAL_RCC_DeInit+0x88>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7fe ffca 	bl	8000b60 <HAL_GetTick>
 8001bcc:	1b40      	subs	r0, r0, r5
 8001bce:	2802      	cmp	r0, #2
 8001bd0:	d9c5      	bls.n	8001b5e <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8001bd2:	2503      	movs	r5, #3
}
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7fe ffc2 	bl	8000b60 <HAL_GetTick>
 8001bdc:	1b40      	subs	r0, r0, r5
 8001bde:	42b0      	cmp	r0, r6
 8001be0:	d9cb      	bls.n	8001b7a <HAL_RCC_DeInit+0x2e>
 8001be2:	e7f6      	b.n	8001bd2 <HAL_RCC_DeInit+0x86>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7fe ffbc 	bl	8000b60 <HAL_GetTick>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	2802      	cmp	r0, #2
 8001bec:	d9da      	bls.n	8001ba4 <HAL_RCC_DeInit+0x58>
 8001bee:	e7f0      	b.n	8001bd2 <HAL_RCC_DeInit+0x86>
    return HAL_ERROR;
 8001bf0:	2501      	movs	r5, #1
 8001bf2:	e7ef      	b.n	8001bd4 <HAL_RCC_DeInit+0x88>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c08:	4604      	mov	r4, r0
 8001c0a:	b340      	cbz	r0, 8001c5e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	07de      	lsls	r6, r3, #31
 8001c10:	d414      	bmi.n	8001c3c <HAL_RCC_OscConfig+0x38>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	079d      	lsls	r5, r3, #30
 8001c16:	d45b      	bmi.n	8001cd0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	0719      	lsls	r1, r3, #28
 8001c1c:	f100 80a4 	bmi.w	8001d68 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	075a      	lsls	r2, r3, #29
 8001c24:	f100 80cb 	bmi.w	8001dbe <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	069d      	lsls	r5, r3, #26
 8001c2c:	f100 8132 	bmi.w	8001e94 <HAL_RCC_OscConfig+0x290>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c30:	69e0      	ldr	r0, [r4, #28]
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f040 8160 	bne.w	8001ef8 <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 8001c38:	2000      	movs	r0, #0
 8001c3a:	e028      	b.n	8001c8e <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3c:	4da1      	ldr	r5, [pc, #644]	; (8001ec4 <HAL_RCC_OscConfig+0x2c0>)
 8001c3e:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4a:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_OscConfig+0x62>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	0398      	lsls	r0, r3, #14
 8001c56:	d5dc      	bpl.n	8001c12 <HAL_RCC_OscConfig+0xe>
 8001c58:	6863      	ldr	r3, [r4, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1d9      	bne.n	8001c12 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x8a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	e7f4      	b.n	8001c50 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d112      	bne.n	8001c94 <HAL_RCC_OscConfig+0x90>
 8001c6e:	682b      	ldr	r3, [r5, #0]
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff73 	bl	8000b60 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7c:	682b      	ldr	r3, [r5, #0]
 8001c7e:	0399      	lsls	r1, r3, #14
 8001c80:	d4c7      	bmi.n	8001c12 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c82:	f7fe ff6d 	bl	8000b60 <HAL_GetTick>
 8001c86:	1b80      	subs	r0, r0, r6
 8001c88:	2864      	cmp	r0, #100	; 0x64
 8001c8a:	d9f7      	bls.n	8001c7c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
}
 8001c8e:	b002      	add	sp, #8
 8001c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d104      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xa0>
 8001c9a:	682b      	ldr	r3, [r5, #0]
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	602b      	str	r3, [r5, #0]
 8001ca2:	e7e4      	b.n	8001c6e <HAL_RCC_OscConfig+0x6a>
 8001ca4:	682a      	ldr	r2, [r5, #0]
 8001ca6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001caa:	602a      	str	r2, [r5, #0]
 8001cac:	682a      	ldr	r2, [r5, #0]
 8001cae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cb2:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1de      	bne.n	8001c76 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff52 	bl	8000b60 <HAL_GetTick>
 8001cbc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	039a      	lsls	r2, r3, #14
 8001cc2:	d5a6      	bpl.n	8001c12 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff4c 	bl	8000b60 <HAL_GetTick>
 8001cc8:	1b80      	subs	r0, r0, r6
 8001cca:	2864      	cmp	r0, #100	; 0x64
 8001ccc:	d9f7      	bls.n	8001cbe <HAL_RCC_OscConfig+0xba>
 8001cce:	e7dd      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd0:	4d7c      	ldr	r5, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x2c0>)
 8001cd2:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd4:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d117      	bne.n	8001d0e <HAL_RCC_OscConfig+0x10a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cde:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d115      	bne.n	8001d12 <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce6:	682b      	ldr	r3, [r5, #0]
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	d502      	bpl.n	8001cf2 <HAL_RCC_OscConfig+0xee>
 8001cec:	68e3      	ldr	r3, [r4, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0b5      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	686b      	ldr	r3, [r5, #4]
 8001cf4:	6922      	ldr	r2, [r4, #16]
 8001cf6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001cfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cfe:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <HAL_RCC_OscConfig+0x2c4>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	f7fe feea 	bl	8000adc <HAL_InitTick>
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d085      	beq.n	8001c18 <HAL_RCC_OscConfig+0x14>
 8001d0c:	e7a7      	b.n	8001c5e <HAL_RCC_OscConfig+0x5a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	e7e8      	b.n	8001ce4 <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d12:	68e3      	ldr	r3, [r4, #12]
 8001d14:	b1bb      	cbz	r3, 8001d46 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_ENABLE();
 8001d16:	682b      	ldr	r3, [r5, #0]
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d1e:	f7fe ff1f 	bl	8000b60 <HAL_GetTick>
 8001d22:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	055f      	lsls	r7, r3, #21
 8001d28:	d507      	bpl.n	8001d3a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	686b      	ldr	r3, [r5, #4]
 8001d2c:	6922      	ldr	r2, [r4, #16]
 8001d2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001d32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d36:	606b      	str	r3, [r5, #4]
 8001d38:	e76e      	b.n	8001c18 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7fe ff11 	bl	8000b60 <HAL_GetTick>
 8001d3e:	1b80      	subs	r0, r0, r6
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9ef      	bls.n	8001d24 <HAL_RCC_OscConfig+0x120>
 8001d44:	e7a2      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001d46:	682b      	ldr	r3, [r5, #0]
 8001d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d4e:	f7fe ff07 	bl	8000b60 <HAL_GetTick>
 8001d52:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	0558      	lsls	r0, r3, #21
 8001d58:	f57f af5e 	bpl.w	8001c18 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7fe ff00 	bl	8000b60 <HAL_GetTick>
 8001d60:	1b80      	subs	r0, r0, r6
 8001d62:	2802      	cmp	r0, #2
 8001d64:	d9f6      	bls.n	8001d54 <HAL_RCC_OscConfig+0x150>
 8001d66:	e791      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d68:	6963      	ldr	r3, [r4, #20]
 8001d6a:	4d56      	ldr	r5, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x2c0>)
 8001d6c:	b19b      	cbz	r3, 8001d96 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d7a:	f7fe fef1 	bl	8000b60 <HAL_GetTick>
 8001d7e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d80:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d84:	079b      	lsls	r3, r3, #30
 8001d86:	f53f af4b 	bmi.w	8001c20 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7fe fee9 	bl	8000b60 <HAL_GetTick>
 8001d8e:	1b80      	subs	r0, r0, r6
 8001d90:	2802      	cmp	r0, #2
 8001d92:	d9f5      	bls.n	8001d80 <HAL_RCC_OscConfig+0x17c>
 8001d94:	e77a      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8001d96:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001da2:	f7fe fedd 	bl	8000b60 <HAL_GetTick>
 8001da6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001dac:	079f      	lsls	r7, r3, #30
 8001dae:	f57f af37 	bpl.w	8001c20 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7fe fed5 	bl	8000b60 <HAL_GetTick>
 8001db6:	1b80      	subs	r0, r0, r6
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d9f5      	bls.n	8001da8 <HAL_RCC_OscConfig+0x1a4>
 8001dbc:	e766      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dbe:	4d41      	ldr	r5, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x2c0>)
 8001dc0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dc2:	00de      	lsls	r6, r3, #3
 8001dc4:	d427      	bmi.n	8001e16 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	65ab      	str	r3, [r5, #88]	; 0x58
 8001dce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001dd8:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dda:	4e3c      	ldr	r6, [pc, #240]	; (8001ecc <HAL_RCC_OscConfig+0x2c8>)
 8001ddc:	6833      	ldr	r3, [r6, #0]
 8001dde:	05d8      	lsls	r0, r3, #23
 8001de0:	d51b      	bpl.n	8001e1a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de2:	68a3      	ldr	r3, [r4, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d129      	bne.n	8001e3c <HAL_RCC_OscConfig+0x238>
 8001de8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001df4:	f7fe feb4 	bl	8000b60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001dfc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e02:	079a      	lsls	r2, r3, #30
 8001e04:	d540      	bpl.n	8001e88 <HAL_RCC_OscConfig+0x284>
    if (pwrclkchanged == SET)
 8001e06:	2f00      	cmp	r7, #0
 8001e08:	f43f af0e 	beq.w	8001c28 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e12:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e14:	e708      	b.n	8001c28 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2700      	movs	r7, #0
 8001e18:	e7df      	b.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1a:	6833      	ldr	r3, [r6, #0]
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e22:	f7fe fe9d 	bl	8000b60 <HAL_GetTick>
 8001e26:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e28:	6833      	ldr	r3, [r6, #0]
 8001e2a:	05d9      	lsls	r1, r3, #23
 8001e2c:	d4d9      	bmi.n	8001de2 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe fe97 	bl	8000b60 <HAL_GetTick>
 8001e32:	eba0 0008 	sub.w	r0, r0, r8
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f6      	bls.n	8001e28 <HAL_RCC_OscConfig+0x224>
 8001e3a:	e727      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x24a>
 8001e40:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001e4c:	e7cc      	b.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
 8001e4e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8001e5a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1c4      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fe79 	bl	8000b60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e72:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e74:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e78:	079b      	lsls	r3, r3, #30
 8001e7a:	d5c4      	bpl.n	8001e06 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fe70 	bl	8000b60 <HAL_GetTick>
 8001e80:	1b80      	subs	r0, r0, r6
 8001e82:	4540      	cmp	r0, r8
 8001e84:	d9f6      	bls.n	8001e74 <HAL_RCC_OscConfig+0x270>
 8001e86:	e701      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe fe6a 	bl	8000b60 <HAL_GetTick>
 8001e8c:	1b80      	subs	r0, r0, r6
 8001e8e:	4540      	cmp	r0, r8
 8001e90:	d9b5      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1fa>
 8001e92:	e6fb      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e94:	69a3      	ldr	r3, [r4, #24]
 8001e96:	4d0b      	ldr	r5, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x2c0>)
 8001e98:	b1d3      	cbz	r3, 8001ed0 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 8001e9a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001ea6:	f7fe fe5b 	bl	8000b60 <HAL_GetTick>
 8001eaa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001eb0:	0798      	lsls	r0, r3, #30
 8001eb2:	f53f aebd 	bmi.w	8001c30 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb6:	f7fe fe53 	bl	8000b60 <HAL_GetTick>
 8001eba:	1b80      	subs	r0, r0, r6
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9f5      	bls.n	8001eac <HAL_RCC_OscConfig+0x2a8>
 8001ec0:	e6e4      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8001ed0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001edc:	f7fe fe40 	bl	8000b60 <HAL_GetTick>
 8001ee0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001ee6:	0799      	lsls	r1, r3, #30
 8001ee8:	f57f aea2 	bpl.w	8001c30 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eec:	f7fe fe38 	bl	8000b60 <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d9f5      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
 8001ef6:	e6c9      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef8:	4d45      	ldr	r5, [pc, #276]	; (8002010 <HAL_RCC_OscConfig+0x40c>)
 8001efa:	68ab      	ldr	r3, [r5, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	d052      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_DISABLE();
 8001f04:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f06:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0c:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f0e:	d13a      	bne.n	8001f86 <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8001f10:	f7fe fe26 	bl	8000b60 <HAL_GetTick>
 8001f14:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	019a      	lsls	r2, r3, #6
 8001f1a:	d42e      	bmi.n	8001f7a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	68ea      	ldr	r2, [r5, #12]
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_OscConfig+0x410>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	6a22      	ldr	r2, [r4, #32]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f2e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8001f32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f34:	3a01      	subs	r2, #1
 8001f36:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001f3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f3c:	0852      	lsrs	r2, r2, #1
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001f44:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001f4e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f56:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f58:	68eb      	ldr	r3, [r5, #12]
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001f60:	f7fe fdfe 	bl	8000b60 <HAL_GetTick>
 8001f64:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	682b      	ldr	r3, [r5, #0]
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	f53f ae65 	bmi.w	8001c38 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fdf7 	bl	8000b60 <HAL_GetTick>
 8001f72:	1b00      	subs	r0, r0, r4
 8001f74:	2802      	cmp	r0, #2
 8001f76:	d9f6      	bls.n	8001f66 <HAL_RCC_OscConfig+0x362>
 8001f78:	e688      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe fdf1 	bl	8000b60 <HAL_GetTick>
 8001f7e:	1b80      	subs	r0, r0, r6
 8001f80:	2802      	cmp	r0, #2
 8001f82:	d9c8      	bls.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f84:	e682      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001f86:	f7fe fdeb 	bl	8000b60 <HAL_GetTick>
 8001f8a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001f92:	d104      	bne.n	8001f9e <HAL_RCC_OscConfig+0x39a>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f94:	68e9      	ldr	r1, [r5, #12]
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <HAL_RCC_OscConfig+0x414>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	60ea      	str	r2, [r5, #12]
 8001f9c:	e64c      	b.n	8001c38 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fddf 	bl	8000b60 <HAL_GetTick>
 8001fa2:	1b00      	subs	r0, r0, r4
 8001fa4:	2802      	cmp	r0, #2
 8001fa6:	d9f1      	bls.n	8001f8c <HAL_RCC_OscConfig+0x388>
 8001fa8:	e670      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001faa:	2801      	cmp	r0, #1
 8001fac:	f43f ae6f 	beq.w	8001c8e <HAL_RCC_OscConfig+0x8a>
      temp_pllckcfg = RCC->PLLCFGR;
 8001fb0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	6a22      	ldr	r2, [r4, #32]
 8001fb4:	f003 0103 	and.w	r1, r3, #3
 8001fb8:	4291      	cmp	r1, r2
 8001fba:	f47f ae50 	bne.w	8001c5e <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001fc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001fca:	f47f ae48 	bne.w	8001c5e <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001fd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001fd8:	f47f ae41 	bne.w	8001c5e <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001fde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001fe6:	f47f ae3a 	bne.w	8001c5e <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fec:	0852      	lsrs	r2, r2, #1
 8001fee:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001ff2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ff4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001ff8:	f47f ae31 	bne.w	8001c5e <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ffc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002004:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002006:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800200a:	f43f ae15 	beq.w	8001c38 <HAL_RCC_OscConfig+0x34>
 800200e:	e626      	b.n	8001c5e <HAL_RCC_OscConfig+0x5a>
 8002010:	40021000 	.word	0x40021000
 8002014:	019f800c 	.word	0x019f800c
 8002018:	feeefffc 	.word	0xfeeefffc

0800201c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_RCC_GetSysClockFreq+0x60>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	f002 020c 	and.w	r2, r2, #12
 8002024:	2a04      	cmp	r2, #4
 8002026:	d023      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	f002 020c 	and.w	r2, r2, #12
 800202e:	2a08      	cmp	r2, #8
 8002030:	d020      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	f002 020c 	and.w	r2, r2, #12
 8002038:	2a0c      	cmp	r2, #12
 800203a:	d11d      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800203c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800203e:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002040:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002042:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002044:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002048:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 800204c:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800204e:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002052:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002056:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205a:	bf0c      	ite	eq
 800205c:	4908      	ldreq	r1, [pc, #32]	; (8002080 <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205e:	4909      	ldrne	r1, [pc, #36]	; (8002084 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002060:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002062:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002064:	fbb1 f2f2 	udiv	r2, r1, r2
 8002068:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 800206a:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 800206e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <HAL_RCC_GetSysClockFreq+0x68>)
 8002072:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <HAL_RCC_GetSysClockFreq+0x64>)
 8002076:	4770      	bx	lr
    sysclockfreq = 0U;
 8002078:	2000      	movs	r0, #0
}
 800207a:	4770      	bx	lr
 800207c:	40021000 	.word	0x40021000
 8002080:	016e3600 	.word	0x016e3600
 8002084:	00f42400 	.word	0x00f42400

08002088 <HAL_RCC_ClockConfig>:
{
 8002088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800208c:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800208e:	4605      	mov	r5, r0
 8002090:	b910      	cbnz	r0, 8002098 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002092:	2001      	movs	r0, #1
}
 8002094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4a6d      	ldr	r2, [pc, #436]	; (8002250 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d345      	bcc.n	8002130 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a4:	6829      	ldr	r1, [r5, #0]
 80020a6:	f011 0801 	ands.w	r8, r1, #1
 80020aa:	d14c      	bne.n	8002146 <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	682a      	ldr	r2, [r5, #0]
 80020ae:	0791      	lsls	r1, r2, #30
 80020b0:	f140 80a7 	bpl.w	8002202 <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	4b67      	ldr	r3, [pc, #412]	; (8002254 <HAL_RCC_ClockConfig+0x1cc>)
 80020b6:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ba:	bf1e      	ittt	ne
 80020bc:	6899      	ldrne	r1, [r3, #8]
 80020be:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 80020c2:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020c6:	bf41      	itttt	mi
 80020c8:	689a      	ldrmi	r2, [r3, #8]
 80020ca:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 80020ce:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 80020d2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	68a9      	ldr	r1, [r5, #8]
 80020d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4c5b      	ldr	r4, [pc, #364]	; (8002250 <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	42b3      	cmp	r3, r6
 80020ea:	f200 8093 	bhi.w	8002214 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	682a      	ldr	r2, [r5, #0]
 80020f0:	4c58      	ldr	r4, [pc, #352]	; (8002254 <HAL_RCC_ClockConfig+0x1cc>)
 80020f2:	f012 0f04 	tst.w	r2, #4
 80020f6:	f040 80a3 	bne.w	8002240 <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	0713      	lsls	r3, r2, #28
 80020fc:	d506      	bpl.n	800210c <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fe:	68a3      	ldr	r3, [r4, #8]
 8002100:	692a      	ldr	r2, [r5, #16]
 8002102:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002106:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800210a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800210c:	f7ff ff86 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8002110:	68a3      	ldr	r3, [r4, #8]
 8002112:	4a51      	ldr	r2, [pc, #324]	; (8002258 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	40d8      	lsrs	r0, r3
 8002120:	4b4e      	ldr	r3, [pc, #312]	; (800225c <HAL_RCC_ClockConfig+0x1d4>)
 8002122:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <HAL_RCC_ClockConfig+0x1d8>)
 8002126:	6818      	ldr	r0, [r3, #0]
}
 8002128:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800212c:	f7fe bcd6 	b.w	8000adc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f023 030f 	bic.w	r3, r3, #15
 8002136:	430b      	orrs	r3, r1
 8002138:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	428b      	cmp	r3, r1
 8002142:	d1a6      	bne.n	8002092 <HAL_RCC_ClockConfig+0xa>
 8002144:	e7ae      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002146:	686f      	ldr	r7, [r5, #4]
 8002148:	4c42      	ldr	r4, [pc, #264]	; (8002254 <HAL_RCC_ClockConfig+0x1cc>)
 800214a:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214c:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	d149      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	d59e      	bpl.n	8002092 <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002154:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002156:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002158:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 800215c:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800215e:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002160:	bf0c      	ite	eq
 8002162:	4840      	ldreq	r0, [pc, #256]	; (8002264 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002164:	4840      	ldrne	r0, [pc, #256]	; (8002268 <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002166:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800216a:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800216e:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002170:	fbb0 f2f2 	udiv	r2, r0, r2
 8002174:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002176:	68e2      	ldr	r2, [r4, #12]
 8002178:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800217c:	3201      	adds	r2, #1
 800217e:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8002180:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8002184:	4a39      	ldr	r2, [pc, #228]	; (800226c <HAL_RCC_ClockConfig+0x1e4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d81a      	bhi.n	80021c0 <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800218a:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800218e:	68a3      	ldr	r3, [r4, #8]
 8002190:	f023 0303 	bic.w	r3, r3, #3
 8002194:	433b      	orrs	r3, r7
 8002196:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002198:	f7fe fce2 	bl	8000b60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	68a3      	ldr	r3, [r4, #8]
 80021a4:	686a      	ldr	r2, [r5, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021ae:	f43f af7d 	beq.w	80020ac <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b2:	f7fe fcd5 	bl	8000b60 <HAL_GetTick>
 80021b6:	1bc0      	subs	r0, r0, r7
 80021b8:	4548      	cmp	r0, r9
 80021ba:	d9f2      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 80021bc:	2003      	movs	r0, #3
 80021be:	e769      	b.n	8002094 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021c0:	68a3      	ldr	r3, [r4, #8]
 80021c2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80021c6:	d004      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x14a>
 80021c8:	0788      	lsls	r0, r1, #30
 80021ca:	d5de      	bpl.n	800218a <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021cc:	68ab      	ldr	r3, [r5, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1db      	bne.n	800218a <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021d2:	68a3      	ldr	r3, [r4, #8]
 80021d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021de:	f04f 0880 	mov.w	r8, #128	; 0x80
 80021e2:	e7d4      	b.n	800218e <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e4:	2f02      	cmp	r7, #2
 80021e6:	d109      	bne.n	80021fc <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ec:	f43f af51 	beq.w	8002092 <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021f0:	f7ff ff14 	bl	800201c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_ClockConfig+0x1e4>)
 80021f6:	4298      	cmp	r0, r3
 80021f8:	d9c7      	bls.n	800218a <HAL_RCC_ClockConfig+0x102>
 80021fa:	e7ea      	b.n	80021d2 <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002200:	e7f4      	b.n	80021ec <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 8002202:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002206:	bf01      	itttt	eq
 8002208:	4a12      	ldreq	r2, [pc, #72]	; (8002254 <HAL_RCC_ClockConfig+0x1cc>)
 800220a:	6893      	ldreq	r3, [r2, #8]
 800220c:	f023 03f0 	biceq.w	r3, r3, #240	; 0xf0
 8002210:	6093      	streq	r3, [r2, #8]
 8002212:	e765      	b.n	80020e0 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f023 030f 	bic.w	r3, r3, #15
 800221a:	4333      	orrs	r3, r6
 800221c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800221e:	f7fe fc9f 	bl	8000b60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002226:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	42b3      	cmp	r3, r6
 8002230:	f43f af5d 	beq.w	80020ee <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fc94 	bl	8000b60 <HAL_GetTick>
 8002238:	1bc0      	subs	r0, r0, r7
 800223a:	4540      	cmp	r0, r8
 800223c:	d9f4      	bls.n	8002228 <HAL_RCC_ClockConfig+0x1a0>
 800223e:	e7bd      	b.n	80021bc <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	68a3      	ldr	r3, [r4, #8]
 8002242:	68e9      	ldr	r1, [r5, #12]
 8002244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002248:	430b      	orrs	r3, r1
 800224a:	60a3      	str	r3, [r4, #8]
 800224c:	e755      	b.n	80020fa <HAL_RCC_ClockConfig+0x72>
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000
 8002254:	40021000 	.word	0x40021000
 8002258:	08004818 	.word	0x08004818
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	016e3600 	.word	0x016e3600
 8002268:	00f42400 	.word	0x00f42400
 800226c:	04c4b400 	.word	0x04c4b400

08002270 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002272:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227e:	6810      	ldr	r0, [r2, #0]
 8002280:	f003 031f 	and.w	r3, r3, #31
}
 8002284:	40d8      	lsrs	r0, r3
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	08004828 	.word	0x08004828
 8002290:	20000000 	.word	0x20000000

08002294 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8002296:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a2:	6810      	ldr	r0, [r2, #0]
 80022a4:	f003 031f 	and.w	r3, r3, #31
}
 80022a8:	40d8      	lsrs	r0, r3
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08004828 	.word	0x08004828
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80022bc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022be:	6800      	ldr	r0, [r0, #0]
 80022c0:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 80022c4:	d039      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x82>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4da3      	ldr	r5, [pc, #652]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022ca:	00d8      	lsls	r0, r3, #3
 80022cc:	d427      	bmi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	65ab      	str	r3, [r5, #88]	; 0x58
 80022d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022e0:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e2:	4f9d      	ldr	r7, [pc, #628]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ec:	f7fe fc38 	bl	8000b60 <HAL_GetTick>
 80022f0:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	05d9      	lsls	r1, r3, #23
 80022f6:	d514      	bpl.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002302:	d002      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002304:	4293      	cmp	r3, r2
 8002306:	f040 8129 	bne.w	800255c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800230e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800231a:	2000      	movs	r0, #0
 800231c:	e008      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2600      	movs	r6, #0
 8002320:	e7df      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe fc1d 	bl	8000b60 <HAL_GetTick>
 8002326:	eba0 0008 	sub.w	r0, r0, r8
 800232a:	2802      	cmp	r0, #2
 800232c:	d9e1      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800232e:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002330:	b11e      	cbz	r6, 800233a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	07dd      	lsls	r5, r3, #31
 800233e:	d508      	bpl.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002340:	4984      	ldr	r1, [pc, #528]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002342:	6865      	ldr	r5, [r4, #4]
 8002344:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002348:	f022 0203 	bic.w	r2, r2, #3
 800234c:	432a      	orrs	r2, r5
 800234e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002352:	0799      	lsls	r1, r3, #30
 8002354:	d508      	bpl.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002356:	497f      	ldr	r1, [pc, #508]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002358:	68a5      	ldr	r5, [r4, #8]
 800235a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800235e:	f022 020c 	bic.w	r2, r2, #12
 8002362:	432a      	orrs	r2, r5
 8002364:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002368:	075a      	lsls	r2, r3, #29
 800236a:	d508      	bpl.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800236c:	4979      	ldr	r1, [pc, #484]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800236e:	68e5      	ldr	r5, [r4, #12]
 8002370:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002374:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002378:	432a      	orrs	r2, r5
 800237a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800237e:	071f      	lsls	r7, r3, #28
 8002380:	d508      	bpl.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002382:	4974      	ldr	r1, [pc, #464]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002384:	6925      	ldr	r5, [r4, #16]
 8002386:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800238a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800238e:	432a      	orrs	r2, r5
 8002390:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002394:	06de      	lsls	r6, r3, #27
 8002396:	d508      	bpl.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002398:	496e      	ldr	r1, [pc, #440]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800239a:	6965      	ldr	r5, [r4, #20]
 800239c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023a4:	432a      	orrs	r2, r5
 80023a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023aa:	069d      	lsls	r5, r3, #26
 80023ac:	d508      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ae:	4969      	ldr	r1, [pc, #420]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023b0:	69a5      	ldr	r5, [r4, #24]
 80023b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023ba:	432a      	orrs	r2, r5
 80023bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c0:	0659      	lsls	r1, r3, #25
 80023c2:	d508      	bpl.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	4963      	ldr	r1, [pc, #396]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023c6:	69e5      	ldr	r5, [r4, #28]
 80023c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023d0:	432a      	orrs	r2, r5
 80023d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d6:	061a      	lsls	r2, r3, #24
 80023d8:	d508      	bpl.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023da:	495e      	ldr	r1, [pc, #376]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023dc:	6a25      	ldr	r5, [r4, #32]
 80023de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80023e6:	432a      	orrs	r2, r5
 80023e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ec:	05df      	lsls	r7, r3, #23
 80023ee:	d508      	bpl.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f0:	4958      	ldr	r1, [pc, #352]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80023f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80023fc:	432a      	orrs	r2, r5
 80023fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002402:	039e      	lsls	r6, r3, #14
 8002404:	d508      	bpl.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002406:	4953      	ldr	r1, [pc, #332]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002408:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800240a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800240e:	f022 0203 	bic.w	r2, r2, #3
 8002412:	432a      	orrs	r2, r5
 8002414:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002418:	059d      	lsls	r5, r3, #22
 800241a:	d508      	bpl.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800241c:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800241e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002420:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002424:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002428:	432a      	orrs	r2, r5
 800242a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800242e:	0559      	lsls	r1, r3, #21
 8002430:	d50f      	bpl.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002432:	4948      	ldr	r1, [pc, #288]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002434:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002436:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800243a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800243e:	432a      	orrs	r2, r5
 8002440:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002444:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	bf02      	ittt	eq
 800244a:	68ca      	ldreq	r2, [r1, #12]
 800244c:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002450:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002452:	051a      	lsls	r2, r3, #20
 8002454:	d50f      	bpl.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002456:	493f      	ldr	r1, [pc, #252]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002458:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800245a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800245e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002462:	432a      	orrs	r2, r5
 8002464:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002468:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246c:	bf02      	ittt	eq
 800246e:	68ca      	ldreq	r2, [r1, #12]
 8002470:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002474:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002476:	04df      	lsls	r7, r3, #19
 8002478:	d50f      	bpl.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800247a:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800247c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800247e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002482:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002486:	432a      	orrs	r2, r5
 8002488:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800248c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	bf02      	ittt	eq
 8002492:	68ca      	ldreq	r2, [r1, #12]
 8002494:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002498:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249a:	049e      	lsls	r6, r3, #18
 800249c:	d50f      	bpl.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800249e:	492d      	ldr	r1, [pc, #180]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024a0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80024a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024a6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80024aa:	432a      	orrs	r2, r5
 80024ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024b0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b4:	bf02      	ittt	eq
 80024b6:	68ca      	ldreq	r2, [r1, #12]
 80024b8:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80024bc:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024be:	045d      	lsls	r5, r3, #17
 80024c0:	d50f      	bpl.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c2:	4924      	ldr	r1, [pc, #144]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024c4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80024c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80024ce:	432a      	orrs	r2, r5
 80024d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024d4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d8:	bf02      	ittt	eq
 80024da:	68ca      	ldreq	r2, [r1, #12]
 80024dc:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80024e0:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024e2:	0419      	lsls	r1, r3, #16
 80024e4:	d50f      	bpl.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024e6:	491b      	ldr	r1, [pc, #108]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024e8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80024ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f2:	432a      	orrs	r2, r5
 80024f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024f8:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024fc:	bf02      	ittt	eq
 80024fe:	68ca      	ldreq	r2, [r1, #12]
 8002500:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8002504:	60ca      	streq	r2, [r1, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002506:	03da      	lsls	r2, r3, #15
 8002508:	d50f      	bpl.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800250a:	4912      	ldr	r1, [pc, #72]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800250c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800250e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002512:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002516:	432a      	orrs	r2, r5
 8002518:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800251c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002520:	bf02      	ittt	eq
 8002522:	68ca      	ldreq	r2, [r1, #12]
 8002524:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8002528:	60ca      	streq	r2, [r1, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800252a:	035b      	lsls	r3, r3, #13
 800252c:	d50f      	bpl.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002530:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002532:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002536:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800253a:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800253c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002540:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002544:	d103      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x296>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002546:	68d3      	ldr	r3, [r2, #12]
 8002548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800254c:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 800254e:	b002      	add	sp, #8
 8002550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255c:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002560:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800256c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002570:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002578:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800257a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800257e:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002582:	f57f aec2 	bpl.w	800230a <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8002586:	f7fe faeb 	bl	8000b60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800258e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002590:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002594:	079b      	lsls	r3, r3, #30
 8002596:	f53f aeb8 	bmi.w	800230a <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe fae1 	bl	8000b60 <HAL_GetTick>
 800259e:	1bc0      	subs	r0, r0, r7
 80025a0:	4540      	cmp	r0, r8
 80025a2:	d9f5      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80025a4:	e6c3      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a6:	bf00      	nop

080025a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80025aa:	6803      	ldr	r3, [r0, #0]
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RTC_WaitForSynchro+0x2c>)
 80025ae:	60da      	str	r2, [r3, #12]
{
 80025b0:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80025b2:	f7fe fad5 	bl	8000b60 <HAL_GetTick>
 80025b6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	d501      	bpl.n	80025c4 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
}
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025c4:	f7fe facc 	bl	8000b60 <HAL_GetTick>
 80025c8:	1b40      	subs	r0, r0, r5
 80025ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80025ce:	d9f3      	bls.n	80025b8 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 80025d0:	2003      	movs	r0, #3
 80025d2:	e7f6      	b.n	80025c2 <HAL_RTC_WaitForSynchro+0x1a>
 80025d4:	0001005f 	.word	0x0001005f

080025d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80025da:	6803      	ldr	r3, [r0, #0]
 80025dc:	68dc      	ldr	r4, [r3, #12]
 80025de:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 80025e2:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80025e4:	d119      	bne.n	800261a <RTC_EnterInitMode+0x42>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80025ee:	f7fe fab7 	bl	8000b60 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025f2:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80025f4:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	065b      	lsls	r3, r3, #25
 80025fc:	d401      	bmi.n	8002602 <RTC_EnterInitMode+0x2a>
 80025fe:	2c03      	cmp	r4, #3
 8002600:	d101      	bne.n	8002606 <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8002602:	4620      	mov	r0, r4
 8002604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002606:	f7fe faab 	bl	8000b60 <HAL_GetTick>
 800260a:	1b80      	subs	r0, r0, r6
 800260c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002610:	bf84      	itt	hi
 8002612:	f885 7025 	strbhi.w	r7, [r5, #37]	; 0x25
        status = HAL_TIMEOUT;
 8002616:	2403      	movhi	r4, #3
 8002618:	e7ed      	b.n	80025f6 <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2400      	movs	r4, #0
 800261c:	e7f1      	b.n	8002602 <RTC_EnterInitMode+0x2a>

0800261e <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800261e:	6803      	ldr	r3, [r0, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8002626:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002628:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	0692      	lsls	r2, r2, #26
{
 800262e:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002630:	d406      	bmi.n	8002640 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002632:	f7ff ffb9 	bl	80025a8 <HAL_RTC_WaitForSynchro>
 8002636:	b110      	cbz	r0, 800263e <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800263e:	bd10      	pop	{r4, pc}
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	f022 0220 	bic.w	r2, r2, #32
 8002646:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002648:	f7ff ffae 	bl	80025a8 <HAL_RTC_WaitForSynchro>
 800264c:	b110      	cbz	r0, 8002654 <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800264e:	2003      	movs	r0, #3
 8002650:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	6993      	ldr	r3, [r2, #24]
 8002658:	f043 0320 	orr.w	r3, r3, #32
 800265c:	6193      	str	r3, [r2, #24]
 800265e:	e7ee      	b.n	800263e <RTC_ExitInitMode+0x20>

08002660 <HAL_RTC_Init>:
{
 8002660:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8002662:	4604      	mov	r4, r0
 8002664:	2800      	cmp	r0, #0
 8002666:	d045      	beq.n	80026f4 <HAL_RTC_Init+0x94>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002668:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800266c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002670:	b91b      	cbnz	r3, 800267a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8002672:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
      HAL_RTC_MspInit(hrtc);
 8002676:	f7fe f931 	bl	80008dc <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	06d2      	lsls	r2, r2, #27
 8002686:	d504      	bpl.n	8002692 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8002688:	2301      	movs	r3, #1
 800268a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800268e:	2000      	movs	r0, #0
}
 8002690:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002692:	22ca      	movs	r2, #202	; 0xca
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
 8002696:	2253      	movs	r2, #83	; 0x53
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff ff9c 	bl	80025d8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80026a0:	bb10      	cbnz	r0, 80026e8 <HAL_RTC_Init+0x88>
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80026a2:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80026a4:	6920      	ldr	r0, [r4, #16]
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80026a6:	6993      	ldr	r3, [r2, #24]
 80026a8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80026ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b0:	6193      	str	r3, [r2, #24]
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	6991      	ldr	r1, [r2, #24]
 80026b6:	4303      	orrs	r3, r0
 80026b8:	69a0      	ldr	r0, [r4, #24]
 80026ba:	4303      	orrs	r3, r0
 80026bc:	430b      	orrs	r3, r1
 80026be:	6193      	str	r3, [r2, #24]
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80026c0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80026c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80026c8:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff ffa7 	bl	800261e <RTC_ExitInitMode>
      if (status == HAL_OK)
 80026d0:	b950      	cbnz	r0, 80026e8 <HAL_RTC_Init+0x88>
        MODIFY_REG(hrtc->Instance->CR, \
 80026d2:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
 80026d6:	6821      	ldr	r1, [r4, #0]
 80026d8:	432b      	orrs	r3, r5
 80026da:	698a      	ldr	r2, [r1, #24]
 80026dc:	6965      	ldr	r5, [r4, #20]
 80026de:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80026e2:	432b      	orrs	r3, r5
 80026e4:	4313      	orrs	r3, r2
 80026e6:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	22ff      	movs	r2, #255	; 0xff
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d0ca      	beq.n	8002688 <HAL_RTC_Init+0x28>
 80026f2:	e7cd      	b.n	8002690 <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7cb      	b.n	8002690 <HAL_RTC_Init+0x30>

080026f8 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80026f8:	0089      	lsls	r1, r1, #2
 80026fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80026fe:	f501 5114 	add.w	r1, r1, #9472	; 0x2500

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002702:	600a      	str	r2, [r1, #0]
}
 8002704:	4770      	bx	lr

08002706 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8002706:	0089      	lsls	r1, r1, #2
 8002708:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800270c:	f501 5114 	add.w	r1, r1, #9472	; 0x2500

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002710:	6808      	ldr	r0, [r1, #0]
}
 8002712:	4770      	bx	lr

08002714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002714:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002716:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	e852 3f00 	ldrex	r3, [r2]
 800271c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002724:	6802      	ldr	r2, [r0, #0]
 8002726:	2900      	cmp	r1, #0
 8002728:	d1f5      	bne.n	8002716 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800272a:	4c0f      	ldr	r4, [pc, #60]	; (8002768 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	f102 0308 	add.w	r3, r2, #8
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	f102 0c08 	add.w	ip, r2, #8
 800273a:	e84c 3100 	strex	r1, r3, [ip]
 800273e:	2900      	cmp	r1, #0
 8002740:	d1f4      	bne.n	800272c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002742:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	e842 3100 	strex	r1, r3, [r2]
 8002754:	2900      	cmp	r1, #0
 8002756:	d1f7      	bne.n	8002748 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	2320      	movs	r3, #32
 800275a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275e:	2300      	movs	r3, #0
 8002760:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002762:	6743      	str	r3, [r0, #116]	; 0x74
}
 8002764:	bd10      	pop	{r4, pc}
 8002766:	bf00      	nop
 8002768:	effffffe 	.word	0xeffffffe

0800276c <HAL_UART_TxCpltCallback>:
 800276c:	4770      	bx	lr

0800276e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800276e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002770:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002778:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800277c:	f7fe f922 	bl	80009c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002780:	bd08      	pop	{r3, pc}

08002782 <HAL_UARTEx_RxEventCallback>:
}
 8002782:	4770      	bx	lr

08002784 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002784:	6803      	ldr	r3, [r0, #0]
 8002786:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002788:	681a      	ldr	r2, [r3, #0]
{
 800278a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 800278e:	f640 060f 	movw	r6, #2063	; 0x80f
 8002792:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002794:	689d      	ldr	r5, [r3, #8]
{
 8002796:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8002798:	d110      	bne.n	80027bc <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800279a:	068e      	lsls	r6, r1, #26
 800279c:	f140 8097 	bpl.w	80028ce <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027a0:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027a4:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 80027a8:	433e      	orrs	r6, r7
 80027aa:	f000 8090 	beq.w	80028ce <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 80027ae:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8085 	beq.w	80028c0 <HAL_UART_IRQHandler+0x13c>
}
 80027b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ba:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027bc:	4eab      	ldr	r6, [pc, #684]	; (8002a6c <HAL_UART_IRQHandler+0x2e8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027be:	48ac      	ldr	r0, [pc, #688]	; (8002a70 <HAL_UART_IRQHandler+0x2ec>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027c0:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027c2:	4010      	ands	r0, r2
 80027c4:	4330      	orrs	r0, r6
 80027c6:	f000 8082 	beq.w	80028ce <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027ca:	07cf      	lsls	r7, r1, #31
 80027cc:	d509      	bpl.n	80027e2 <HAL_UART_IRQHandler+0x5e>
 80027ce:	05d0      	lsls	r0, r2, #23
 80027d0:	d507      	bpl.n	80027e2 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027d2:	2001      	movs	r0, #1
 80027d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027d6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80027da:	f040 0001 	orr.w	r0, r0, #1
 80027de:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027e2:	078f      	lsls	r7, r1, #30
 80027e4:	d509      	bpl.n	80027fa <HAL_UART_IRQHandler+0x76>
 80027e6:	07e8      	lsls	r0, r5, #31
 80027e8:	d507      	bpl.n	80027fa <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027ea:	2002      	movs	r0, #2
 80027ec:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ee:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80027f2:	f040 0004 	orr.w	r0, r0, #4
 80027f6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027fa:	074f      	lsls	r7, r1, #29
 80027fc:	d509      	bpl.n	8002812 <HAL_UART_IRQHandler+0x8e>
 80027fe:	07e8      	lsls	r0, r5, #31
 8002800:	d507      	bpl.n	8002812 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002802:	2004      	movs	r0, #4
 8002804:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002806:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800280a:	f040 0002 	orr.w	r0, r0, #2
 800280e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002812:	070f      	lsls	r7, r1, #28
 8002814:	d50b      	bpl.n	800282e <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002816:	f002 0020 	and.w	r0, r2, #32
 800281a:	4330      	orrs	r0, r6
 800281c:	d007      	beq.n	800282e <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800281e:	2008      	movs	r0, #8
 8002820:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002822:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002826:	f040 0008 	orr.w	r0, r0, #8
 800282a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800282e:	050e      	lsls	r6, r1, #20
 8002830:	d50a      	bpl.n	8002848 <HAL_UART_IRQHandler+0xc4>
 8002832:	0150      	lsls	r0, r2, #5
 8002834:	d508      	bpl.n	8002848 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002836:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800283a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800283c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002840:	f043 0320 	orr.w	r3, r3, #32
 8002844:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002848:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800284c:	2b00      	cmp	r3, #0
 800284e:	d037      	beq.n	80028c0 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002850:	068b      	lsls	r3, r1, #26
 8002852:	d509      	bpl.n	8002868 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002854:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002858:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800285c:	432a      	orrs	r2, r5
 800285e:	d003      	beq.n	8002868 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8002860:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002862:	b10b      	cbz	r3, 8002868 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8002864:	4620      	mov	r0, r4
 8002866:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002868:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 800286a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800286e:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002870:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 800287c:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800287e:	d021      	beq.n	80028c4 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8002880:	f7ff ff48 	bl	8002714 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	68b3      	ldr	r3, [r6, #8]
 8002886:	065f      	lsls	r7, r3, #25
 8002888:	d517      	bpl.n	80028ba <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	f102 0308 	add.w	r3, r2, #8
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002898:	3208      	adds	r2, #8
 800289a:	e842 3100 	strex	r1, r3, [r2]
 800289e:	2900      	cmp	r1, #0
 80028a0:	d1f3      	bne.n	800288a <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 80028a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80028a6:	b140      	cbz	r0, 80028ba <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028a8:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_UART_IRQHandler+0x2f0>)
 80028aa:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ac:	f7fe fa0b 	bl	8000cc6 <HAL_DMA_Abort_IT>
 80028b0:	b130      	cbz	r0, 80028c0 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028b2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80028b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028b8:	e77d      	b.n	80027b6 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7fe f882 	bl	80009c4 <HAL_UART_ErrorCallback>
}
 80028c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 80028c4:	f7fe f87e 	bl	80009c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 80028cc:	e7f8      	b.n	80028c0 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80028d0:	2801      	cmp	r0, #1
 80028d2:	f040 8089 	bne.w	80029e8 <HAL_UART_IRQHandler+0x264>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028d6:	06ce      	lsls	r6, r1, #27
 80028d8:	f140 8086 	bpl.w	80029e8 <HAL_UART_IRQHandler+0x264>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028dc:	06d0      	lsls	r0, r2, #27
 80028de:	f140 8083 	bpl.w	80029e8 <HAL_UART_IRQHandler+0x264>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028e2:	2210      	movs	r2, #16
 80028e4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	0651      	lsls	r1, r2, #25
 80028ea:	d54b      	bpl.n	8002984 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ec:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80028f0:	6811      	ldr	r1, [r2, #0]
 80028f2:	684a      	ldr	r2, [r1, #4]
 80028f4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	d0e2      	beq.n	80028c0 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028fa:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 80028fe:	4290      	cmp	r0, r2
 8002900:	d9de      	bls.n	80028c0 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 8002902:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002906:	680a      	ldr	r2, [r1, #0]
 8002908:	0692      	lsls	r2, r2, #26
 800290a:	d42f      	bmi.n	800296c <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	e843 2100 	strex	r1, r2, [r3]
 8002918:	2900      	cmp	r1, #0
 800291a:	d1f7      	bne.n	800290c <HAL_UART_IRQHandler+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	f103 0208 	add.w	r2, r3, #8
 8002920:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	f103 0008 	add.w	r0, r3, #8
 800292c:	e840 2100 	strex	r1, r2, [r0]
 8002930:	2900      	cmp	r1, #0
 8002932:	d1f3      	bne.n	800291c <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	f103 0208 	add.w	r2, r3, #8
 8002938:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800293c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	f103 0008 	add.w	r0, r3, #8
 8002944:	e840 2100 	strex	r1, r2, [r0]
 8002948:	2900      	cmp	r1, #0
 800294a:	d1f3      	bne.n	8002934 <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 800294c:	2220      	movs	r2, #32
 800294e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002958:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295c:	e843 2100 	strex	r1, r2, [r3]
 8002960:	2900      	cmp	r1, #0
 8002962:	d1f7      	bne.n	8002954 <HAL_UART_IRQHandler+0x1d0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002964:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002968:	f7fe f97a 	bl	8000c60 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800296c:	2302      	movs	r3, #2
 800296e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002970:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002974:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8002978:	1ac9      	subs	r1, r1, r3
 800297a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ff00 	bl	8002782 <HAL_UARTEx_RxEventCallback>
 8002982:	e79d      	b.n	80028c0 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002984:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8002988:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800298c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8002990:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002992:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8002994:	2800      	cmp	r0, #0
 8002996:	d093      	beq.n	80028c0 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002998:	1a89      	subs	r1, r1, r2
 800299a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800299c:	2900      	cmp	r1, #0
 800299e:	d08f      	beq.n	80028c0 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a8:	e843 2000 	strex	r0, r2, [r3]
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d1f7      	bne.n	80029a0 <HAL_UART_IRQHandler+0x21c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029b0:	4d31      	ldr	r5, [pc, #196]	; (8002a78 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	f103 0208 	add.w	r2, r3, #8
 80029b6:	e852 2f00 	ldrex	r2, [r2]
 80029ba:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029bc:	f103 0608 	add.w	r6, r3, #8
 80029c0:	e846 2000 	strex	r0, r2, [r6]
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d1f4      	bne.n	80029b2 <HAL_UART_IRQHandler+0x22e>
        huart->RxState = HAL_UART_STATE_READY;
 80029c8:	2220      	movs	r2, #32
 80029ca:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80029ce:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	e843 2000 	strex	r0, r2, [r3]
 80029de:	2800      	cmp	r0, #0
 80029e0:	d1f7      	bne.n	80029d2 <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e2:	2302      	movs	r3, #2
 80029e4:	6723      	str	r3, [r4, #112]	; 0x70
 80029e6:	e7c9      	b.n	800297c <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029e8:	02cf      	lsls	r7, r1, #11
 80029ea:	d509      	bpl.n	8002a00 <HAL_UART_IRQHandler+0x27c>
 80029ec:	026e      	lsls	r6, r5, #9
 80029ee:	d507      	bpl.n	8002a00 <HAL_UART_IRQHandler+0x27c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80029f4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80029fc:	f000 bdfa 	b.w	80035f4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a00:	0608      	lsls	r0, r1, #24
 8002a02:	d50b      	bpl.n	8002a1c <HAL_UART_IRQHandler+0x298>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a04:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a08:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8002a0c:	4328      	orrs	r0, r5
 8002a0e:	d005      	beq.n	8002a1c <HAL_UART_IRQHandler+0x298>
    if (huart->TxISR != NULL)
 8002a10:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f43f af54 	beq.w	80028c0 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	e6cc      	b.n	80027b6 <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a1c:	064f      	lsls	r7, r1, #25
 8002a1e:	d511      	bpl.n	8002a44 <HAL_UART_IRQHandler+0x2c0>
 8002a20:	0656      	lsls	r6, r2, #25
 8002a22:	d50f      	bpl.n	8002a44 <HAL_UART_IRQHandler+0x2c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	e843 2100 	strex	r1, r2, [r3]
 8002a30:	2900      	cmp	r1, #0
 8002a32:	d1f7      	bne.n	8002a24 <HAL_UART_IRQHandler+0x2a0>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a34:	2320      	movs	r3, #32
 8002a36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a3a:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff fe95 	bl	800276c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a42:	e73d      	b.n	80028c0 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a44:	020d      	lsls	r5, r1, #8
 8002a46:	d506      	bpl.n	8002a56 <HAL_UART_IRQHandler+0x2d2>
 8002a48:	0050      	lsls	r0, r2, #1
 8002a4a:	d504      	bpl.n	8002a56 <HAL_UART_IRQHandler+0x2d2>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a4c:	4620      	mov	r0, r4
}
 8002a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a52:	f000 bdd1 	b.w	80035f8 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a56:	01cb      	lsls	r3, r1, #7
 8002a58:	f57f af32 	bpl.w	80028c0 <HAL_UART_IRQHandler+0x13c>
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	f6bf af2f 	bge.w	80028c0 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a62:	4620      	mov	r0, r4
}
 8002a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a68:	f000 bdc5 	b.w	80035f6 <HAL_UARTEx_RxFifoFullCallback>
 8002a6c:	10000001 	.word	0x10000001
 8002a70:	04000120 	.word	0x04000120
 8002a74:	0800276f 	.word	0x0800276f
 8002a78:	effffffe 	.word	0xeffffffe

08002a7c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a7c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 8002a80:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a84:	2a22      	cmp	r2, #34	; 0x22
{
 8002a86:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a88:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a8a:	d155      	bne.n	8002b38 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002a8e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002a90:	400b      	ands	r3, r1
 8002a92:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8002a94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a96:	3301      	adds	r3, #1
 8002a98:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002a9a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002aa6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d142      	bne.n	8002b36 <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ab0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	e852 3f00 	ldrex	r3, [r2]
 8002ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	2900      	cmp	r1, #0
 8002ac2:	d1f5      	bne.n	8002ab0 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	f103 0208 	add.w	r2, r3, #8
 8002ac8:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002acc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	f103 0c08 	add.w	ip, r3, #8
 8002ad4:	e84c 2100 	strex	r1, r2, [ip]
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	d1f3      	bne.n	8002ac4 <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002adc:	2220      	movs	r2, #32
 8002ade:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <UART_RxISR_8BIT+0xc8>)
      huart->RxISR = NULL;
 8002ae4:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ae6:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae8:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002aea:	d105      	bne.n	8002af8 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aec:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002aee:	2a01      	cmp	r2, #1
 8002af0:	d00e      	beq.n	8002b10 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002af2:	f7fd ff69 	bl	80009c8 <HAL_UART_RxCpltCallback>
 8002af6:	e01e      	b.n	8002b36 <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	0211      	lsls	r1, r2, #8
 8002afc:	d5f6      	bpl.n	8002aec <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afe:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b02:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	e843 2100 	strex	r1, r2, [r3]
 8002b0a:	2900      	cmp	r1, #0
 8002b0c:	d1f7      	bne.n	8002afe <UART_RxISR_8BIT+0x82>
 8002b0e:	e7ed      	b.n	8002aec <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b10:	2200      	movs	r2, #0
 8002b12:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	e843 2100 	strex	r1, r2, [r3]
 8002b20:	2900      	cmp	r1, #0
 8002b22:	d1f7      	bne.n	8002b14 <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002b24:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b26:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002b2a:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b2c:	bf44      	itt	mi
 8002b2e:	2210      	movmi	r2, #16
 8002b30:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b32:	f7ff fe26 	bl	8002782 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002b36:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	619a      	str	r2, [r3, #24]
}
 8002b40:	e7f9      	b.n	8002b36 <UART_RxISR_8BIT+0xba>
 8002b42:	bf00      	nop
 8002b44:	40008000 	.word	0x40008000

08002b48 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b48:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 8002b4c:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b50:	2a22      	cmp	r2, #34	; 0x22
{
 8002b52:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b54:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b56:	d152      	bne.n	8002bfe <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002b5a:	4011      	ands	r1, r2
 8002b5c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002b5e:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8002b62:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002b64:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002b70:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002b74:	b292      	uxth	r2, r2
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d140      	bne.n	8002bfc <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	e843 2100 	strex	r1, r2, [r3]
 8002b86:	2900      	cmp	r1, #0
 8002b88:	d1f7      	bne.n	8002b7a <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	f103 0208 	add.w	r2, r3, #8
 8002b8e:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	f103 0c08 	add.w	ip, r3, #8
 8002b9a:	e84c 2100 	strex	r1, r2, [ip]
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	d1f3      	bne.n	8002b8a <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ba8:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <UART_RxISR_16BIT+0xc0>)
      huart->RxISR = NULL;
 8002baa:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002bac:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bae:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002bb0:	d105      	bne.n	8002bbe <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002bb4:	2a01      	cmp	r2, #1
 8002bb6:	d00e      	beq.n	8002bd6 <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bb8:	f7fd ff06 	bl	80009c8 <HAL_UART_RxCpltCallback>
 8002bbc:	e01e      	b.n	8002bfc <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	0211      	lsls	r1, r2, #8
 8002bc2:	d5f6      	bpl.n	8002bb2 <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bc8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	e843 2100 	strex	r1, r2, [r3]
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d1f7      	bne.n	8002bc4 <UART_RxISR_16BIT+0x7c>
 8002bd4:	e7ed      	b.n	8002bb2 <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bde:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	e843 2100 	strex	r1, r2, [r3]
 8002be6:	2900      	cmp	r1, #0
 8002be8:	d1f7      	bne.n	8002bda <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bea:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bec:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bf0:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bf2:	bf44      	itt	mi
 8002bf4:	2210      	movmi	r2, #16
 8002bf6:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bf8:	f7ff fdc3 	bl	8002782 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002bfc:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f042 0208 	orr.w	r2, r2, #8
 8002c04:	619a      	str	r2, [r3, #24]
}
 8002c06:	e7f9      	b.n	8002bfc <UART_RxISR_16BIT+0xb4>
 8002c08:	40008000 	.word	0x40008000

08002c0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002c10:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8002c12:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002c16:	69df      	ldr	r7, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002c18:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002c1a:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c1c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002c20:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c22:	2922      	cmp	r1, #34	; 0x22
{
 8002c24:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c26:	f040 80b4 	bne.w	8002d92 <UART_RxISR_8BIT_FIFOEN+0x186>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002c2a:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c2e:	f8df a170 	ldr.w	sl, [pc, #368]	; 8002da0 <UART_RxISR_8BIT_FIFOEN+0x194>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c32:	f8df b170 	ldr.w	fp, [pc, #368]	; 8002da4 <UART_RxISR_8BIT_FIFOEN+0x198>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c36:	2600      	movs	r6, #0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002c38:	f1b9 0f00 	cmp.w	r9, #0
 8002c3c:	d001      	beq.n	8002c42 <UART_RxISR_8BIT_FIFOEN+0x36>
 8002c3e:	06bb      	lsls	r3, r7, #26
 8002c40:	d421      	bmi.n	8002c86 <UART_RxISR_8BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002c42:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002c46:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002c48:	b1d3      	cbz	r3, 8002c80 <UART_RxISR_8BIT_FIFOEN+0x74>
 8002c4a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d916      	bls.n	8002c80 <UART_RxISR_8BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002c52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	f102 0308 	add.w	r3, r2, #8
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	3208      	adds	r2, #8
 8002c62:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	2900      	cmp	r1, #0
 8002c6a:	d1f2      	bne.n	8002c52 <UART_RxISR_8BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <UART_RxISR_8BIT_FIFOEN+0x190>)
 8002c6e:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002c74:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	e842 3100 	strex	r1, r3, [r2]
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	d1f7      	bne.n	8002c70 <UART_RxISR_8BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c80:	b003      	add	sp, #12
 8002c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c86:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c88:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c8c:	ea03 0308 	and.w	r3, r3, r8
 8002c90:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c94:	3301      	adds	r3, #1
 8002c96:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002c98:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002ca8:	0778      	lsls	r0, r7, #29
 8002caa:	d02c      	beq.n	8002d06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cac:	07f9      	lsls	r1, r7, #31
 8002cae:	d50a      	bpl.n	8002cc6 <UART_RxISR_8BIT_FIFOEN+0xba>
 8002cb0:	9a01      	ldr	r2, [sp, #4]
 8002cb2:	05d2      	lsls	r2, r2, #23
 8002cb4:	d507      	bpl.n	8002cc6 <UART_RxISR_8BIT_FIFOEN+0xba>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cba:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002cbe:	f041 0101 	orr.w	r1, r1, #1
 8002cc2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cc6:	07b8      	lsls	r0, r7, #30
 8002cc8:	d509      	bpl.n	8002cde <UART_RxISR_8BIT_FIFOEN+0xd2>
 8002cca:	07e9      	lsls	r1, r5, #31
 8002ccc:	d507      	bpl.n	8002cde <UART_RxISR_8BIT_FIFOEN+0xd2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cce:	2102      	movs	r1, #2
 8002cd0:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002cd6:	f041 0104 	orr.w	r1, r1, #4
 8002cda:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cde:	077a      	lsls	r2, r7, #29
 8002ce0:	d509      	bpl.n	8002cf6 <UART_RxISR_8BIT_FIFOEN+0xea>
 8002ce2:	07e8      	lsls	r0, r5, #31
 8002ce4:	d507      	bpl.n	8002cf6 <UART_RxISR_8BIT_FIFOEN+0xea>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cf6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002cfa:	b123      	cbz	r3, 8002d06 <UART_RxISR_8BIT_FIFOEN+0xfa>
          HAL_UART_ErrorCallback(huart);
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7fd fe61 	bl	80009c4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8002d06:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d193      	bne.n	8002c38 <UART_RxISR_8BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d10:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	e851 3f00 	ldrex	r3, [r1]
 8002d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d1f5      	bne.n	8002d10 <UART_RxISR_8BIT_FIFOEN+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	f103 0208 	add.w	r2, r3, #8
 8002d28:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d2c:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	e842 1000 	strex	r0, r1, [r2]
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d1f5      	bne.n	8002d24 <UART_RxISR_8BIT_FIFOEN+0x118>
        huart->RxState = HAL_UART_STATE_READY;
 8002d38:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d3a:	455b      	cmp	r3, fp
        huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8002d40:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d42:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d44:	d00a      	beq.n	8002d5c <UART_RxISR_8BIT_FIFOEN+0x150>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	0209      	lsls	r1, r1, #8
 8002d4a:	d507      	bpl.n	8002d5c <UART_RxISR_8BIT_FIFOEN+0x150>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d50:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	e843 1000 	strex	r0, r1, [r3]
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d1f7      	bne.n	8002d4c <UART_RxISR_8BIT_FIFOEN+0x140>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002d5e:	2901      	cmp	r1, #1
 8002d60:	d113      	bne.n	8002d8a <UART_RxISR_8BIT_FIFOEN+0x17e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	e843 1000 	strex	r0, r1, [r3]
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d1f7      	bne.n	8002d64 <UART_RxISR_8BIT_FIFOEN+0x158>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d74:	69d9      	ldr	r1, [r3, #28]
 8002d76:	06ca      	lsls	r2, r1, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d78:	bf44      	itt	mi
 8002d7a:	2110      	movmi	r1, #16
 8002d7c:	6219      	strmi	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8002d84:	f7ff fcfd 	bl	8002782 <HAL_UARTEx_RxEventCallback>
 8002d88:	e756      	b.n	8002c38 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7fd fe1c 	bl	80009c8 <HAL_UART_RxCpltCallback>
 8002d90:	e752      	b.n	8002c38 <UART_RxISR_8BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	f042 0208 	orr.w	r2, r2, #8
 8002d98:	619a      	str	r2, [r3, #24]
}
 8002d9a:	e771      	b.n	8002c80 <UART_RxISR_8BIT_FIFOEN+0x74>
 8002d9c:	08002a7d 	.word	0x08002a7d
 8002da0:	effffffe 	.word	0xeffffffe
 8002da4:	40008000 	.word	0x40008000

08002da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002dac:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8002dae:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002db2:	69df      	ldr	r7, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002db4:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002db6:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002db8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002dbc:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dbe:	2922      	cmp	r1, #34	; 0x22
{
 8002dc0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dc2:	f040 80b2 	bne.w	8002f2a <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002dc6:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dca:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8002f38 <UART_RxISR_16BIT_FIFOEN+0x190>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002dce:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8002f3c <UART_RxISR_16BIT_FIFOEN+0x194>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	2600      	movs	r6, #0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002dd4:	f1b9 0f00 	cmp.w	r9, #0
 8002dd8:	d001      	beq.n	8002dde <UART_RxISR_16BIT_FIFOEN+0x36>
 8002dda:	06bb      	lsls	r3, r7, #26
 8002ddc:	d421      	bmi.n	8002e22 <UART_RxISR_16BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002dde:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002de2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002de4:	b1d3      	cbz	r3, 8002e1c <UART_RxISR_16BIT_FIFOEN+0x74>
 8002de6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d916      	bls.n	8002e1c <UART_RxISR_16BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002dee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	f102 0308 	add.w	r3, r2, #8
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	3208      	adds	r2, #8
 8002dfe:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	2900      	cmp	r1, #0
 8002e06:	d1f2      	bne.n	8002dee <UART_RxISR_16BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002e08:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <UART_RxISR_16BIT_FIFOEN+0x18c>)
 8002e0a:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002e10:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	e842 3100 	strex	r1, r3, [r2]
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d1f7      	bne.n	8002e0c <UART_RxISR_16BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e1c:	b003      	add	sp, #12
 8002e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e22:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002e24:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e26:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8002e28:	ea08 0101 	and.w	r1, r8, r1
 8002e2c:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8002e30:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002e32:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8002e36:	3a01      	subs	r2, #1
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8002e3e:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e40:	0778      	lsls	r0, r7, #29
 8002e42:	d02c      	beq.n	8002e9e <UART_RxISR_16BIT_FIFOEN+0xf6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e44:	07f9      	lsls	r1, r7, #31
 8002e46:	d50a      	bpl.n	8002e5e <UART_RxISR_16BIT_FIFOEN+0xb6>
 8002e48:	9a01      	ldr	r2, [sp, #4]
 8002e4a:	05d2      	lsls	r2, r2, #23
 8002e4c:	d507      	bpl.n	8002e5e <UART_RxISR_16BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e52:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002e56:	f041 0101 	orr.w	r1, r1, #1
 8002e5a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e5e:	07b8      	lsls	r0, r7, #30
 8002e60:	d509      	bpl.n	8002e76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8002e62:	07e9      	lsls	r1, r5, #31
 8002e64:	d507      	bpl.n	8002e76 <UART_RxISR_16BIT_FIFOEN+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e66:	2102      	movs	r1, #2
 8002e68:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e6a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002e6e:	f041 0104 	orr.w	r1, r1, #4
 8002e72:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e76:	077a      	lsls	r2, r7, #29
 8002e78:	d509      	bpl.n	8002e8e <UART_RxISR_16BIT_FIFOEN+0xe6>
 8002e7a:	07e8      	lsls	r0, r5, #31
 8002e7c:	d507      	bpl.n	8002e8e <UART_RxISR_16BIT_FIFOEN+0xe6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e7e:	2104      	movs	r1, #4
 8002e80:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e92:	b123      	cbz	r3, 8002e9e <UART_RxISR_16BIT_FIFOEN+0xf6>
          HAL_UART_ErrorCallback(huart);
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7fd fd95 	bl	80009c4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8002e9e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d195      	bne.n	8002dd4 <UART_RxISR_16BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ea8:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	e851 3f00 	ldrex	r3, [r1]
 8002eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d1f5      	bne.n	8002ea8 <UART_RxISR_16BIT_FIFOEN+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f103 0208 	add.w	r2, r3, #8
 8002ec0:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ec4:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	e842 1000 	strex	r0, r1, [r2]
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d1f5      	bne.n	8002ebc <UART_RxISR_16BIT_FIFOEN+0x114>
        huart->RxState = HAL_UART_STATE_READY;
 8002ed0:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ed2:	455b      	cmp	r3, fp
        huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8002ed8:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eda:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002edc:	d00a      	beq.n	8002ef4 <UART_RxISR_16BIT_FIFOEN+0x14c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	0209      	lsls	r1, r1, #8
 8002ee2:	d507      	bpl.n	8002ef4 <UART_RxISR_16BIT_FIFOEN+0x14c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ee8:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	e843 1000 	strex	r0, r1, [r3]
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d1f7      	bne.n	8002ee4 <UART_RxISR_16BIT_FIFOEN+0x13c>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002ef6:	2901      	cmp	r1, #1
 8002ef8:	d113      	bne.n	8002f22 <UART_RxISR_16BIT_FIFOEN+0x17a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efa:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f00:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	e843 1000 	strex	r0, r1, [r3]
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d1f7      	bne.n	8002efc <UART_RxISR_16BIT_FIFOEN+0x154>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002f0c:	69d9      	ldr	r1, [r3, #28]
 8002f0e:	06ca      	lsls	r2, r1, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f10:	bf44      	itt	mi
 8002f12:	2110      	movmi	r1, #16
 8002f14:	6219      	strmi	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f16:	4620      	mov	r0, r4
 8002f18:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8002f1c:	f7ff fc31 	bl	8002782 <HAL_UARTEx_RxEventCallback>
 8002f20:	e758      	b.n	8002dd4 <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7fd fd50 	bl	80009c8 <HAL_UART_RxCpltCallback>
 8002f28:	e754      	b.n	8002dd4 <UART_RxISR_16BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	f042 0208 	orr.w	r2, r2, #8
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	e773      	b.n	8002e1c <UART_RxISR_16BIT_FIFOEN+0x74>
 8002f34:	08002b49 	.word	0x08002b49
 8002f38:	effffffe 	.word	0xeffffffe
 8002f3c:	40008000 	.word	0x40008000

08002f40 <UART_SetConfig>:
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f44:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f46:	6921      	ldr	r1, [r4, #16]
 8002f48:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f4a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f4c:	69c0      	ldr	r0, [r0, #28]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	6961      	ldr	r1, [r4, #20]
 8002f52:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f54:	49a0      	ldr	r1, [pc, #640]	; (80031d8 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f56:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f58:	4029      	ands	r1, r5
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68e1      	ldr	r1, [r4, #12]
 8002f62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f6a:	4a9c      	ldr	r2, [pc, #624]	; (80031dc <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f6e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8002f70:	bf1c      	itt	ne
 8002f72:	6a22      	ldrne	r2, [r4, #32]
 8002f74:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8002f7c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f88:	f022 020f 	bic.w	r2, r2, #15
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f90:	4a93      	ldr	r2, [pc, #588]	; (80031e0 <UART_SetConfig+0x2a0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d11b      	bne.n	8002fce <UART_SetConfig+0x8e>
 8002f96:	4b93      	ldr	r3, [pc, #588]	; (80031e4 <UART_SetConfig+0x2a4>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	f200 80e4 	bhi.w	8003170 <UART_SetConfig+0x230>
 8002fa8:	4a8f      	ldr	r2, [pc, #572]	; (80031e8 <UART_SetConfig+0x2a8>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002fb0:	f040 80ab 	bne.w	800310a <UART_SetConfig+0x1ca>
    switch (clocksource)
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d826      	bhi.n	8003006 <UART_SetConfig+0xc6>
 8002fb8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002fbc:	00dd00ee 	.word	0x00dd00ee
 8002fc0:	002500a5 	.word	0x002500a5
 8002fc4:	002500e3 	.word	0x002500e3
 8002fc8:	00250025 	.word	0x00250025
 8002fcc:	00f2      	.short	0x00f2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fce:	4a87      	ldr	r2, [pc, #540]	; (80031ec <UART_SetConfig+0x2ac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d106      	bne.n	8002fe2 <UART_SetConfig+0xa2>
 8002fd4:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <UART_SetConfig+0x2a4>)
 8002fd6:	4a86      	ldr	r2, [pc, #536]	; (80031f0 <UART_SetConfig+0x2b0>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	e7e3      	b.n	8002faa <UART_SetConfig+0x6a>
 8002fe2:	4a84      	ldr	r2, [pc, #528]	; (80031f4 <UART_SetConfig+0x2b4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d119      	bne.n	800301c <UART_SetConfig+0xdc>
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <UART_SetConfig+0x2a4>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	f000 80c8 	beq.w	8003188 <UART_SetConfig+0x248>
 8002ff8:	d807      	bhi.n	800300a <UART_SetConfig+0xca>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80c9 	beq.w	8003192 <UART_SetConfig+0x252>
 8003000:	2b10      	cmp	r3, #16
 8003002:	f000 80bb 	beq.w	800317c <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003006:	2001      	movs	r0, #1
 8003008:	e04e      	b.n	80030a8 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300a:	2b30      	cmp	r3, #48	; 0x30
 800300c:	d1fb      	bne.n	8003006 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003012:	f000 80c5 	beq.w	80031a0 <UART_SetConfig+0x260>
 8003016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800301a:	e093      	b.n	8003144 <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301c:	4a76      	ldr	r2, [pc, #472]	; (80031f8 <UART_SetConfig+0x2b8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10f      	bne.n	8003042 <UART_SetConfig+0x102>
 8003022:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <UART_SetConfig+0x2a4>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	f000 80ab 	beq.w	8003188 <UART_SetConfig+0x248>
 8003032:	d804      	bhi.n	800303e <UART_SetConfig+0xfe>
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80ac 	beq.w	8003192 <UART_SetConfig+0x252>
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	e7e1      	b.n	8003002 <UART_SetConfig+0xc2>
 800303e:	2bc0      	cmp	r3, #192	; 0xc0
 8003040:	e7e4      	b.n	800300c <UART_SetConfig+0xcc>
 8003042:	4a6e      	ldr	r2, [pc, #440]	; (80031fc <UART_SetConfig+0x2bc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d112      	bne.n	800306e <UART_SetConfig+0x12e>
 8003048:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <UART_SetConfig+0x2a4>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003056:	f000 8097 	beq.w	8003188 <UART_SetConfig+0x248>
 800305a:	d805      	bhi.n	8003068 <UART_SetConfig+0x128>
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8098 	beq.w	8003192 <UART_SetConfig+0x252>
 8003062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003066:	e7cc      	b.n	8003002 <UART_SetConfig+0xc2>
 8003068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800306c:	e7ce      	b.n	800300c <UART_SetConfig+0xcc>
 800306e:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <UART_SetConfig+0x29c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d1c8      	bne.n	8003006 <UART_SetConfig+0xc6>
 8003074:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <UART_SetConfig+0x2a4>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003082:	d018      	beq.n	80030b6 <UART_SetConfig+0x176>
 8003084:	d806      	bhi.n	8003094 <UART_SetConfig+0x154>
 8003086:	b15b      	cbz	r3, 80030a0 <UART_SetConfig+0x160>
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d1bb      	bne.n	8003006 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 800308e:	f7fe ffc5 	bl	800201c <HAL_RCC_GetSysClockFreq>
        break;
 8003092:	e007      	b.n	80030a4 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003098:	d1b5      	bne.n	8003006 <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800309e:	e00b      	b.n	80030b8 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7ff f8e6 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80030a4:	b940      	cbnz	r0, 80030b8 <UART_SetConfig+0x178>
 80030a6:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80030a8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80030ac:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80030ae:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80030b0:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 80030b6:	4852      	ldr	r0, [pc, #328]	; (8003200 <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030b8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030ba:	4b52      	ldr	r3, [pc, #328]	; (8003204 <UART_SetConfig+0x2c4>)
 80030bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030be:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80030c6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ca:	4299      	cmp	r1, r3
 80030cc:	d89b      	bhi.n	8003006 <UART_SetConfig+0xc6>
 80030ce:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80030d2:	d898      	bhi.n	8003006 <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030d4:	2300      	movs	r3, #0
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7fd f89e 	bl	8000218 <__aeabi_uldivmod>
 80030dc:	0209      	lsls	r1, r1, #8
 80030de:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80030e2:	086b      	lsrs	r3, r5, #1
 80030e4:	0200      	lsls	r0, r0, #8
 80030e6:	18c0      	adds	r0, r0, r3
 80030e8:	462a      	mov	r2, r5
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f141 0100 	adc.w	r1, r1, #0
 80030f2:	f7fd f891 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <UART_SetConfig+0x2c8>)
 80030f8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d882      	bhi.n	8003006 <UART_SetConfig+0xc6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	60d8      	str	r0, [r3, #12]
 8003104:	e7cf      	b.n	80030a6 <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 8003106:	483e      	ldr	r0, [pc, #248]	; (8003200 <UART_SetConfig+0x2c0>)
 8003108:	e04a      	b.n	80031a0 <UART_SetConfig+0x260>
    switch (clocksource)
 800310a:	2b08      	cmp	r3, #8
 800310c:	f63f af7b 	bhi.w	8003006 <UART_SetConfig+0xc6>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0x1d8>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003165 	.word	0x08003165
 8003120:	0800318f 	.word	0x0800318f
 8003124:	08003007 	.word	0x08003007
 8003128:	0800316b 	.word	0x0800316b
 800312c:	08003007 	.word	0x08003007
 8003130:	08003007 	.word	0x08003007
 8003134:	08003007 	.word	0x08003007
 8003138:	08003017 	.word	0x08003017
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f898 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003140:	2800      	cmp	r0, #0
 8003142:	d0b0      	beq.n	80030a6 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003148:	4a2e      	ldr	r2, [pc, #184]	; (8003204 <UART_SetConfig+0x2c4>)
 800314a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800314e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003152:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003156:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800315e:	f1a0 0210 	sub.w	r2, r0, #16
 8003162:	e7cb      	b.n	80030fc <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7ff f896 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
        break;
 8003168:	e7ea      	b.n	8003140 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7fe ff57 	bl	800201c <HAL_RCC_GetSysClockFreq>
        break;
 800316e:	e7e7      	b.n	8003140 <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003170:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003174:	d1f6      	bne.n	8003164 <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003176:	f7ff f88d 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
        break;
 800317a:	e00f      	b.n	800319c <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003180:	d1f3      	bne.n	800316a <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7fe ff4b 	bl	800201c <HAL_RCC_GetSysClockFreq>
        break;
 8003186:	e009      	b.n	800319c <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003188:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800318c:	d0bb      	beq.n	8003106 <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 800318e:	481c      	ldr	r0, [pc, #112]	; (8003200 <UART_SetConfig+0x2c0>)
 8003190:	e7d8      	b.n	8003144 <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003192:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003196:	d1d1      	bne.n	800313c <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003198:	f7ff f86a 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800319c:	2800      	cmp	r0, #0
 800319e:	d082      	beq.n	80030a6 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a0:	6861      	ldr	r1, [r4, #4]
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <UART_SetConfig+0x2c4>)
 80031a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80031aa:	fbb0 f2f2 	udiv	r2, r0, r2
 80031ae:	084b      	lsrs	r3, r1, #1
 80031b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b4:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031b8:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031bc:	f1a3 0110 	sub.w	r1, r3, #16
 80031c0:	4291      	cmp	r1, r2
 80031c2:	f63f af20 	bhi.w	8003006 <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c6:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80031ca:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031cc:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ce:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60cb      	str	r3, [r1, #12]
 80031d6:	e766      	b.n	80030a6 <UART_SetConfig+0x166>
 80031d8:	cfff69f3 	.word	0xcfff69f3
 80031dc:	40008000 	.word	0x40008000
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08004830 	.word	0x08004830
 80031ec:	40004400 	.word	0x40004400
 80031f0:	08004833 	.word	0x08004833
 80031f4:	40004800 	.word	0x40004800
 80031f8:	40004c00 	.word	0x40004c00
 80031fc:	40005000 	.word	0x40005000
 8003200:	00f42400 	.word	0x00f42400
 8003204:	08004840 	.word	0x08004840
 8003208:	000ffcff 	.word	0x000ffcff

0800320c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800320c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800320e:	071a      	lsls	r2, r3, #28
{
 8003210:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003212:	d506      	bpl.n	8003222 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003214:	6801      	ldr	r1, [r0, #0]
 8003216:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003218:	684a      	ldr	r2, [r1, #4]
 800321a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800321e:	4322      	orrs	r2, r4
 8003220:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003222:	07dc      	lsls	r4, r3, #31
 8003224:	d506      	bpl.n	8003234 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003226:	6801      	ldr	r1, [r0, #0]
 8003228:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800322a:	684a      	ldr	r2, [r1, #4]
 800322c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003230:	4322      	orrs	r2, r4
 8003232:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003234:	0799      	lsls	r1, r3, #30
 8003236:	d506      	bpl.n	8003246 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003238:	6801      	ldr	r1, [r0, #0]
 800323a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003242:	4322      	orrs	r2, r4
 8003244:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003246:	075a      	lsls	r2, r3, #29
 8003248:	d506      	bpl.n	8003258 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800324a:	6801      	ldr	r1, [r0, #0]
 800324c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800324e:	684a      	ldr	r2, [r1, #4]
 8003250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003254:	4322      	orrs	r2, r4
 8003256:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003258:	06dc      	lsls	r4, r3, #27
 800325a:	d506      	bpl.n	800326a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800325c:	6801      	ldr	r1, [r0, #0]
 800325e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003260:	688a      	ldr	r2, [r1, #8]
 8003262:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003266:	4322      	orrs	r2, r4
 8003268:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326a:	0699      	lsls	r1, r3, #26
 800326c:	d506      	bpl.n	800327c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800326e:	6801      	ldr	r1, [r0, #0]
 8003270:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003272:	688a      	ldr	r2, [r1, #8]
 8003274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003278:	4322      	orrs	r2, r4
 800327a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800327c:	065a      	lsls	r2, r3, #25
 800327e:	d50f      	bpl.n	80032a0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003280:	6801      	ldr	r1, [r0, #0]
 8003282:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003284:	684a      	ldr	r2, [r1, #4]
 8003286:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800328a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800328c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003290:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003292:	d105      	bne.n	80032a0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003294:	684a      	ldr	r2, [r1, #4]
 8003296:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003298:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800329c:	4322      	orrs	r2, r4
 800329e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	d506      	bpl.n	80032b2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032a4:	6802      	ldr	r2, [r0, #0]
 80032a6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80032a8:	6853      	ldr	r3, [r2, #4]
 80032aa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6053      	str	r3, [r2, #4]
}
 80032b2:	bd10      	pop	{r4, pc}

080032b4 <UART_WaitOnFlagUntilTimeout>:
{
 80032b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	4617      	mov	r7, r2
 80032c2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	69d3      	ldr	r3, [r2, #28]
 80032c8:	ea35 0303 	bics.w	r3, r5, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	42bb      	cmp	r3, r7
 80032d4:	d001      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80032d6:	2000      	movs	r0, #0
 80032d8:	e022      	b.n	8003320 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80032da:	f1b9 3fff 	cmp.w	r9, #4294967295
 80032de:	d0f2      	beq.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fd fc3e 	bl	8000b60 <HAL_GetTick>
 80032e4:	eba0 0008 	sub.w	r0, r0, r8
 80032e8:	4548      	cmp	r0, r9
 80032ea:	d829      	bhi.n	8003340 <UART_WaitOnFlagUntilTimeout+0x8c>
 80032ec:	f1b9 0f00 	cmp.w	r9, #0
 80032f0:	d026      	beq.n	8003340 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f2:	6821      	ldr	r1, [r4, #0]
 80032f4:	680b      	ldr	r3, [r1, #0]
 80032f6:	075a      	lsls	r2, r3, #29
 80032f8:	d5e4      	bpl.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x10>
 80032fa:	2d80      	cmp	r5, #128	; 0x80
 80032fc:	d0e2      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x10>
 80032fe:	2d40      	cmp	r5, #64	; 0x40
 8003300:	d0e0      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003302:	69ce      	ldr	r6, [r1, #28]
 8003304:	f016 0608 	ands.w	r6, r6, #8
 8003308:	d00c      	beq.n	8003324 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800330a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800330c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800330e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003310:	f7ff fa00 	bl	8002714 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003314:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003316:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800331a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
          return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
}
 8003320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003324:	69cb      	ldr	r3, [r1, #28]
 8003326:	051b      	lsls	r3, r3, #20
 8003328:	d5cc      	bpl.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff f9ef 	bl	8002714 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003336:	2320      	movs	r3, #32
 8003338:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800333c:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 8003340:	2003      	movs	r0, #3
 8003342:	e7ed      	b.n	8003320 <UART_WaitOnFlagUntilTimeout+0x6c>

08003344 <UART_CheckIdleState>:
{
 8003344:	b530      	push	{r4, r5, lr}
 8003346:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	2500      	movs	r5, #0
{
 800334a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8003350:	f7fd fc06 	bl	8000b60 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800335a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800335c:	d51d      	bpl.n	800339a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800335e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003362:	9200      	str	r2, [sp, #0]
 8003364:	9003      	str	r0, [sp, #12]
 8003366:	462a      	mov	r2, r5
 8003368:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff ffa1 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	b188      	cbz	r0, 800339a <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003376:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	e852 3f00 	ldrex	r3, [r2]
 800337c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	e842 3100 	strex	r1, r3, [r2]
 8003384:	2900      	cmp	r1, #0
 8003386:	d1f6      	bne.n	8003376 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8003388:	2320      	movs	r3, #32
 800338a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800338e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003390:	2300      	movs	r3, #0
 8003392:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8003396:	b005      	add	sp, #20
 8003398:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	0752      	lsls	r2, r2, #29
 80033a0:	d523      	bpl.n	80033ea <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80033a6:	9200      	str	r2, [sp, #0]
 80033a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ac:	2200      	movs	r2, #0
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff ff80 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 80033b4:	b1c8      	cbz	r0, 80033ea <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	e852 3f00 	ldrex	r3, [r2]
 80033bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	2900      	cmp	r1, #0
 80033c8:	d1f5      	bne.n	80033b6 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	f102 0308 	add.w	r3, r2, #8
 80033ce:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	f102 0008 	add.w	r0, r2, #8
 80033da:	e840 3100 	strex	r1, r3, [r0]
 80033de:	2900      	cmp	r1, #0
 80033e0:	d1f3      	bne.n	80033ca <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 80033e2:	2320      	movs	r3, #32
 80033e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80033e8:	e7d1      	b.n	800338e <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 80033ea:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80033ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80033f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f8:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 80033fa:	e7c9      	b.n	8003390 <UART_CheckIdleState+0x4c>

080033fc <HAL_UART_Init>:
{
 80033fc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80033fe:	4604      	mov	r4, r0
 8003400:	b350      	cbz	r0, 8003458 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003406:	b91b      	cbnz	r3, 8003410 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003408:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800340c:	f7fd faf6 	bl	80009fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003410:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003412:	2324      	movs	r3, #36	; 0x24
 8003414:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8003418:	6813      	ldr	r3, [r2, #0]
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003420:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003422:	b113      	cbz	r3, 800342a <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8003424:	4620      	mov	r0, r4
 8003426:	f7ff fef1 	bl	800320c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800342a:	4620      	mov	r0, r4
 800342c:	f7ff fd88 	bl	8002f40 <UART_SetConfig>
 8003430:	2801      	cmp	r0, #1
 8003432:	d011      	beq.n	8003458 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003444:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800344c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800344e:	601a      	str	r2, [r3, #0]
}
 8003450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003454:	f7ff bf76 	b.w	8003344 <UART_CheckIdleState>
}
 8003458:	2001      	movs	r0, #1
 800345a:	bd10      	pop	{r4, pc}

0800345c <UART_Start_Receive_IT>:
{
 800345c:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 800345e:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 8003460:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8003462:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxISR       = NULL;
 8003466:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8003468:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 800346c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003470:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8003472:	d135      	bne.n	80034e0 <UART_Start_Receive_IT+0x84>
 8003474:	6903      	ldr	r3, [r0, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f240 13ff 	movw	r3, #511	; 0x1ff
 800347c:	bf18      	it	ne
 800347e:	23ff      	movne	r3, #255	; 0xff
 8003480:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800348a:	2322      	movs	r3, #34	; 0x22
 800348c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003490:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	f101 0308 	add.w	r3, r1, #8
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	3108      	adds	r1, #8
 80034a0:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 80034a4:	6803      	ldr	r3, [r0, #0]
 80034a6:	2c00      	cmp	r4, #0
 80034a8:	d1f2      	bne.n	8003490 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80034aa:	6e45      	ldr	r5, [r0, #100]	; 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	6884      	ldr	r4, [r0, #8]
 80034ae:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80034b0:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80034b4:	d134      	bne.n	8003520 <UART_Start_Receive_IT+0xc4>
 80034b6:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80034ba:	4295      	cmp	r5, r2
 80034bc:	d830      	bhi.n	8003520 <UART_Start_Receive_IT+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034be:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80034c2:	d11d      	bne.n	8003500 <UART_Start_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80034c4:	4a25      	ldr	r2, [pc, #148]	; (800355c <UART_Start_Receive_IT+0x100>)
 80034c6:	4c26      	ldr	r4, [pc, #152]	; (8003560 <UART_Start_Receive_IT+0x104>)
 80034c8:	2900      	cmp	r1, #0
 80034ca:	bf18      	it	ne
 80034cc:	4622      	movne	r2, r4
 80034ce:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80034d0:	b1c1      	cbz	r1, 8003504 <UART_Start_Receive_IT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 80034de:	e7f7      	b.n	80034d0 <UART_Start_Receive_IT+0x74>
  UART_MASK_COMPUTATION(huart);
 80034e0:	b929      	cbnz	r1, 80034ee <UART_Start_Receive_IT+0x92>
 80034e2:	6903      	ldr	r3, [r0, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	237f      	movne	r3, #127	; 0x7f
 80034ea:	23ff      	moveq	r3, #255	; 0xff
 80034ec:	e7c8      	b.n	8003480 <UART_Start_Receive_IT+0x24>
 80034ee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80034f2:	d1c5      	bne.n	8003480 <UART_Start_Receive_IT+0x24>
 80034f4:	6903      	ldr	r3, [r0, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	237f      	moveq	r3, #127	; 0x7f
 80034fc:	233f      	movne	r3, #63	; 0x3f
 80034fe:	e7bf      	b.n	8003480 <UART_Start_Receive_IT+0x24>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003500:	4a17      	ldr	r2, [pc, #92]	; (8003560 <UART_Start_Receive_IT+0x104>)
 8003502:	e7e4      	b.n	80034ce <UART_Start_Receive_IT+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	f103 0208 	add.w	r2, r3, #8
 8003508:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800350c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	f103 0008 	add.w	r0, r3, #8
 8003514:	e840 2100 	strex	r1, r2, [r0]
 8003518:	2900      	cmp	r1, #0
 800351a:	d1f3      	bne.n	8003504 <UART_Start_Receive_IT+0xa8>
}
 800351c:	2000      	movs	r0, #0
 800351e:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003520:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003524:	d10f      	bne.n	8003546 <UART_Start_Receive_IT+0xea>
      huart->RxISR = UART_RxISR_8BIT;
 8003526:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <UART_Start_Receive_IT+0x108>)
 8003528:	4c0f      	ldr	r4, [pc, #60]	; (8003568 <UART_Start_Receive_IT+0x10c>)
 800352a:	2900      	cmp	r1, #0
 800352c:	bf18      	it	ne
 800352e:	4622      	movne	r2, r4
 8003530:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003532:	b151      	cbz	r1, 800354a <UART_Start_Receive_IT+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003538:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	e843 2100 	strex	r1, r2, [r3]
 8003540:	2900      	cmp	r1, #0
 8003542:	d1f7      	bne.n	8003534 <UART_Start_Receive_IT+0xd8>
 8003544:	e7ea      	b.n	800351c <UART_Start_Receive_IT+0xc0>
      huart->RxISR = UART_RxISR_8BIT;
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <UART_Start_Receive_IT+0x10c>)
 8003548:	e7f2      	b.n	8003530 <UART_Start_Receive_IT+0xd4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800354e:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	e843 2100 	strex	r1, r2, [r3]
 8003556:	2900      	cmp	r1, #0
 8003558:	d1f7      	bne.n	800354a <UART_Start_Receive_IT+0xee>
 800355a:	e7df      	b.n	800351c <UART_Start_Receive_IT+0xc0>
 800355c:	08002da9 	.word	0x08002da9
 8003560:	08002c0d 	.word	0x08002c0d
 8003564:	08002b49 	.word	0x08002b49
 8003568:	08002a7d 	.word	0x08002a7d

0800356c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800356c:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003570:	2b20      	cmp	r3, #32
{
 8003572:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003574:	d115      	bne.n	80035a2 <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 8003576:	b1b9      	cbz	r1, 80035a8 <HAL_UART_Receive_IT+0x3c>
 8003578:	b1b2      	cbz	r2, 80035a8 <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800357c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_UART_Receive_IT+0x40>)
 8003582:	429c      	cmp	r4, r3
 8003584:	d00a      	beq.n	800359c <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	d507      	bpl.n	800359c <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	e844 3500 	strex	r5, r3, [r4]
 8003598:	2d00      	cmp	r5, #0
 800359a:	d1f7      	bne.n	800358c <HAL_UART_Receive_IT+0x20>
}
 800359c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800359e:	f7ff bf5d 	b.w	800345c <UART_Start_Receive_IT>
    return HAL_BUSY;
 80035a2:	2002      	movs	r0, #2
}
 80035a4:	bc30      	pop	{r4, r5}
 80035a6:	4770      	bx	lr
      return HAL_ERROR;
 80035a8:	2001      	movs	r0, #1
 80035aa:	e7fb      	b.n	80035a4 <HAL_UART_Receive_IT+0x38>
 80035ac:	40008000 	.word	0x40008000

080035b0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80035b2:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035b4:	b92b      	cbnz	r3, 80035c2 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80035bc:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035c0:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035c2:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035c4:	4d09      	ldr	r5, [pc, #36]	; (80035ec <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035c6:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035c8:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80035ca:	4c09      	ldr	r4, [pc, #36]	; (80035f0 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035cc:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035ce:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035d2:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80035d4:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035dc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035e0:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80035e2:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80035ea:	e7e7      	b.n	80035bc <UARTEx_SetNbDataToProcess+0xc>
 80035ec:	08004860 	.word	0x08004860
 80035f0:	08004858 	.word	0x08004858

080035f4 <HAL_UARTEx_WakeupCallback>:
}
 80035f4:	4770      	bx	lr

080035f6 <HAL_UARTEx_RxFifoFullCallback>:
 80035f6:	4770      	bx	lr

080035f8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80035f8:	4770      	bx	lr

080035fa <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80035fa:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d014      	beq.n	800362c <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003602:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003604:	2324      	movs	r3, #36	; 0x24
 8003606:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800360a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003614:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800361c:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800361e:	2220      	movs	r2, #32
 8003620:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003624:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8003628:	4618      	mov	r0, r3
 800362a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800362c:	2002      	movs	r0, #2
}
 800362e:	4770      	bx	lr

08003630 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003630:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003632:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003636:	2b01      	cmp	r3, #1
{
 8003638:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800363a:	d017      	beq.n	800366c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800363c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800363e:	2324      	movs	r3, #36	; 0x24
 8003640:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003644:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800364e:	68ab      	ldr	r3, [r5, #8]
 8003650:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003654:	4319      	orrs	r1, r3
 8003656:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003658:	f7ff ffaa 	bl	80035b0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800365c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800365e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003660:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003664:	2000      	movs	r0, #0
 8003666:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800366a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800366c:	2002      	movs	r0, #2
 800366e:	e7fc      	b.n	800366a <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08003670 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003670:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003672:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003676:	2b01      	cmp	r3, #1
{
 8003678:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800367a:	d017      	beq.n	80036ac <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800367c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800367e:	2324      	movs	r3, #36	; 0x24
 8003680:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003684:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800368e:	68ab      	ldr	r3, [r5, #8]
 8003690:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003694:	4319      	orrs	r1, r3
 8003696:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003698:	f7ff ff8a 	bl	80035b0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800369c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800369e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80036a4:	2000      	movs	r0, #0
 80036a6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80036ac:	2002      	movs	r0, #2
 80036ae:	e7fc      	b.n	80036aa <HAL_UARTEx_SetRxFifoThreshold+0x3a>

080036b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036b2:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80036b4:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036b6:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 80036ba:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80036be:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80036c2:	0424      	lsls	r4, r4, #16
{
 80036c4:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036c6:	462a      	mov	r2, r5
 80036c8:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80036ca:	2e03      	cmp	r6, #3
 80036cc:	d853      	bhi.n	8003776 <USB_ActivateEndpoint+0xc6>
 80036ce:	e8df f006 	tbb	[pc, r6]
 80036d2:	4f02      	.short	0x4f02
 80036d4:	4b4d      	.short	0x4b4d
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80036d6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80036da:	4630      	mov	r0, r6
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80036dc:	f248 0c80 	movw	ip, #32896	; 0x8080
 80036e0:	ea44 040c 	orr.w	r4, r4, ip
 80036e4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036e8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80036ec:	f8df e284 	ldr.w	lr, [pc, #644]	; 8003974 <USB_ActivateEndpoint+0x2c4>
 80036f0:	b2a4      	uxth	r4, r4
 80036f2:	ea04 040e 	and.w	r4, r4, lr
 80036f6:	432c      	orrs	r4, r5
 80036f8:	ea4c 0404 	orr.w	r4, ip, r4
 80036fc:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8003700:	7b0c      	ldrb	r4, [r1, #12]
 8003702:	eb03 07c5 	add.w	r7, r3, r5, lsl #3
 8003706:	2c00      	cmp	r4, #0
 8003708:	f040 8087 	bne.w	800381a <USB_ActivateEndpoint+0x16a>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800370c:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 800370e:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003712:	0864      	lsrs	r4, r4, #1
 8003714:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8003716:	f1bc 0f00 	cmp.w	ip, #0
 800371a:	d02e      	beq.n	800377a <USB_ActivateEndpoint+0xca>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800371c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003720:	fa17 f181 	uxtah	r1, r7, r1
 8003724:	f8a1 4400 	strh.w	r4, [r1, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003728:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800372c:	0649      	lsls	r1, r1, #25
 800372e:	d50a      	bpl.n	8003746 <USB_ActivateEndpoint+0x96>
 8003730:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003734:	b289      	uxth	r1, r1
 8003736:	ea01 010e 	and.w	r1, r1, lr
 800373a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800373e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003742:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003746:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800374a:	4c88      	ldr	r4, [pc, #544]	; (800396c <USB_ActivateEndpoint+0x2bc>)
 800374c:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 800374e:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003750:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003754:	d001      	beq.n	800375a <USB_ActivateEndpoint+0xaa>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003756:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800375a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800375e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003762:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8003766:	e0b8      	b.n	80038da <USB_ActivateEndpoint+0x22a>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003768:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800376c:	2000      	movs	r0, #0
      break;
 800376e:	e7b5      	b.n	80036dc <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003770:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8003774:	e7fa      	b.n	800376c <USB_ActivateEndpoint+0xbc>
  switch (ep->type)
 8003776:	2001      	movs	r0, #1
 8003778:	e7b0      	b.n	80036dc <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800377a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800377e:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003780:	fa17 f686 	uxtah	r6, r7, r6
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003784:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003786:	f8a6 4404 	strh.w	r4, [r6, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800378a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800378e:	fa17 f484 	uxtah	r4, r7, r4
 8003792:	f8b4 6406 	ldrh.w	r6, [r4, #1030]	; 0x406
 8003796:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800379a:	f8a4 6406 	strh.w	r6, [r4, #1030]	; 0x406
 800379e:	d92b      	bls.n	80037f8 <USB_ActivateEndpoint+0x148>
 80037a0:	094e      	lsrs	r6, r1, #5
 80037a2:	06cf      	lsls	r7, r1, #27
 80037a4:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 80037a8:	bf08      	it	eq
 80037aa:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80037ae:	b289      	uxth	r1, r1
 80037b0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80037b4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80037b8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80037bc:	b289      	uxth	r1, r1
 80037be:	f8a4 1406 	strh.w	r1, [r4, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037c2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80037c6:	044f      	lsls	r7, r1, #17
 80037c8:	d50d      	bpl.n	80037e6 <USB_ActivateEndpoint+0x136>
 80037ca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80037ce:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80037d2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80037d6:	0409      	lsls	r1, r1, #16
 80037d8:	0c09      	lsrs	r1, r1, #16
 80037da:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80037de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80037e2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037e6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80037ea:	4c61      	ldr	r4, [pc, #388]	; (8003970 <USB_ActivateEndpoint+0x2c0>)
 80037ec:	b289      	uxth	r1, r1
 80037ee:	4021      	ands	r1, r4
      if (ep->num == 0U)
 80037f0:	b985      	cbnz	r5, 8003814 <USB_ActivateEndpoint+0x164>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037f2:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80037f6:	e7b0      	b.n	800375a <USB_ActivateEndpoint+0xaa>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037f8:	b911      	cbnz	r1, 8003800 <USB_ActivateEndpoint+0x150>
 80037fa:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 80037fe:	e7d9      	b.n	80037b4 <USB_ActivateEndpoint+0x104>
 8003800:	084e      	lsrs	r6, r1, #1
 8003802:	07c9      	lsls	r1, r1, #31
 8003804:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 8003808:	bf48      	it	mi
 800380a:	3601      	addmi	r6, #1
 800380c:	b289      	uxth	r1, r1
 800380e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003812:	e7d3      	b.n	80037bc <USB_ActivateEndpoint+0x10c>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003814:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8003818:	e79f      	b.n	800375a <USB_ActivateEndpoint+0xaa>
    if (ep->type == EP_TYPE_BULK)
 800381a:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800381c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003820:	d15c      	bne.n	80038dc <USB_ActivateEndpoint+0x22c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003822:	b2a4      	uxth	r4, r4
 8003824:	ea04 040e 	and.w	r4, r4, lr
 8003828:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800382c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003830:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003834:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003838:	890c      	ldrh	r4, [r1, #8]
 800383a:	fa17 f585 	uxtah	r5, r7, r5
 800383e:	0864      	lsrs	r4, r4, #1
 8003840:	0064      	lsls	r4, r4, #1
 8003842:	f8a5 4400 	strh.w	r4, [r5, #1024]	; 0x400
 8003846:	894c      	ldrh	r4, [r1, #10]
 8003848:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800384c:	0864      	lsrs	r4, r4, #1
 800384e:	fa17 f585 	uxtah	r5, r7, r5
 8003852:	0064      	lsls	r4, r4, #1
 8003854:	f8a5 4404 	strh.w	r4, [r5, #1028]	; 0x404
    if (ep->is_in == 0U)
 8003858:	7849      	ldrb	r1, [r1, #1]
 800385a:	2900      	cmp	r1, #0
 800385c:	d149      	bne.n	80038f2 <USB_ActivateEndpoint+0x242>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800385e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003862:	044e      	lsls	r6, r1, #17
 8003864:	d50d      	bpl.n	8003882 <USB_ActivateEndpoint+0x1d2>
 8003866:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800386a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800386e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003872:	0409      	lsls	r1, r1, #16
 8003874:	0c09      	lsrs	r1, r1, #16
 8003876:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800387a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800387e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003882:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003886:	064d      	lsls	r5, r1, #25
 8003888:	d50d      	bpl.n	80038a6 <USB_ActivateEndpoint+0x1f6>
 800388a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800388e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003892:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003896:	0409      	lsls	r1, r1, #16
 8003898:	0c09      	lsrs	r1, r1, #16
 800389a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800389e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80038a2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038a6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80038aa:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80038ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80038b2:	0409      	lsls	r1, r1, #16
 80038b4:	0c09      	lsrs	r1, r1, #16
 80038b6:	f248 0480 	movw	r4, #32896	; 0x8080
 80038ba:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80038be:	4321      	orrs	r1, r4
 80038c0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038c4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80038c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80038cc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80038d0:	0409      	lsls	r1, r1, #16
 80038d2:	0c09      	lsrs	r1, r1, #16
 80038d4:	430c      	orrs	r4, r1
 80038d6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80038da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80038dc:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 80038e0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80038e4:	0424      	lsls	r4, r4, #16
 80038e6:	0c24      	lsrs	r4, r4, #16
 80038e8:	ea4c 0c04 	orr.w	ip, ip, r4
 80038ec:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
 80038f0:	e7a0      	b.n	8003834 <USB_ActivateEndpoint+0x184>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80038f6:	044c      	lsls	r4, r1, #17
 80038f8:	d50d      	bpl.n	8003916 <USB_ActivateEndpoint+0x266>
 80038fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80038fe:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003902:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003906:	0409      	lsls	r1, r1, #16
 8003908:	0c09      	lsrs	r1, r1, #16
 800390a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800390e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003912:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003916:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800391a:	0649      	lsls	r1, r1, #25
 800391c:	d50d      	bpl.n	800393a <USB_ActivateEndpoint+0x28a>
 800391e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003922:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003926:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800392a:	0409      	lsls	r1, r1, #16
 800392c:	0c09      	lsrs	r1, r1, #16
 800392e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003932:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003936:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800393a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800393e:	4c0b      	ldr	r4, [pc, #44]	; (800396c <USB_ActivateEndpoint+0x2bc>)
 8003940:	b289      	uxth	r1, r1
 8003942:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003944:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003946:	bf18      	it	ne
 8003948:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800394c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003950:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003954:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003958:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800395c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003960:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003964:	0409      	lsls	r1, r1, #16
 8003966:	0c09      	lsrs	r1, r1, #16
 8003968:	e6f7      	b.n	800375a <USB_ActivateEndpoint+0xaa>
 800396a:	bf00      	nop
 800396c:	ffff8fbf 	.word	0xffff8fbf
 8003970:	ffffbf8f 	.word	0xffffbf8f
 8003974:	ffff8f8f 	.word	0xffff8f8f

08003978 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003978:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800397a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800397c:	b18b      	cbz	r3, 80039a2 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800397e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800399e:	2000      	movs	r0, #0
 80039a0:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80039a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039b6:	e7ec      	b.n	8003992 <USB_EPSetStall+0x1a>

080039b8 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80039b8:	7b0b      	ldrb	r3, [r1, #12]
 80039ba:	bb3b      	cbnz	r3, 8003a0c <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80039bc:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039be:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80039c0:	b333      	cbz	r3, 8003a10 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039c6:	065b      	lsls	r3, r3, #25
 80039c8:	d50d      	bpl.n	80039e6 <USB_EPClearStall+0x2e>
 80039ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80039e6:	78cb      	ldrb	r3, [r1, #3]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d00f      	beq.n	8003a0c <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a14:	045b      	lsls	r3, r3, #17
 8003a16:	d50d      	bpl.n	8003a34 <USB_EPClearStall+0x7c>
 8003a18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003a48:	e7da      	b.n	8003a00 <USB_EPClearStall+0x48>

08003a4a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003a4a:	b911      	cbnz	r1, 8003a52 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003a52:	2000      	movs	r0, #0
 8003a54:	4770      	bx	lr

08003a56 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003a56:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003a5a:	b280      	uxth	r0, r0
 8003a5c:	4770      	bx	lr

08003a5e <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a62:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a64:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003a6c:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 8003a6e:	428b      	cmp	r3, r1
 8003a70:	d100      	bne.n	8003a74 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8003a72:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003a74:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8003a76:	520a      	strh	r2, [r1, r0]
    pBuf++;
 8003a78:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8003a7a:	e7f8      	b.n	8003a6e <USB_WritePMA+0x10>

08003a7c <USB_EPStartXfer>:
{
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003a80:	784a      	ldrb	r2, [r1, #1]
    if (ep->doublebuffer == 0U)
 8003a82:	7b0e      	ldrb	r6, [r1, #12]
  if (ep->is_in == 1U)
 8003a84:	2a01      	cmp	r2, #1
{
 8003a86:	4605      	mov	r5, r0
 8003a88:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003a8a:	f040 811c 	bne.w	8003cc6 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8003a8e:	f8d1 a010 	ldr.w	sl, [r1, #16]
 8003a92:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a94:	6949      	ldr	r1, [r1, #20]
 8003a96:	4557      	cmp	r7, sl
 8003a98:	bf28      	it	cs
 8003a9a:	4657      	movcs	r7, sl
    if (ep->doublebuffer == 0U)
 8003a9c:	bb16      	cbnz	r6, 8003ae4 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a9e:	b2bf      	uxth	r7, r7
 8003aa0:	88e2      	ldrh	r2, [r4, #6]
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	f7ff ffdb 	bl	8003a5e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003aa8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003aac:	7823      	ldrb	r3, [r4, #0]
 8003aae:	f205 4102 	addw	r1, r5, #1026	; 0x402
 8003ab2:	fa11 f282 	uxtah	r2, r1, r2
 8003ab6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003aba:	8017      	strh	r7, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003abc:	7822      	ldrb	r2, [r4, #0]
 8003abe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003ade:	2000      	movs	r0, #0
}
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8003ae4:	78e3      	ldrb	r3, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 8003ae6:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ae8:	f894 c000 	ldrb.w	ip, [r4]
      if (ep->type == EP_TYPE_BULK)
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	f040 80d3 	bne.w	8003c98 <USB_EPStartXfer+0x21c>
        if (ep->xfer_len_db > ep->maxpacket)
 8003af2:	45b2      	cmp	sl, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003af4:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8003af8:	f080 80b7 	bcs.w	8003c6a <USB_EPStartXfer+0x1ee>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003afc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b04:	0412      	lsls	r2, r2, #16
 8003b06:	0c12      	lsrs	r2, r2, #16
 8003b08:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b10:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b14:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b1c:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b1e:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8003b22:	6226      	str	r6, [r4, #32]
            ep->xfer_buff += len;
 8003b24:	eb01 0907 	add.w	r9, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003b28:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b2a:	d051      	beq.n	8003bd0 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b2c:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8003b30:	fa1e f282 	uxtah	r2, lr, r2
 8003b34:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b38:	8962      	ldrh	r2, [r4, #10]
 8003b3a:	f7ff ff90 	bl	8003a5e <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003b3e:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b40:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8003b42:	f8c4 9014 	str.w	r9, [r4, #20]
              ep->xfer_len_db -= len;
 8003b46:	bf36      	itet	cc
 8003b48:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8003b4a:	2300      	movcs	r3, #0
 8003b4c:	463e      	movcc	r6, r7
 8003b4e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b50:	b2b3      	uxth	r3, r6
 8003b52:	bb82      	cbnz	r2, 8003bb6 <USB_EPStartXfer+0x13a>
 8003b54:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003b58:	7821      	ldrb	r1, [r4, #0]
 8003b5a:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8003b5e:	fa10 f282 	uxtah	r2, r0, r2
 8003b62:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003b66:	2e3e      	cmp	r6, #62	; 0x3e
 8003b68:	8811      	ldrh	r1, [r2, #0]
 8003b6a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003b6e:	8011      	strh	r1, [r2, #0]
 8003b70:	d914      	bls.n	8003b9c <USB_EPStartXfer+0x120>
 8003b72:	8811      	ldrh	r1, [r2, #0]
 8003b74:	0970      	lsrs	r0, r6, #5
 8003b76:	06f6      	lsls	r6, r6, #27
 8003b78:	bf08      	it	eq
 8003b7a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003b7e:	b289      	uxth	r1, r1
 8003b80:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003b84:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003b88:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003b8c:	b289      	uxth	r1, r1
 8003b8e:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b90:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b92:	4649      	mov	r1, r9
 8003b94:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b96:	f7ff ff62 	bl	8003a5e <USB_WritePMA>
 8003b9a:	e78f      	b.n	8003abc <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b9c:	b90e      	cbnz	r6, 8003ba2 <USB_EPStartXfer+0x126>
 8003b9e:	8811      	ldrh	r1, [r2, #0]
 8003ba0:	e7f0      	b.n	8003b84 <USB_EPStartXfer+0x108>
 8003ba2:	07f1      	lsls	r1, r6, #31
 8003ba4:	8811      	ldrh	r1, [r2, #0]
 8003ba6:	ea4f 0056 	mov.w	r0, r6, lsr #1
 8003baa:	bf48      	it	mi
 8003bac:	3001      	addmi	r0, #1
 8003bae:	b289      	uxth	r1, r1
 8003bb0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003bb4:	e7ea      	b.n	8003b8c <USB_EPStartXfer+0x110>
 8003bb6:	2a01      	cmp	r2, #1
 8003bb8:	d1ea      	bne.n	8003b90 <USB_EPStartXfer+0x114>
 8003bba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003bbe:	7821      	ldrb	r1, [r4, #0]
 8003bc0:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8003bc4:	fa10 f282 	uxtah	r2, r0, r2
 8003bc8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003bcc:	8013      	strh	r3, [r2, #0]
 8003bce:	e7df      	b.n	8003b90 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bd0:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8003bd4:	fa1e f282 	uxtah	r2, lr, r2
 8003bd8:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bdc:	8922      	ldrh	r2, [r4, #8]
 8003bde:	f7ff ff3e 	bl	8003a5e <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003be2:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003be4:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8003be6:	f8c4 9014 	str.w	r9, [r4, #20]
              ep->xfer_len_db -= len;
 8003bea:	bf36      	itet	cc
 8003bec:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8003bee:	4643      	movcs	r3, r8
 8003bf0:	463e      	movcc	r6, r7
 8003bf2:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bf4:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bf6:	bb5a      	cbnz	r2, 8003c50 <USB_EPStartXfer+0x1d4>
 8003bf8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003bfc:	7821      	ldrb	r1, [r4, #0]
 8003bfe:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003c02:	fa10 f282 	uxtah	r2, r0, r2
 8003c06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003c0a:	2e3e      	cmp	r6, #62	; 0x3e
 8003c0c:	8811      	ldrh	r1, [r2, #0]
 8003c0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003c12:	8011      	strh	r1, [r2, #0]
 8003c14:	d910      	bls.n	8003c38 <USB_EPStartXfer+0x1bc>
 8003c16:	8811      	ldrh	r1, [r2, #0]
 8003c18:	0970      	lsrs	r0, r6, #5
 8003c1a:	06f7      	lsls	r7, r6, #27
 8003c1c:	bf08      	it	eq
 8003c1e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003c22:	b289      	uxth	r1, r1
 8003c24:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003c28:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003c2c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003c30:	b289      	uxth	r1, r1
 8003c32:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c34:	8962      	ldrh	r2, [r4, #10]
 8003c36:	e7ac      	b.n	8003b92 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c38:	b90e      	cbnz	r6, 8003c3e <USB_EPStartXfer+0x1c2>
 8003c3a:	8811      	ldrh	r1, [r2, #0]
 8003c3c:	e7f4      	b.n	8003c28 <USB_EPStartXfer+0x1ac>
 8003c3e:	8811      	ldrh	r1, [r2, #0]
 8003c40:	0870      	lsrs	r0, r6, #1
 8003c42:	07f6      	lsls	r6, r6, #31
 8003c44:	bf48      	it	mi
 8003c46:	3001      	addmi	r0, #1
 8003c48:	b289      	uxth	r1, r1
 8003c4a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003c4e:	e7ef      	b.n	8003c30 <USB_EPStartXfer+0x1b4>
 8003c50:	2a01      	cmp	r2, #1
 8003c52:	d1ef      	bne.n	8003c34 <USB_EPStartXfer+0x1b8>
 8003c54:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003c58:	7821      	ldrb	r1, [r4, #0]
 8003c5a:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003c5e:	fa10 f282 	uxtah	r2, r0, r2
 8003c62:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003c66:	8013      	strh	r3, [r2, #0]
 8003c68:	e7e4      	b.n	8003c34 <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003c6a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003c6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c72:	0412      	lsls	r2, r2, #16
 8003c74:	0c12      	lsrs	r2, r2, #16
 8003c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7e:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c86:	f200 4302 	addw	r3, r0, #1026	; 0x402
 8003c8a:	fa13 f282 	uxtah	r2, r3, r2
 8003c8e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c90:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c94:	8922      	ldrh	r2, [r4, #8]
 8003c96:	e77e      	b.n	8003b96 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c98:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 8003c9c:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c9e:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 8003ca2:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ca8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003caa:	d007      	beq.n	8003cbc <USB_EPStartXfer+0x240>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cac:	f200 4606 	addw	r6, r0, #1030	; 0x406
 8003cb0:	fa16 f282 	uxtah	r2, r6, r2
 8003cb4:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cb8:	8962      	ldrh	r2, [r4, #10]
 8003cba:	e76c      	b.n	8003b96 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cbc:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8003cc0:	fa16 f282 	uxtah	r2, r6, r2
 8003cc4:	e7e4      	b.n	8003c90 <USB_EPStartXfer+0x214>
    if (ep->doublebuffer == 0U)
 8003cc6:	2e00      	cmp	r6, #0
 8003cc8:	d13c      	bne.n	8003d44 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 8003cca:	698a      	ldr	r2, [r1, #24]
 8003ccc:	690b      	ldr	r3, [r1, #16]
 8003cce:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8003cd0:	bf84      	itt	hi
 8003cd2:	1ad6      	subhi	r6, r2, r3
 8003cd4:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003cd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003cda:	618e      	str	r6, [r1, #24]
 8003cdc:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8003ce0:	7809      	ldrb	r1, [r1, #0]
 8003ce2:	fa10 f383 	uxtah	r3, r0, r3
 8003ce6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003cea:	2a3e      	cmp	r2, #62	; 0x3e
 8003cec:	8819      	ldrh	r1, [r3, #0]
 8003cee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003cf2:	8019      	strh	r1, [r3, #0]
 8003cf4:	d91a      	bls.n	8003d2c <USB_EPStartXfer+0x2b0>
 8003cf6:	0951      	lsrs	r1, r2, #5
 8003cf8:	06d0      	lsls	r0, r2, #27
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	bf08      	it	eq
 8003cfe:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003d02:	b292      	uxth	r2, r2
 8003d04:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003d08:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003d0c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003d10:	b292      	uxth	r2, r2
 8003d12:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d14:	7822      	ldrb	r2, [r4, #0]
 8003d16:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003d2a:	e6d2      	b.n	8003ad2 <USB_EPStartXfer+0x56>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d2c:	b90a      	cbnz	r2, 8003d32 <USB_EPStartXfer+0x2b6>
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	e7ea      	b.n	8003d08 <USB_EPStartXfer+0x28c>
 8003d32:	0851      	lsrs	r1, r2, #1
 8003d34:	07d2      	lsls	r2, r2, #31
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	bf48      	it	mi
 8003d3a:	3101      	addmi	r1, #1
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003d42:	e7e5      	b.n	8003d10 <USB_EPStartXfer+0x294>
      if (ep->type == EP_TYPE_BULK)
 8003d44:	78cb      	ldrb	r3, [r1, #3]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d174      	bne.n	8003e34 <USB_EPStartXfer+0x3b8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d14c      	bne.n	8003de8 <USB_EPStartXfer+0x36c>
 8003d4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d52:	780b      	ldrb	r3, [r1, #0]
 8003d54:	f200 4102 	addw	r1, r0, #1026	; 0x402
 8003d58:	fa11 f282 	uxtah	r2, r1, r2
 8003d5c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003d60:	8813      	ldrh	r3, [r2, #0]
 8003d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d66:	8013      	strh	r3, [r2, #0]
 8003d68:	6923      	ldr	r3, [r4, #16]
 8003d6a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d6c:	d921      	bls.n	8003db2 <USB_EPStartXfer+0x336>
 8003d6e:	8811      	ldrh	r1, [r2, #0]
 8003d70:	0958      	lsrs	r0, r3, #5
 8003d72:	06df      	lsls	r7, r3, #27
 8003d74:	bf08      	it	eq
 8003d76:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003d7a:	b289      	uxth	r1, r1
 8003d7c:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003d80:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003d84:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003d88:	b289      	uxth	r1, r1
 8003d8a:	8011      	strh	r1, [r2, #0]
 8003d8c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003d90:	7821      	ldrb	r1, [r4, #0]
 8003d92:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003d96:	fa10 f282 	uxtah	r2, r0, r2
 8003d9a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003da0:	8811      	ldrh	r1, [r2, #0]
 8003da2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003da6:	8011      	strh	r1, [r2, #0]
 8003da8:	d80f      	bhi.n	8003dca <USB_EPStartXfer+0x34e>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d139      	bne.n	8003e22 <USB_EPStartXfer+0x3a6>
 8003dae:	8813      	ldrh	r3, [r2, #0]
 8003db0:	e014      	b.n	8003ddc <USB_EPStartXfer+0x360>
 8003db2:	b90b      	cbnz	r3, 8003db8 <USB_EPStartXfer+0x33c>
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	e7e3      	b.n	8003d80 <USB_EPStartXfer+0x304>
 8003db8:	8811      	ldrh	r1, [r2, #0]
 8003dba:	0858      	lsrs	r0, r3, #1
 8003dbc:	07de      	lsls	r6, r3, #31
 8003dbe:	bf48      	it	mi
 8003dc0:	3001      	addmi	r0, #1
 8003dc2:	b289      	uxth	r1, r1
 8003dc4:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003dc8:	e7de      	b.n	8003d88 <USB_EPStartXfer+0x30c>
 8003dca:	0959      	lsrs	r1, r3, #5
 8003dcc:	06d8      	lsls	r0, r3, #27
 8003dce:	8813      	ldrh	r3, [r2, #0]
 8003dd0:	bf08      	it	eq
 8003dd2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8003de8:	69e3      	ldr	r3, [r4, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d092      	beq.n	8003d14 <USB_EPStartXfer+0x298>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003dee:	7822      	ldrb	r2, [r4, #0]
 8003df0:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003df4:	f244 0340 	movw	r3, #16448	; 0x4040
 8003df8:	ea03 0001 	and.w	r0, r3, r1
 8003dfc:	438b      	bics	r3, r1
 8003dfe:	d001      	beq.n	8003e04 <USB_EPStartXfer+0x388>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d187      	bne.n	8003d14 <USB_EPStartXfer+0x298>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8003e04:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e1c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003e20:	e778      	b.n	8003d14 <USB_EPStartXfer+0x298>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003e22:	0859      	lsrs	r1, r3, #1
 8003e24:	07db      	lsls	r3, r3, #31
 8003e26:	8813      	ldrh	r3, [r2, #0]
 8003e28:	bf48      	it	mi
 8003e2a:	3101      	addmi	r1, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003e32:	e7d7      	b.n	8003de4 <USB_EPStartXfer+0x368>
      else if (ep->type == EP_TYPE_ISOC)
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d15f      	bne.n	8003ef8 <USB_EPStartXfer+0x47c>
        if (ep->xfer_len > ep->maxpacket)
 8003e38:	698b      	ldr	r3, [r1, #24]
 8003e3a:	6909      	ldr	r1, [r1, #16]
 8003e3c:	428b      	cmp	r3, r1
          ep->xfer_len -= len;
 8003e3e:	bf8a      	itet	hi
 8003e40:	1a58      	subhi	r0, r3, r1
          ep->xfer_len = 0U;
 8003e42:	2000      	movls	r0, #0
 8003e44:	460b      	movhi	r3, r1
 8003e46:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	f47f af63 	bne.w	8003d14 <USB_EPStartXfer+0x298>
 8003e4e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003e52:	7821      	ldrb	r1, [r4, #0]
 8003e54:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8003e58:	fa10 f282 	uxtah	r2, r0, r2
 8003e5c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003e60:	2b3e      	cmp	r3, #62	; 0x3e
 8003e62:	8811      	ldrh	r1, [r2, #0]
 8003e64:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003e68:	8011      	strh	r1, [r2, #0]
 8003e6a:	d920      	bls.n	8003eae <USB_EPStartXfer+0x432>
 8003e6c:	8811      	ldrh	r1, [r2, #0]
 8003e6e:	0958      	lsrs	r0, r3, #5
 8003e70:	06df      	lsls	r7, r3, #27
 8003e72:	bf08      	it	eq
 8003e74:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003e78:	b289      	uxth	r1, r1
 8003e7a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003e7e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003e82:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003e86:	b289      	uxth	r1, r1
 8003e88:	8011      	strh	r1, [r2, #0]
 8003e8a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003e8e:	7821      	ldrb	r1, [r4, #0]
 8003e90:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003e94:	fa10 f282 	uxtah	r2, r0, r2
 8003e98:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e9e:	8811      	ldrh	r1, [r2, #0]
 8003ea0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003ea4:	8011      	strh	r1, [r2, #0]
 8003ea6:	d80e      	bhi.n	8003ec6 <USB_EPStartXfer+0x44a>
 8003ea8:	b9eb      	cbnz	r3, 8003ee6 <USB_EPStartXfer+0x46a>
 8003eaa:	8813      	ldrh	r3, [r2, #0]
 8003eac:	e014      	b.n	8003ed8 <USB_EPStartXfer+0x45c>
 8003eae:	b90b      	cbnz	r3, 8003eb4 <USB_EPStartXfer+0x438>
 8003eb0:	8811      	ldrh	r1, [r2, #0]
 8003eb2:	e7e4      	b.n	8003e7e <USB_EPStartXfer+0x402>
 8003eb4:	8811      	ldrh	r1, [r2, #0]
 8003eb6:	0858      	lsrs	r0, r3, #1
 8003eb8:	07de      	lsls	r6, r3, #31
 8003eba:	bf48      	it	mi
 8003ebc:	3001      	addmi	r0, #1
 8003ebe:	b289      	uxth	r1, r1
 8003ec0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003ec4:	e7df      	b.n	8003e86 <USB_EPStartXfer+0x40a>
 8003ec6:	0959      	lsrs	r1, r3, #5
 8003ec8:	06d8      	lsls	r0, r3, #27
 8003eca:	8813      	ldrh	r3, [r2, #0]
 8003ecc:	bf08      	it	eq
 8003ece:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8013      	strh	r3, [r2, #0]
 8003ee4:	e716      	b.n	8003d14 <USB_EPStartXfer+0x298>
 8003ee6:	0859      	lsrs	r1, r3, #1
 8003ee8:	07db      	lsls	r3, r3, #31
 8003eea:	8813      	ldrh	r3, [r2, #0]
 8003eec:	bf48      	it	mi
 8003eee:	3101      	addmi	r1, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003ef6:	e7f3      	b.n	8003ee0 <USB_EPStartXfer+0x464>
        return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
 8003efa:	e5f1      	b.n	8003ae0 <USB_EPStartXfer+0x64>

08003efc <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f02:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003f04:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8003f06:	460c      	mov	r4, r1
 8003f08:	462e      	mov	r6, r5
 8003f0a:	1a47      	subs	r7, r0, r1
 8003f0c:	193a      	adds	r2, r7, r4
 8003f0e:	3402      	adds	r4, #2
 8003f10:	b936      	cbnz	r6, 8003f20 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8003f12:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8003f14:	bf44      	itt	mi
 8003f16:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003f1a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003f24:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003f28:	0a12      	lsrs	r2, r2, #8
 8003f2a:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8003f2e:	3e01      	subs	r6, #1
 8003f30:	e7ec      	b.n	8003f0c <USB_ReadPMA+0x10>

08003f32 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003f32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003f36:	b10b      	cbz	r3, 8003f3c <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4718      	bx	r3
  }

  return ret;
}
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	4770      	bx	lr

08003f40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003f40:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8003f42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003f46:	b10b      	cbz	r3, 8003f4c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	bd08      	pop	{r3, pc}

08003f50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003f54:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 fb13 	bl	8004584 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003f5e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003f60:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8003f64:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003f68:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8003f6c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003f70:	f001 031f 	and.w	r3, r1, #31
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d008      	beq.n	8003f8a <USBD_LL_SetupStage+0x3a>
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d00c      	beq.n	8003f96 <USBD_LL_SetupStage+0x46>
 8003f7c:	b98b      	cbnz	r3, 8003fa2 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003f7e:	4629      	mov	r1, r5
 8003f80:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8003f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003f86:	f000 b8f5 	b.w	8004174 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4620      	mov	r0, r4
}
 8003f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003f92:	f000 ba43 	b.w	800441c <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003f96:	4629      	mov	r1, r5
 8003f98:	4620      	mov	r0, r4
}
 8003f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003f9e:	f000 ba63 	b.w	8004468 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8003fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003fac:	f000 bb8e 	b.w	80046cc <USBD_LL_StallEP>

08003fb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003fb6:	b9f9      	cbnz	r1, 8003ff8 <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003fb8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d10c      	bne.n	8003fda <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8003fc0:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d90a      	bls.n	8003fde <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8003fc8:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003fca:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003fcc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003fd0:	bf28      	it	cs
 8003fd2:	461a      	movcs	r2, r3
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f000 faf5 	bl	80045c4 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8003fda:	2000      	movs	r0, #0
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d104      	bne.n	8003ff0 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 8003fe6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	b103      	cbz	r3, 8003ff0 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 8003fee:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 faef 	bl	80045d4 <USBD_CtlSendStatus>
 8003ff6:	e7f0      	b.n	8003fda <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ff8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d1ec      	bne.n	8003fda <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 8004000:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0e7      	beq.n	8003fda <USBD_LL_DataOutStage+0x2a>
}
 800400a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800400e:	4718      	bx	r3

08004010 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004010:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004012:	4604      	mov	r4, r0
 8004014:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004016:	2900      	cmp	r1, #0
 8004018:	d13f      	bne.n	800409a <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800401a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800401e:	2a02      	cmp	r2, #2
 8004020:	d10f      	bne.n	8004042 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8004022:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8004026:	4295      	cmp	r5, r2
 8004028:	d915      	bls.n	8004056 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800402a:	1aaa      	subs	r2, r5, r2
 800402c:	9101      	str	r1, [sp, #4]
 800402e:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004030:	4631      	mov	r1, r6
 8004032:	f000 fabf 	bl	80045b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004036:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004038:	461a      	mov	r2, r3
 800403a:	4619      	mov	r1, r3
 800403c:	4620      	mov	r0, r4
 800403e:	f000 fb7b 	bl	8004738 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004042:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004050:	2000      	movs	r0, #0
 8004052:	b002      	add	sp, #8
 8004054:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8004056:	d10e      	bne.n	8004076 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004058:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800405a:	4295      	cmp	r5, r2
 800405c:	d80b      	bhi.n	8004076 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800405e:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004062:	42aa      	cmp	r2, r5
 8004064:	d207      	bcs.n	8004076 <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004066:	460a      	mov	r2, r1
 8004068:	9101      	str	r1, [sp, #4]
 800406a:	f000 faa3 	bl	80045b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004074:	e7e0      	b.n	8004038 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004076:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800407a:	2b03      	cmp	r3, #3
 800407c:	d105      	bne.n	800408a <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 800407e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	b10b      	cbz	r3, 800408a <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 8004086:	4620      	mov	r0, r4
 8004088:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	4620      	mov	r0, r4
 800408e:	f000 fb1d 	bl	80046cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004092:	4620      	mov	r0, r4
 8004094:	f000 faa9 	bl	80045ea <USBD_CtlReceiveStatus>
 8004098:	e7d3      	b.n	8004042 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800409a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d1d6      	bne.n	8004050 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 80040a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0d1      	beq.n	8004050 <USBD_LL_DataInStage+0x40>
}
 80040ac:	b002      	add	sp, #8
 80040ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80040b2:	4718      	bx	r3

080040b4 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040b4:	2301      	movs	r3, #1
{
 80040b6:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 80040bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80040c0:	2100      	movs	r1, #0
{
 80040c2:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 80040c4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80040c8:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80040ca:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 80040ce:	b1db      	cbz	r3, 8004108 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80040d0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80040d4:	b112      	cbz	r2, 80040dc <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b103      	cbz	r3, 80040dc <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80040da:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80040dc:	2200      	movs	r2, #0
 80040de:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040e0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80040e2:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80040e4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80040e6:	4620      	mov	r0, r4
 80040e8:	f000 fae4 	bl	80046b4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80040ec:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040f0:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80040f4:	462b      	mov	r3, r5
 80040f6:	2200      	movs	r2, #0
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 fada 	bl	80046b4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004100:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004102:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8004104:	2000      	movs	r0, #0
}
 8004106:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004108:	2003      	movs	r0, #3
 800410a:	e7fc      	b.n	8004106 <USBD_LL_Reset+0x52>

0800410c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800410c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800410e:	2000      	movs	r0, #0
 8004110:	4770      	bx	lr

08004112 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004112:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800411c:	2304      	movs	r3, #4
 800411e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004122:	2000      	movs	r0, #0
 8004124:	4770      	bx	lr

08004126 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004126:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800412a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800412c:	bf02      	ittt	eq
 800412e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004132:	b2db      	uxtbeq	r3, r3
 8004134:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004138:	2000      	movs	r0, #0
 800413a:	4770      	bx	lr

0800413c <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800413c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004140:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004142:	b142      	cbz	r2, 8004156 <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004144:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004148:	2b03      	cmp	r3, #3
 800414a:	d102      	bne.n	8004152 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 800414c:	69d3      	ldr	r3, [r2, #28]
 800414e:	b123      	cbz	r3, 800415a <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 8004150:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004152:	2000      	movs	r0, #0
 8004154:	e000      	b.n	8004158 <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 8004156:	2003      	movs	r0, #3
}
 8004158:	bd08      	pop	{r3, pc}
  return USBD_OK;
 800415a:	4618      	mov	r0, r3
 800415c:	e7fc      	b.n	8004158 <USBD_LL_SOF+0x1c>

0800415e <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800415e:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004160:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004162:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004164:	f000 fab2 	bl	80046cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004168:	4620      	mov	r0, r4
 800416a:	2100      	movs	r1, #0
}
 800416c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004170:	f000 baac 	b.w	80046cc <USBD_LL_StallEP>

08004174 <USBD_StdDevReq>:
{
 8004174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004176:	780d      	ldrb	r5, [r1, #0]
 8004178:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800417c:	2d20      	cmp	r5, #32
{
 800417e:	4604      	mov	r4, r0
 8004180:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004182:	d014      	beq.n	80041ae <USBD_StdDevReq+0x3a>
 8004184:	2d40      	cmp	r5, #64	; 0x40
 8004186:	d012      	beq.n	80041ae <USBD_StdDevReq+0x3a>
 8004188:	2d00      	cmp	r5, #0
 800418a:	f040 8112 	bne.w	80043b2 <USBD_StdDevReq+0x23e>
      switch (req->bRequest)
 800418e:	784f      	ldrb	r7, [r1, #1]
 8004190:	2f09      	cmp	r7, #9
 8004192:	f200 810e 	bhi.w	80043b2 <USBD_StdDevReq+0x23e>
 8004196:	e8df f017 	tbh	[pc, r7, lsl #1]
 800419a:	0113      	.short	0x0113
 800419c:	010c0133 	.word	0x010c0133
 80041a0:	010c0129 	.word	0x010c0129
 80041a4:	00130093 	.word	0x00130093
 80041a8:	00fb010c 	.word	0x00fb010c
 80041ac:	00af      	.short	0x00af
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80041ae:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4631      	mov	r1, r6
 80041b6:	4620      	mov	r0, r4
}
 80041b8:	b003      	add	sp, #12
 80041ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80041be:	4718      	bx	r3
  switch (req->wValue >> 8)
 80041c0:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80041c8:	0a0b      	lsrs	r3, r1, #8
 80041ca:	3b01      	subs	r3, #1
 80041cc:	2b0e      	cmp	r3, #14
 80041ce:	d80d      	bhi.n	80041ec <USBD_StdDevReq+0x78>
 80041d0:	e8df f003 	tbb	[pc, r3]
 80041d4:	0c382b12 	.word	0x0c382b12
 80041d8:	0c6b610c 	.word	0x0c6b610c
 80041dc:	0c0c0c0c 	.word	0x0c0c0c0c
 80041e0:	0c0c      	.short	0x0c0c
 80041e2:	08          	.byte	0x08
 80041e3:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80041e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041e8:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80041ea:	b943      	cbnz	r3, 80041fe <USBD_StdDevReq+0x8a>
      USBD_CtlError(pdev, req);
 80041ec:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 80041ee:	f7ff ffb6 	bl	800415e <USBD_CtlError.constprop.0>
}
 80041f2:	4628      	mov	r0, r5
 80041f4:	b003      	add	sp, #12
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80041f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	7c20      	ldrb	r0, [r4, #16]
 8004200:	f10d 0106 	add.w	r1, sp, #6
 8004204:	4798      	blx	r3
  if (req->wLength != 0U)
 8004206:	88f2      	ldrh	r2, [r6, #6]
 8004208:	2a00      	cmp	r2, #0
 800420a:	f000 80f5 	beq.w	80043f8 <USBD_StdDevReq+0x284>
    if (len != 0U)
 800420e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ea      	beq.n	80041ec <USBD_StdDevReq+0x78>
      len = MIN(len, req->wLength);
 8004216:	429a      	cmp	r2, r3
 8004218:	bf28      	it	cs
 800421a:	461a      	movcs	r2, r3
 800421c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004220:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004222:	4620      	mov	r0, r4
 8004224:	f000 f9b9 	bl	800459a <USBD_CtlSendData>
        break;
 8004228:	e7e3      	b.n	80041f2 <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800422a:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800422c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004230:	b932      	cbnz	r2, 8004240 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004234:	f10d 0006 	add.w	r0, sp, #6
 8004238:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800423a:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800423c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800423e:	e7e2      	b.n	8004206 <USBD_StdDevReq+0x92>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	e7f7      	b.n	8004234 <USBD_StdDevReq+0xc0>
      switch ((uint8_t)(req->wValue))
 8004244:	b2c9      	uxtb	r1, r1
 8004246:	2905      	cmp	r1, #5
 8004248:	d81c      	bhi.n	8004284 <USBD_StdDevReq+0x110>
 800424a:	e8df f001 	tbb	[pc, r1]
 800424e:	0703      	.short	0x0703
 8004250:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004254:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	e7c6      	b.n	80041ea <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800425c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	e7c2      	b.n	80041ea <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004264:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	e7be      	b.n	80041ea <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800426c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	e7ba      	b.n	80041ea <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004274:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	e7b6      	b.n	80041ea <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800427c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	e7b2      	b.n	80041ea <USBD_StdDevReq+0x76>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8004284:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ae      	beq.n	80041ec <USBD_StdDevReq+0x78>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800428e:	f10d 0206 	add.w	r2, sp, #6
 8004292:	4798      	blx	r3
  if (err != 0U)
 8004294:	e7b7      	b.n	8004206 <USBD_StdDevReq+0x92>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004296:	7c03      	ldrb	r3, [r0, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1a7      	bne.n	80041ec <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800429c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80042a0:	f10d 0006 	add.w	r0, sp, #6
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	4798      	blx	r3
  if (err != 0U)
 80042a8:	e7ad      	b.n	8004206 <USBD_StdDevReq+0x92>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042aa:	7c03      	ldrb	r3, [r0, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d19d      	bne.n	80041ec <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80042b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80042b4:	f10d 0006 	add.w	r0, sp, #6
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80042bc:	2307      	movs	r3, #7
 80042be:	e7bd      	b.n	800423c <USBD_StdDevReq+0xc8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80042c0:	888b      	ldrh	r3, [r1, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d192      	bne.n	80041ec <USBD_StdDevReq+0x78>
 80042c6:	88cb      	ldrh	r3, [r1, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d18f      	bne.n	80041ec <USBD_StdDevReq+0x78>
 80042cc:	884e      	ldrh	r6, [r1, #2]
 80042ce:	2e7f      	cmp	r6, #127	; 0x7f
 80042d0:	d88c      	bhi.n	80041ec <USBD_StdDevReq+0x78>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d088      	beq.n	80041ec <USBD_StdDevReq+0x78>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80042da:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80042dc:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80042e0:	f000 fa18 	bl	8004714 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f000 f975 	bl	80045d4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80042ea:	b11e      	cbz	r6, 80042f4 <USBD_StdDevReq+0x180>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042ec:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80042ee:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80042f2:	e77e      	b.n	80041f2 <USBD_StdDevReq+0x7e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e7fa      	b.n	80042ee <USBD_StdDevReq+0x17a>
  cfgidx = (uint8_t)(req->wValue);
 80042f8:	788e      	ldrb	r6, [r1, #2]
 80042fa:	4f47      	ldr	r7, [pc, #284]	; (8004418 <USBD_StdDevReq+0x2a4>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80042fc:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 80042fe:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004300:	d903      	bls.n	800430a <USBD_StdDevReq+0x196>
    USBD_CtlError(pdev, req);
 8004302:	f7ff ff2c 	bl	800415e <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8004306:	2503      	movs	r5, #3
      break;
 8004308:	e773      	b.n	80041f2 <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 800430a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800430e:	2b02      	cmp	r3, #2
 8004310:	b2da      	uxtb	r2, r3
 8004312:	d008      	beq.n	8004326 <USBD_StdDevReq+0x1b2>
 8004314:	2a03      	cmp	r2, #3
 8004316:	d015      	beq.n	8004344 <USBD_StdDevReq+0x1d0>
      USBD_CtlError(pdev, req);
 8004318:	f7ff ff21 	bl	800415e <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800431c:	7839      	ldrb	r1, [r7, #0]
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff fe0e 	bl	8003f40 <USBD_ClrClassConfig>
 8004324:	e7ef      	b.n	8004306 <USBD_StdDevReq+0x192>
      if (cfgidx != 0U)
 8004326:	2e00      	cmp	r6, #0
 8004328:	d066      	beq.n	80043f8 <USBD_StdDevReq+0x284>
        pdev->dev_config = cfgidx;
 800432a:	2101      	movs	r1, #1
 800432c:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800432e:	f7ff fe00 	bl	8003f32 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004332:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8004334:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8004336:	2d00      	cmp	r5, #0
 8004338:	f47f af59 	bne.w	80041ee <USBD_StdDevReq+0x7a>
          (void)USBD_CtlSendStatus(pdev);
 800433c:	f000 f94a 	bl	80045d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004340:	2303      	movs	r3, #3
 8004342:	e7d4      	b.n	80042ee <USBD_StdDevReq+0x17a>
      if (cfgidx == 0U)
 8004344:	b95e      	cbnz	r6, 800435e <USBD_StdDevReq+0x1ea>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004346:	2302      	movs	r3, #2
 8004348:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800434c:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800434e:	4631      	mov	r1, r6
 8004350:	f7ff fdf6 	bl	8003f40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004354:	4620      	mov	r0, r4
 8004356:	f000 f93d 	bl	80045d4 <USBD_CtlSendStatus>
 800435a:	4635      	mov	r5, r6
 800435c:	e749      	b.n	80041f2 <USBD_StdDevReq+0x7e>
      else if (cfgidx != pdev->dev_config)
 800435e:	6841      	ldr	r1, [r0, #4]
 8004360:	2901      	cmp	r1, #1
 8004362:	d049      	beq.n	80043f8 <USBD_StdDevReq+0x284>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004364:	b2c9      	uxtb	r1, r1
 8004366:	f7ff fdeb 	bl	8003f40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800436a:	7839      	ldrb	r1, [r7, #0]
 800436c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff fddf 	bl	8003f32 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004374:	4606      	mov	r6, r0
 8004376:	2800      	cmp	r0, #0
 8004378:	d03e      	beq.n	80043f8 <USBD_StdDevReq+0x284>
          USBD_CtlError(pdev, req);
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff feef 	bl	800415e <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004380:	7921      	ldrb	r1, [r4, #4]
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff fddc 	bl	8003f40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004388:	2302      	movs	r3, #2
 800438a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800438e:	e7e4      	b.n	800435a <USBD_StdDevReq+0x1e6>
  if (req->wLength != 1U)
 8004390:	88ca      	ldrh	r2, [r1, #6]
 8004392:	2a01      	cmp	r2, #1
 8004394:	f47f af2a 	bne.w	80041ec <USBD_StdDevReq+0x78>
    switch (pdev->dev_state)
 8004398:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800439c:	2902      	cmp	r1, #2
 800439e:	b2cb      	uxtb	r3, r1
 80043a0:	d805      	bhi.n	80043ae <USBD_StdDevReq+0x23a>
 80043a2:	b133      	cbz	r3, 80043b2 <USBD_StdDevReq+0x23e>
        pdev->dev_default_config = 0U;
 80043a4:	4601      	mov	r1, r0
 80043a6:	2300      	movs	r3, #0
 80043a8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80043ac:	e739      	b.n	8004222 <USBD_StdDevReq+0xae>
    switch (pdev->dev_state)
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d004      	beq.n	80043bc <USBD_StdDevReq+0x248>
        USBD_CtlError(pdev, req);
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff fed3 	bl	800415e <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 80043b8:	2500      	movs	r5, #0
        break;
 80043ba:	e71a      	b.n	80041f2 <USBD_StdDevReq+0x7e>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80043bc:	1d01      	adds	r1, r0, #4
 80043be:	e730      	b.n	8004222 <USBD_StdDevReq+0xae>
  switch (pdev->dev_state)
 80043c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043c4:	3b01      	subs	r3, #1
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d8f3      	bhi.n	80043b2 <USBD_StdDevReq+0x23e>
      if (req->wLength != 0x2U)
 80043ca:	88ca      	ldrh	r2, [r1, #6]
 80043cc:	2a02      	cmp	r2, #2
 80043ce:	f47f af0d 	bne.w	80041ec <USBD_StdDevReq+0x78>
      if (pdev->dev_remote_wakeup != 0U)
 80043d2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80043d6:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2303      	movne	r3, #3
 80043de:	2301      	moveq	r3, #1
 80043e0:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80043e4:	f000 f8d9 	bl	800459a <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043e8:	463d      	mov	r5, r7
      break;
 80043ea:	e702      	b.n	80041f2 <USBD_StdDevReq+0x7e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80043ec:	884b      	ldrh	r3, [r1, #2]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f47f aeff 	bne.w	80041f2 <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 80043f4:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 f8eb 	bl	80045d4 <USBD_CtlSendStatus>
 80043fe:	e6f8      	b.n	80041f2 <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 8004400:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004404:	3b01      	subs	r3, #1
 8004406:	2b02      	cmp	r3, #2
 8004408:	d8d3      	bhi.n	80043b2 <USBD_StdDevReq+0x23e>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800440a:	884b      	ldrh	r3, [r1, #2]
 800440c:	2b01      	cmp	r3, #1
 800440e:	f47f aef0 	bne.w	80041f2 <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	e7ee      	b.n	80043f4 <USBD_StdDevReq+0x280>
 8004416:	bf00      	nop
 8004418:	20000204 	.word	0x20000204

0800441c <USBD_StdItfReq>:
{
 800441c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800441e:	780b      	ldrb	r3, [r1, #0]
 8004420:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004424:	2a40      	cmp	r2, #64	; 0x40
{
 8004426:	4604      	mov	r4, r0
 8004428:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800442a:	d001      	beq.n	8004430 <USBD_StdItfReq+0x14>
 800442c:	065b      	lsls	r3, r3, #25
 800442e:	d416      	bmi.n	800445e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004430:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004434:	3b01      	subs	r3, #1
 8004436:	2b02      	cmp	r3, #2
 8004438:	d811      	bhi.n	800445e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800443a:	7933      	ldrb	r3, [r6, #4]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d80e      	bhi.n	800445e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004440:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004444:	4631      	mov	r1, r6
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4620      	mov	r0, r4
 800444a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800444c:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800444e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004450:	b91b      	cbnz	r3, 800445a <USBD_StdItfReq+0x3e>
 8004452:	b910      	cbnz	r0, 800445a <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f8bd 	bl	80045d4 <USBD_CtlSendStatus>
}
 800445a:	4628      	mov	r0, r5
 800445c:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 800445e:	4620      	mov	r0, r4
 8004460:	f7ff fe7d 	bl	800415e <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004464:	2500      	movs	r5, #0
          break;
 8004466:	e7f8      	b.n	800445a <USBD_StdItfReq+0x3e>

08004468 <USBD_StdEPReq>:
{
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800446c:	888a      	ldrh	r2, [r1, #4]
 800446e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004472:	2b20      	cmp	r3, #32
{
 8004474:	4604      	mov	r4, r0
 8004476:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004478:	d058      	beq.n	800452c <USBD_StdEPReq+0xc4>
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d056      	beq.n	800452c <USBD_StdEPReq+0xc4>
 800447e:	bb9b      	cbnz	r3, 80044e8 <USBD_StdEPReq+0x80>
      switch (req->bRequest)
 8004480:	786b      	ldrb	r3, [r5, #1]
 8004482:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8004484:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004486:	d040      	beq.n	800450a <USBD_StdEPReq+0xa2>
 8004488:	2b03      	cmp	r3, #3
 800448a:	d026      	beq.n	80044da <USBD_StdEPReq+0x72>
 800448c:	bb63      	cbnz	r3, 80044e8 <USBD_StdEPReq+0x80>
          switch (pdev->dev_state)
 800448e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004492:	2b02      	cmp	r3, #2
 8004494:	b2d8      	uxtb	r0, r3
 8004496:	d05a      	beq.n	800454e <USBD_StdEPReq+0xe6>
 8004498:	2803      	cmp	r0, #3
 800449a:	d125      	bne.n	80044e8 <USBD_StdEPReq+0x80>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800449c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80044a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044a4:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80044a8:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 80044ac:	d05e      	beq.n	800456c <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80044ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044b0:	b1d3      	cbz	r3, 80044e8 <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80044b2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80044b6:	3501      	adds	r5, #1
 80044b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80044bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80044c0:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 80044c4:	d005      	beq.n	80044d2 <USBD_StdEPReq+0x6a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 f912 	bl	80046f0 <USBD_LL_IsStallEP>
 80044cc:	3800      	subs	r0, #0
 80044ce:	bf18      	it	ne
 80044d0:	2001      	movne	r0, #1
                pep->status = 0x0000U;
 80044d2:	6028      	str	r0, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80044d4:	2202      	movs	r2, #2
 80044d6:	4629      	mov	r1, r5
 80044d8:	e044      	b.n	8004564 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 80044da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044de:	2b02      	cmp	r3, #2
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	d02b      	beq.n	800453c <USBD_StdEPReq+0xd4>
 80044e4:	2a03      	cmp	r2, #3
 80044e6:	d003      	beq.n	80044f0 <USBD_StdEPReq+0x88>
              USBD_CtlError(pdev, req);
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7ff fe38 	bl	800415e <USBD_CtlError.constprop.0>
              break;
 80044ee:	e00a      	b.n	8004506 <USBD_StdEPReq+0x9e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80044f0:	886b      	ldrh	r3, [r5, #2]
 80044f2:	b92b      	cbnz	r3, 8004500 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80044f4:	064a      	lsls	r2, r1, #25
 80044f6:	d003      	beq.n	8004500 <USBD_StdEPReq+0x98>
 80044f8:	88eb      	ldrh	r3, [r5, #6]
 80044fa:	b90b      	cbnz	r3, 8004500 <USBD_StdEPReq+0x98>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80044fc:	f000 f8e6 	bl	80046cc <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8004500:	4620      	mov	r0, r4
 8004502:	f000 f867 	bl	80045d4 <USBD_CtlSendStatus>
}
 8004506:	2000      	movs	r0, #0
 8004508:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800450a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800450e:	2b02      	cmp	r3, #2
 8004510:	b2da      	uxtb	r2, r3
 8004512:	d013      	beq.n	800453c <USBD_StdEPReq+0xd4>
 8004514:	2a03      	cmp	r2, #3
 8004516:	d1e7      	bne.n	80044e8 <USBD_StdEPReq+0x80>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004518:	886b      	ldrh	r3, [r5, #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f3      	bne.n	8004506 <USBD_StdEPReq+0x9e>
                if ((ep_addr & 0x7FU) != 0x00U)
 800451e:	064e      	lsls	r6, r1, #25
 8004520:	d001      	beq.n	8004526 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004522:	f000 f8dc 	bl	80046de <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8004526:	4620      	mov	r0, r4
 8004528:	f000 f854 	bl	80045d4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800452c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004530:	4629      	mov	r1, r5
 8004532:	4620      	mov	r0, r4
 8004534:	689b      	ldr	r3, [r3, #8]
}
 8004536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800453a:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800453c:	064b      	lsls	r3, r1, #25
 800453e:	d0d3      	beq.n	80044e8 <USBD_StdEPReq+0x80>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004540:	f000 f8c4 	bl	80046cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	4620      	mov	r0, r4
 8004548:	f000 f8c0 	bl	80046cc <USBD_LL_StallEP>
 800454c:	e7db      	b.n	8004506 <USBD_StdEPReq+0x9e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800454e:	0649      	lsls	r1, r1, #25
 8004550:	d1ca      	bne.n	80044e8 <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004552:	0613      	lsls	r3, r2, #24
 8004554:	bf4c      	ite	mi
 8004556:	f104 0114 	addmi.w	r1, r4, #20
 800455a:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800455e:	2300      	movs	r3, #0
 8004560:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004562:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004564:	4620      	mov	r0, r4
 8004566:	f000 f818 	bl	800459a <USBD_CtlSendData>
              break;
 800456a:	e7cc      	b.n	8004506 <USBD_StdEPReq+0x9e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800456c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0b9      	beq.n	80044e8 <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004574:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004578:	2314      	movs	r3, #20
 800457a:	fb03 4505 	mla	r5, r3, r5, r4
 800457e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004582:	e79d      	b.n	80044c0 <USBD_StdEPReq+0x58>

08004584 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004584:	780b      	ldrb	r3, [r1, #0]
 8004586:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004588:	784b      	ldrb	r3, [r1, #1]
 800458a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800458c:	884b      	ldrh	r3, [r1, #2]
 800458e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8004590:	888b      	ldrh	r3, [r1, #4]
 8004592:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8004594:	88cb      	ldrh	r3, [r1, #6]
 8004596:	80c3      	strh	r3, [r0, #6]
}
 8004598:	4770      	bx	lr

0800459a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800459a:	b510      	push	{r4, lr}
 800459c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800459e:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80045a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80045a4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80045a8:	460a      	mov	r2, r1
 80045aa:	2100      	movs	r1, #0
 80045ac:	f000 f8bb 	bl	8004726 <USBD_LL_Transmit>

  return USBD_OK;
}
 80045b0:	2000      	movs	r0, #0
 80045b2:	bd10      	pop	{r4, pc}

080045b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80045b4:	b508      	push	{r3, lr}
 80045b6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80045b8:	460a      	mov	r2, r1
 80045ba:	2100      	movs	r1, #0
 80045bc:	f000 f8b3 	bl	8004726 <USBD_LL_Transmit>

  return USBD_OK;
}
 80045c0:	2000      	movs	r0, #0
 80045c2:	bd08      	pop	{r3, pc}

080045c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80045c4:	b508      	push	{r3, lr}
 80045c6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80045c8:	460a      	mov	r2, r1
 80045ca:	2100      	movs	r1, #0
 80045cc:	f000 f8b4 	bl	8004738 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80045d0:	2000      	movs	r0, #0
 80045d2:	bd08      	pop	{r3, pc}

080045d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80045d4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80045d6:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80045d8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80045da:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80045de:	4619      	mov	r1, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	f000 f8a0 	bl	8004726 <USBD_LL_Transmit>

  return USBD_OK;
}
 80045e6:	2000      	movs	r0, #0
 80045e8:	bd08      	pop	{r3, pc}

080045ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80045ea:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80045ec:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045ee:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80045f0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045f4:	4619      	mov	r1, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 f89e 	bl	8004738 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80045fc:	2000      	movs	r0, #0
 80045fe:	bd08      	pop	{r3, pc}

08004600 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004600:	2803      	cmp	r0, #3
 8004602:	bf9a      	itte	ls
 8004604:	4b01      	ldrls	r3, [pc, #4]	; (800460c <USBD_Get_USB_Status+0xc>)
 8004606:	5c18      	ldrbls	r0, [r3, r0]
{
 8004608:	2003      	movhi	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800460a:	4770      	bx	lr
 800460c:	08004868 	.word	0x08004868

08004610 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004610:	f500 7126 	add.w	r1, r0, #664	; 0x298
 8004614:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8004618:	f7ff bc9a 	b.w	8003f50 <USBD_LL_SetupStage>

0800461c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800461c:	2328      	movs	r3, #40	; 0x28
 800461e:	fb03 0301 	mla	r3, r3, r1, r0
 8004622:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8004626:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800462a:	f7ff bcc1 	b.w	8003fb0 <USBD_LL_DataOutStage>

0800462e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800462e:	2328      	movs	r3, #40	; 0x28
 8004630:	fb03 0301 	mla	r3, r3, r1, r0
 8004634:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8004638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800463a:	f7ff bce9 	b.w	8004010 <USBD_LL_DataInStage>

0800463e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800463e:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8004642:	f7ff bd7b 	b.w	800413c <USBD_LL_SOF>

08004646 <HAL_PCD_ResetCallback>:
{
 8004646:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004648:	7943      	ldrb	r3, [r0, #5]
 800464a:	2b02      	cmp	r3, #2
{
 800464c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800464e:	d001      	beq.n	8004654 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8004650:	f7fb fffc 	bl	800064c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004654:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
 8004658:	2101      	movs	r1, #1
 800465a:	f7ff fd57 	bl	800410c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800465e:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
}
 8004662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004666:	f7ff bd25 	b.w	80040b4 <USBD_LL_Reset>
	...

0800466c <HAL_PCD_SuspendCallback>:
{
 800466c:	b510      	push	{r4, lr}
 800466e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004670:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8004674:	f7ff fd4d 	bl	8004112 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004678:	7a63      	ldrb	r3, [r4, #9]
 800467a:	b123      	cbz	r3, 8004686 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800467c:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_PCD_SuspendCallback+0x1c>)
 800467e:	6913      	ldr	r3, [r2, #16]
 8004680:	f043 0306 	orr.w	r3, r3, #6
 8004684:	6113      	str	r3, [r2, #16]
}
 8004686:	bd10      	pop	{r4, pc}
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <HAL_PCD_ResumeCallback>:
{
 800468c:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 800468e:	7a43      	ldrb	r3, [r0, #9]
{
 8004690:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8004692:	b133      	cbz	r3, 80046a2 <HAL_PCD_ResumeCallback+0x16>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004694:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <HAL_PCD_ResumeCallback+0x24>)
 8004696:	6913      	ldr	r3, [r2, #16]
 8004698:	f023 0306 	bic.w	r3, r3, #6
 800469c:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 800469e:	f7fb ff63 	bl	8000568 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80046a2:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
}
 80046a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80046aa:	f7ff bd3c 	b.w	8004126 <USBD_LL_Resume>
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <USBD_LL_OpenEP>:
{
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80046b8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80046bc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80046be:	4623      	mov	r3, r4
 80046c0:	f7fd f914 	bl	80018ec <HAL_PCD_EP_Open>
}
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80046c8:	f7ff bf9a 	b.w	8004600 <USBD_Get_USB_Status>

080046cc <USBD_LL_StallEP>:
{
 80046cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80046ce:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80046d2:	f7fd f970 	bl	80019b6 <HAL_PCD_EP_SetStall>
}
 80046d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80046da:	f7ff bf91 	b.w	8004600 <USBD_Get_USB_Status>

080046de <USBD_LL_ClearStallEP>:
{
 80046de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80046e0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80046e4:	f7fd f999 	bl	8001a1a <HAL_PCD_EP_ClrStall>
}
 80046e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80046ec:	f7ff bf88 	b.w	8004600 <USBD_Get_USB_Status>

080046f0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80046f0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80046f4:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80046f8:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80046fc:	bf1b      	ittet	ne
 80046fe:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8004702:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004706:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800470a:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800470c:	bf08      	it	eq
 800470e:	f893 0152 	ldrbeq.w	r0, [r3, #338]	; 0x152
}
 8004712:	4770      	bx	lr

08004714 <USBD_LL_SetUSBAddress>:
{
 8004714:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004716:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800471a:	f7fc fbeb 	bl	8000ef4 <HAL_PCD_SetAddress>
}
 800471e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004722:	f7ff bf6d 	b.w	8004600 <USBD_Get_USB_Status>

08004726 <USBD_LL_Transmit>:
{
 8004726:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004728:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800472c:	f7fd f928 	bl	8001980 <HAL_PCD_EP_Transmit>
}
 8004730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004734:	f7ff bf64 	b.w	8004600 <USBD_Get_USB_Status>

08004738 <USBD_LL_PrepareReceive>:
{
 8004738:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800473a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800473e:	f7fd f909 	bl	8001954 <HAL_PCD_EP_Receive>
}
 8004742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004746:	f7ff bf5b 	b.w	8004600 <USBD_Get_USB_Status>
	...

0800474c <HAL_PCDEx_LPM_Callback>:
{
 800474c:	b510      	push	{r4, lr}
 800474e:	4604      	mov	r4, r0
  switch (msg)
 8004750:	b111      	cbz	r1, 8004758 <HAL_PCDEx_LPM_Callback+0xc>
 8004752:	2901      	cmp	r1, #1
 8004754:	d00f      	beq.n	8004776 <HAL_PCDEx_LPM_Callback+0x2a>
}
 8004756:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8004758:	7a43      	ldrb	r3, [r0, #9]
 800475a:	b133      	cbz	r3, 800476a <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 800475c:	f7fb ff04 	bl	8000568 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004760:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <HAL_PCDEx_LPM_Callback+0x44>)
 8004762:	6913      	ldr	r3, [r2, #16]
 8004764:	f023 0306 	bic.w	r3, r3, #6
 8004768:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800476a:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
}
 800476e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8004772:	f7ff bcd8 	b.w	8004126 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8004776:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 800477a:	f7ff fcca 	bl	8004112 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800477e:	7a63      	ldrb	r3, [r4, #9]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0e8      	beq.n	8004756 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004784:	4a02      	ldr	r2, [pc, #8]	; (8004790 <HAL_PCDEx_LPM_Callback+0x44>)
 8004786:	6913      	ldr	r3, [r2, #16]
 8004788:	f043 0306 	orr.w	r3, r3, #6
 800478c:	6113      	str	r3, [r2, #16]
}
 800478e:	e7e2      	b.n	8004756 <HAL_PCDEx_LPM_Callback+0xa>
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <main>:


#include "main.h"

int main(void)
{
 8004794:	b508      	push	{r3, lr}
  hwInit();
 8004796:	f7fc f97b 	bl	8000a90 <hwInit>
  apInit();
 800479a:	f7fb febb 	bl	8000514 <apInit>

  apMain();
 800479e:	f7fb fecf 	bl	8000540 <apMain>
}
 80047a2:	2000      	movs	r0, #0
 80047a4:	bd08      	pop	{r3, pc}

080047a6 <memset>:
 80047a6:	4402      	add	r2, r0
 80047a8:	4603      	mov	r3, r0
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d100      	bne.n	80047b0 <memset+0xa>
 80047ae:	4770      	bx	lr
 80047b0:	f803 1b01 	strb.w	r1, [r3], #1
 80047b4:	e7f9      	b.n	80047aa <memset+0x4>
	...

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4d0d      	ldr	r5, [pc, #52]	; (80047f0 <__libc_init_array+0x38>)
 80047bc:	4c0d      	ldr	r4, [pc, #52]	; (80047f4 <__libc_init_array+0x3c>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	2600      	movs	r6, #0
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	4d0b      	ldr	r5, [pc, #44]	; (80047f8 <__libc_init_array+0x40>)
 80047ca:	4c0c      	ldr	r4, [pc, #48]	; (80047fc <__libc_init_array+0x44>)
 80047cc:	f000 f818 	bl	8004800 <_init>
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	2600      	movs	r6, #0
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08004874 	.word	0x08004874
 80047f4:	08004874 	.word	0x08004874
 80047f8:	08004874 	.word	0x08004874
 80047fc:	08004878 	.word	0x08004878

08004800 <_init>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr

0800480c <_fini>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr
